{"version":3,"sources":["actions/types.js","actions/index.js","history.js","components/Sidebar/Servers.jsx","components/Sidebar/Topics.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["UPDATE_CHAT","sendMessage","message","type","payload","changeServer","server","changeTopic","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","axios","get","sent","data","stop","_x","apply","this","arguments","signIn","user","createHashHistory","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setDrawerVisible","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","isSignedIn","AddCircleOutline","Topics","topics","activeServer","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","handleModalShow","modalType","handleClose","ListItem","e","currentTarget","MoreVert","Menu","id","open","Boolean","onClose","MenuItem","topic","i","Slide","direction","in","timeout","handleTopicChange","button","Typography","variant","toLowerCase","ListItemAvatar","Avatar","Person","ListItemText","primary","userName","CreateJoinModal","handleModalSuccess","baseUrl","mainVisible","setMainVisible","_useState3","_useState4","mainDirection","setMainDirection","_useState5","_useState6","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","serverId","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","response","post","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","createChannel","_ref3","_callee3","_context3","_x5","_x6","renameServer","_ref4","_callee4","_context4","_x7","_x8","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","color","align","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","Button","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","Modal","aria-labelledby","aria-describedby","console","log","Messages","messageContainer","activeTopic","useEffect","scrollIntoView","msg","Fade","src","process","alt","height","from","secondary","ref","element","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","shiftKey","window","onclick","String","includes","Fragment","TextareaAutosize","aria-label","placeholder","handleOnChange","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Dashboard","push","Auth","loginVisible","setLoginVisible","setUserName","userNameError","setUserNameError","userPass","setUserPass","userPassError","setUserPassError","handleOnSubmit","callBack","error","length","createAccount","loginAccount","values","helperText","App","ThemeProvider","theme","react_router_dom","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","backgroundColor","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","isAdmin","combineReducers","undefined","action","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.c754149c.chunk.js","sourcesContent":["export const UPDATE_CHAT = 'UPDATE_CHAT';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_TOPIC = 'CHANGE_TOPIC';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import { SEND_MESSAGE, UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const updateChat = (message) => ({\r\n  type: UPDATE_CHAT,\r\n  payload: message\r\n});\r\n\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: { server }\r\n});\r\n\r\nexport const changeTopic = (server) => ({\r\n  type: CHANGE_TOPIC,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `${baseUrl}/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n        {user.isSignedIn ?\r\n          <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n              <AddCircleOutline />\r\n            </IconButton>\r\n          </Tooltip>\r\n          : null\r\n        }\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { Person, MoreVert } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, ListItemSecondaryAction, Menu, MenuItem, Slide } from '@material-ui/core';\r\nimport { changeTopic } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function Topics(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Local state\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // Handle topic change, and closes drawer if on mobile view\r\n  const handleTopicChange = (topic) => {\r\n    dispatch(changeTopic(topic));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"topics-container\">\r\n\r\n      <List className=\"topic-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {user.isSignedIn ?\r\n            <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n              <IconButton onClick={(e) => handleSettingsClick(e)}> <MoreVert /> </IconButton>\r\n            </Tooltip>\r\n            : null\r\n          }\r\n          <Menu\r\n            id=\"settings-menu\"\r\n            anchorEl={anchorEl}\r\n            open={Boolean(anchorEl)}\r\n            onClick={handleClose}\r\n            onClose={handleClose}\r\n          >\r\n            <MenuItem> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n            <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n            <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n          </Menu>\r\n        </ListItem>\r\n        {topics.map((topic, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={topic + activeServer}>\r\n            <ListItem onClick={(e) => handleTopicChange(topic)} button>\r\n              <i className=\"topic-hashtag\">#</i>\r\n              <Typography variant=\"body1\">{topic.split('-')[0].toLowerCase()}</Typography>\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n        </ListItem>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer } = useSelector(state => state.chat);\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess, modalType } = props;\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/create?serverName=${serverName}&userId=${userId}`);\r\n      handleModalSuccess(response.data);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/channel/create?channelName=${channelName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <div className=\"modal-main\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-server modal-flex\">\r\n            <Card>\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n          <div className=\"modal-join-server modal-flex\">\r\n            <Card>\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer.split('-')[1])}>Create Channel</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"modal-container\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"modal-container\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"modal-container\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Topics from './Topics'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response) => {\r\n    console.log(response);\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Topics setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade } from '@material-ui/core';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeTopic } = chatStore;\r\n\r\n  // ref to message container\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <List>\r\n        {chatStore.servers[activeServer][activeTopic].map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={message.from} secondary={message.msg} className=\"message-text\" />\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainer = element}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeTopic } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    dispatch(sendMessage(message));\r\n    setChatMessage(\"\");\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, topic: activeTopic, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeTopic.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeTopic } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar topics={topics} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <i className=\"topic-hashtag\">#</i>\r\n        <Typography variant=\"h6\"> {activeTopic.split('-')[0].toLowerCase()} </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n\r\n      <div className=\"sidebar-grid\">\r\n        <Sidebar />\r\n      </div>\r\n\r\n      <div className=\"messages-grid\">\r\n        <Header />\r\n        <Messages />\r\n      </div>\r\n\r\n      <div className=\"send-messages-grid\">\r\n        <SendMessage />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(null);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(null);\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/user/create?userName=${userName}&userPass=${userPass}`);\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n\r\n    }\r\n    catch (err) {\r\n      console.log(err.response.data);\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.get(`${baseUrl}/user/login?userName=${userName}&userPass=${userPass}`);\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n\r\n    }\r\n    catch (err) {\r\n      console.log(err.response.data);\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <div className=\"modal-main\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Sign in, or create an account!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-server modal-flex\">\r\n            <Card className=\"modal-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()} className=\"modal-card\">\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Register</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account and start chatting!</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n          <div className=\"modal-join-server modal-flex\">\r\n            <Card className=\"modal-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()} className=\"modal-card\">\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Sign In </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={createVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Username and Password for your account </Typography>\r\n            <form className=\"login-form\">\r\n              <TextField\r\n                id=\"username\"\r\n                label=\"Username\"\r\n                values={userName}\r\n                error={userNameError}\r\n                helperText={userNameError ? 'Invalid Username' : null}\r\n                onChange={(e) => setUserName(e.target.value)}\r\n                margin=\"normal\"\r\n                autoComplete=\"off\"\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                label=\"Password\"\r\n                values={userPass}\r\n                error={userPassError}\r\n                helperText={userPassError ? 'Inalid Password (min length 6)' : null}\r\n                onChange={(e) => setUserPass(e.target.value)}\r\n                margin=\"normal\"\r\n                autoComplete=\"off\"\r\n              />\r\n              <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={loginVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter your username and password </Typography>\r\n            <form className=\"login-form\">\r\n              <TextField\r\n                id=\"username\"\r\n                label=\"Username\"\r\n                values={userName}\r\n                error={userNameError}\r\n                helperText={userNameError ? 'Invalid Username' : null}\r\n                onChange={(e) => setUserName(e.target.value)}\r\n                margin=\"normal\"\r\n                autoComplete=\"off\"\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                label=\"Password\"\r\n                values={userPass}\r\n                error={userPassError}\r\n                helperText={userPassError ? 'Inalid Password (min length 6)' : null}\r\n                onChange={(e) => setUserPass(e.target.value)}\r\n                margin=\"normal\"\r\n                autoComplete=\"off\"\r\n              />\r\n              <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-login\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\n\nfunction App() {\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        <Route path=\"/\" exact component={Auth} />\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"16px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { SEND_MESSAGE, UPDATE_CHAT, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Emit when SEND_MESSAGE action\r\n    return next => action => {\r\n      if (action.type === SEND_MESSAGE) {\r\n        socket.emit('simple-chat-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (message) => {\r\n    console.log(userId);\r\n    storeAPI.dispatch({\r\n      type: UPDATE_CHAT,\r\n      payload: message\r\n    });\r\n  });\r\n}","import { UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, GET_INITIAL_DATA } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"general-0m5vBsRnfd\": [\r\n      ],\r\n      \"gaming-p9DnvvrfWo\": [\r\n      ],\r\n      \"programming-aRoD4umYpb\": [\r\n      ],\r\n      \"cooking-v88UngJkiD\": [\r\n      ],\r\n      \"misc-uSje5DwUH0\": [\r\n      ],\r\n      \"/b/-Ry06VYrX3x\": [\r\n      ]\r\n    }\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeTopic: 'general-0m5vBsRnfd',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CHAT:\r\n      const { server, topic, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [topic]: [\r\n              ...state.servers[server][topic], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeTopic: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload.server, activeTopic: Object.keys(state.servers[action.payload.server])[0] }\r\n    case CHANGE_TOPIC:\r\n      return { ...state, activeTopic: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}