{"version":3,"sources":["actions/types.js","components/Api/api.js","actions/index.js","history.js","components/Sidebar/Servers.jsx","components/Sidebar/Channels.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/UserInfo/UserInfo.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["ADD_MESSAGE","axios","create","baseURL","newMessage","message","type","payload","addChannel","data","addServer","changeServer","server","changeChannel","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","get","sent","stop","_x","apply","this","arguments","signIn","user","signOut","createHashHistory","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","AddCircleOutline","Channels","channels","activeServer","setDrawerVisible","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","serverId","response","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","ListItem","Fragment","e","MoreVert","channel","i","Slide","direction","in","timeout","handleChannelChange","button","Typography","variant","toLowerCase","Settings","ListItemAvatar","Avatar","Person","ListItemText","primary","userName","Button","localStorage","clear","Menu","id","anchorEl","open","Boolean","onClose","MenuItem","CreateJoinModal","_useSelector2","activeChannel","handleModalSuccess","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","post","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","createChannel","_ref3","_callee3","_context3","_x5","_x6","renameServer","_ref4","_callee4","_context4","_x7","_x8","renameChannel","_ref5","_callee5","channelId","_context5","_x9","_x10","deleteChannel","_ref6","_callee6","_context6","delete","_x11","_x12","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","Modal","aria-labelledby","aria-describedby","pass","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","height","Messages","messageContainerBottomRef","messageContainerRef","setUserInfoVisible","messageIndex","setMessageIndex","loadMessages","setLoadMessages","setUserName","setAnchorEl","scroll","scrollIntoView","block","behavior","formatCode","handleUserClick","messagesLength","length","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","msg","Fade","from","src","process","alt","startsWith","endsWith","isTextCodeBlock","secondary","react_code_prettify_default","codeString","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","shiftKey","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","Dashboard","isSignedIn","push","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","requestFullScreenMobile","test","navigator","userAgent","document","documentElement","requestFullscreen","showMain","handleOnSubmit","callBack","error","createAccount","errorData","setItem","JSON","stringify","loginAccount","ArrowBack","values","helperText","Checkbox","checked","vale","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","action","baseUrl","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","combineReducers","undefined","console","log","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","getElementById"],"mappings":"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","file":"static/js/main.2fcf54bb.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const NEW_MESSAGE = 'NEW_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_channel';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com')\r\n});","import { NEW_MESSAGE, ADD_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from '../components/Api/api'\r\n\r\n\r\n// Action that socket middleware listens for\r\n// Emits via socket new message event\r\nexport const newMessage = (message) => ({\r\n  type: NEW_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n\r\n// Action to add message to a channel\r\nexport const addMessage = (message) => ({\r\n  type: ADD_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add channel to a server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide, Button } from '@material-ui/core';\r\nimport { changeChannel, signOut } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\n\r\n\r\nexport default function Channels(props) {\r\n\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // Check if admin of active server\r\n  // Will render admin options for server\r\n  useEffect(() => {\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n    getAdmin();\r\n  }, [activeServer])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  const handleSignout = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignout}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-delete')}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleModalSuccess(message, false);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleModalSuccess(message, false);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const renameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const deleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleModalSuccess('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Channels from './Channels'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Channels setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Card, CardHeader, Typography, CardMedia, CardContent, makeStyles, TextField } from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  const { userName } = props;\r\n  const classes = useStyle();\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const sendPrivateMessage = (message) => {\r\n\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => sendPrivateMessage(message))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade, Popover, CircularProgress } from '@material-ui/core';\r\nimport Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel } = chatStore;\r\n\r\n  // Local state for user popover\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [messageIndex, setMessageIndex] = useState(12);\r\n  const [loadMessages, setLoadMessages] = useState(false);\r\n  const [userName, setUserName] = useState(null)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container\r\n  let messageContainerBottomRef;\r\n  let messageContainerRef;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    if (!loadMessages)\r\n      messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n    else {\r\n      messageContainerRef.scroll(0, 56);\r\n    }\r\n  })\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message) => {\r\n    if (message.startsWith(\"```\") && message.endsWith(\"```\"))\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  // Formats the code block\r\n  const formatCode = (message) => {\r\n    return message.split('```')[1];\r\n  }\r\n\r\n  // Handles clicks for setting anchor\r\n  const handleUserClick = (e, userName) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  }\r\n\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  }\r\n\r\n\r\n  // Handles to load more messages when scroll at top\r\n  const handleScrollTop = (e) => {\r\n    const element = e.target;\r\n    if (element.scrollTop > 100) {\r\n      setLoadMessages(false);\r\n    }\r\n    if (element.scrollTop === 0) {\r\n      if (messagesLength > messageIndex) {\r\n        setTimeout(() => {\r\n          setLoadMessages(true);\r\n          if (messageIndex + 12 > messagesLength) {\r\n            setMessageIndex(messagesLength);\r\n          }\r\n          else {\r\n            setMessageIndex(messageIndex + 12);\r\n          }\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  const messagesLength = chatStore.servers[activeServer][activeChannel].length;\r\n\r\n  return (\r\n    <div className=\"messages-container\" onScroll={(e) => handleScrollTop(e)} ref={(element) => messageContainerRef = element}>\r\n      {messagesLength >= messageIndex ?\r\n        <div className=\"progress-container\">\r\n          <CircularProgress color=\"primary\" />\r\n        </div>\r\n        : null}\r\n      <List>\r\n        {chatStore.servers[activeServer][activeChannel].slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img className=\"user\" onClick={(e) => handleUserClick(e, message.from)} src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  {isTextCodeBlock(message.msg)\r\n                    ? <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={<Code codeString={formatCode(message.msg)} />} className=\"message-text\" />\r\n                    : <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={message.msg} className=\"message-text\" />\r\n                  }\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainerBottomRef = element}></div>\r\n      {/*<Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} />\r\n      </Popover>*/}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { addMessage, newMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    if (message.msg !== \"\") {\r\n      dispatch(newMessage(message));\r\n      setChatMessage(\"\");\r\n    }\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeChannel.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, Icon, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeChannel } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => setDrawerVisible(true)}>\r\n          <Sidebar channels={channels} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\"> <i className=\"channel-hashtag\">#</i>{activeChannel.split('-')[0].toLowerCase()} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon >\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n\r\n      <div className=\"sidebar-grid\">\r\n        <Sidebar />\r\n      </div>\r\n\r\n      <div className=\"messages-grid\">\r\n        <Header />\r\n        <Messages />\r\n      </div>\r\n\r\n      <div className=\"send-messages-grid\">\r\n        <SendMessage />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid, IconButton, Checkbox } from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection] = useState('left')\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  useEffect(() => {\r\n    requestFullScreenMobile();\r\n  });\r\n\r\n  const requestFullScreenMobile = () => {\r\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n      if (navigator.userAgent !== \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Mobile Safari/537.36\")\r\n        document.documentElement.requestFullscreen();\r\n    }\r\n  }\r\n\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  }\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit >\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox vale={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport { signIn } from '../../actions';\nimport createHashHistory from '../../history';\n\nfunction App() {\n\n  // Dispatch \n  const dispatch = useDispatch();\n\n  const checkLocalStorageAuth = () => {\n    // Check local storage if we logged in and force login\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      dispatch(signIn(user));\n      createHashHistory.push('/dashboard');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        {checkLocalStorageAuth()}\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n        <Route path=\"/\" exact component={Auth} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"14px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { NEW_MESSAGE, ADD_MESSAGE, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n      if (action.type === NEW_MESSAGE) {\r\n        socket.emit('simple-chat-new-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server\r\n// Action types of (Message, Channel)\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n  });\r\n}","import { ADD_MESSAGE, ADD_CHANNEL, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"general-0m5vBsRnfd\": [\r\n      ],\r\n      \"gaming-p9DnvvrfWo\": [\r\n      ],\r\n      \"programming-aRoD4umYpb\": [\r\n      ],\r\n      \"cooking-v88UngJkiD\": [\r\n      ],\r\n      \"misc-uSje5DwUH0\": [\r\n      ],\r\n      \"/b/-Ry06VYrX3x\": [\r\n      ]\r\n    }\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  console.log(action.payload);\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [channel]: [\r\n              ...state.servers[server][channel], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            [action.payload.channel]: [\r\n\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            [action.payload.channel]: [\r\n\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeChannel: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}