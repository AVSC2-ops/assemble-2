{"version":3,"sources":["actions/types.js","actions/index.js","history.js","components/Sidebar/Servers.jsx","components/Sidebar/Channels.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["ADD_MESSAGE","newMessage","message","type","payload","addChannel","data","addServer","changeServer","server","changeChannel","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","axios","get","sent","stop","_x","apply","this","arguments","signIn","user","createHashHistory","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","AddCircleOutline","baseUrl","Channels","channels","activeServer","setDrawerVisible","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","serverId","response","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","ListItem","Fragment","e","MoreVert","channel","i","Slide","direction","in","timeout","handleChannelChange","button","Typography","variant","toLowerCase","Settings","ListItemAvatar","Avatar","Person","ListItemText","primary","userName","Menu","id","anchorEl","open","Boolean","onClose","MenuItem","CreateJoinModal","_useSelector2","activeChannel","handleModalSuccess","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","post","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","createChannel","_ref3","_callee3","_context3","_x5","_x6","renameServer","_ref4","_callee4","_context4","_x7","_x8","renameChannel","_ref5","_callee5","channelId","_context5","_x9","_x10","deleteChannel","_ref6","_callee6","_context6","delete","_x11","_x12","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","Button","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","Modal","aria-labelledby","aria-describedby","pass","Messages","messageContainer","scrollIntoView","msg","Fade","src","process","alt","height","from","secondary","ref","element","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","shiftKey","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","Dashboard","isSignedIn","push","Auth","loginVisible","setLoginVisible","setUserName","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","userPass","setUserPass","userPassError","setUserPassError","_useState19","_useState20","userPassErrorMsg","setUserPassErrorMsg","handleOnSubmit","callBack","error","length","createAccount","errorData","localStorage","setItem","JSON","stringify","loginAccount","values","helperText","App","ThemeProvider","theme","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","action","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","combineReducers","undefined","console","log","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.ed466527.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const NEW_MESSAGE = 'NEW_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_channel';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import { NEW_MESSAGE, ADD_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n\r\n// Action that socket middleware listens for\r\n// Emits via socket new message event\r\nexport const newMessage = (message) => ({\r\n  type: NEW_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n\r\n// Action to add message to a channel\r\nexport const addMessage = (message) => ({\r\n  type: ADD_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add channel to a server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `${baseUrl}/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide } from '@material-ui/core';\r\nimport { changeChannel } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\nexport default function Channels(props) {\r\n\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // Check if admin of active server\r\n  // Will render admin options for server\r\n  useEffect(() => {\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`${baseUrl}/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n    getAdmin();\r\n  }, [activeServer])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-delete')}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess, modalType } = props;\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleModalSuccess(message, false);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleModalSuccess(message, false);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const renameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const deleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`${baseUrl}/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleModalSuccess('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Channels from './Channels'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Channels setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade } from '@material-ui/core';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel } = chatStore;\r\n\r\n  // ref to message container\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <List>\r\n        {chatStore.servers[activeServer][activeChannel].map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={message.from} secondary={message.msg} className=\"message-text\" />\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainer = element}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { addMessage, newMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    dispatch(newMessage(message));\r\n    setChatMessage(\"\");\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeChannel.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, Icon, SvgIcon, Link } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeChannel } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar channels={channels} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\"> <i className=\"channel-hashtag\">#</i>{activeChannel.split('-')[0].toLowerCase()} </Typography>\r\n        <Link href=\"https://github.com/ericellb/Simple-Chat\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <SvgIcon >\r\n            <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n          </SvgIcon>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n\r\n      <div className=\"sidebar-grid\">\r\n        <Sidebar />\r\n      </div>\r\n\r\n      <div className=\"messages-grid\">\r\n        <Header />\r\n        <Messages />\r\n      </div>\r\n\r\n      <div className=\"send-messages-grid\">\r\n        <SendMessage />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, Person } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/user/create?userName=${userName}&userPass=${userPass}`);\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.get(`${baseUrl}/user/login?userName=${userName}&userPass=${userPass}`);\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={createVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={loginVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport { signIn } from '../../actions';\nimport createHashHistory from '../../history';\n\nfunction App() {\n\n  // Dispatch \n  const dispatch = useDispatch();\n\n  const checkLocalStorageAuth = () => {\n    // Check local storage if we logged in and force login\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      dispatch(signIn(user));\n      createHashHistory.push('/dashboard');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        {checkLocalStorageAuth()}\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n        <Route path=\"/\" exact component={Auth} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"16px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { NEW_MESSAGE, ADD_MESSAGE, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n      if (action.type === NEW_MESSAGE) {\r\n        socket.emit('simple-chat-new-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server\r\n// Action types of (Message, Channel)\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n  });\r\n}","import { ADD_MESSAGE, ADD_CHANNEL, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"general-0m5vBsRnfd\": [\r\n      ],\r\n      \"gaming-p9DnvvrfWo\": [\r\n      ],\r\n      \"programming-aRoD4umYpb\": [\r\n      ],\r\n      \"cooking-v88UngJkiD\": [\r\n      ],\r\n      \"misc-uSje5DwUH0\": [\r\n      ],\r\n      \"/b/-Ry06VYrX3x\": [\r\n      ]\r\n    }\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  console.log(action.payload);\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [channel]: [\r\n              ...state.servers[server][channel], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            [action.payload.channel]: [\r\n\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            [action.payload.channel]: [\r\n\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeChannel: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}