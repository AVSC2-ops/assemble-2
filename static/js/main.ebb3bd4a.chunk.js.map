{"version":3,"sources":["actions/types.js","actions/index.js","history.js","components/Sidebar/Servers.jsx","components/Sidebar/Topics.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["UPDATE_CHAT","sendMessage","message","type","payload","changeServer","server","changeTopic","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","axios","get","sent","data","stop","_x","apply","this","arguments","signIn","user","createHashHistory","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","AddCircleOutline","baseUrl","Topics","topics","activeServer","setDrawerVisible","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","_useState7","_useState8","useEffect","_getAdmin","serverId","response","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","ListItem","Fragment","e","MoreVert","topic","i","Slide","direction","in","timeout","handleTopicChange","button","Typography","variant","toLowerCase","Settings","ListItemAvatar","Avatar","Person","ListItemText","primary","userName","Menu","id","anchorEl","open","Boolean","onClose","MenuItem","CreateJoinModal","handleModalSuccess","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","post","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","createChannel","_ref3","_callee3","_context3","_x5","_x6","renameServer","_ref4","_callee4","_context4","console","log","_x7","_x8","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","Button","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","Modal","aria-labelledby","aria-describedby","pass","Messages","messageContainer","activeTopic","scrollIntoView","msg","Fade","src","process","alt","height","from","secondary","ref","element","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","shiftKey","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Dashboard","isSignedIn","push","Auth","loginVisible","setLoginVisible","setUserName","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","userPass","setUserPass","userPassError","setUserPassError","_useState19","_useState20","userPassErrorMsg","setUserPassErrorMsg","handleOnSubmit","callBack","error","length","createAccount","errorData","localStorage","setItem","JSON","stringify","loginAccount","values","helperText","App","ThemeProvider","theme","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","backgroundColor","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","combineReducers","undefined","action","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.ebb3bd4a.chunk.js","sourcesContent":["export const UPDATE_CHAT = 'UPDATE_CHAT';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_TOPIC = 'CHANGE_TOPIC';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import { SEND_MESSAGE, UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const updateChat = (message) => ({\r\n  type: UPDATE_CHAT,\r\n  payload: message\r\n});\r\n\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: { server }\r\n});\r\n\r\nexport const changeTopic = (server) => ({\r\n  type: CHANGE_TOPIC,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `${baseUrl}/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide } from '@material-ui/core';\r\nimport { changeTopic } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\nexport default function Topics(props) {\r\n\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [topicSettingsVisible, setTopicSettingsVisible] = useState(false);\r\n\r\n  // Check if admin of active server\r\n  // Will render admin options for server\r\n  useEffect(() => {\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`${baseUrl}/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n    getAdmin();\r\n  }, [activeServer])\r\n\r\n\r\n  // Handle topic change, and closes drawer if on mobile view\r\n  const handleTopicChange = (topic) => {\r\n    dispatch(changeTopic(topic));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  return (\r\n    <div className=\"topics-container\">\r\n      <List className=\"topic-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {topics.map((topic, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={topic + activeServer}>\r\n            <ListItem onClick={(e) => handleTopicChange(topic)} button className=\"topic-item\">\r\n              <Typography variant=\"body1\"><i className=\"topic-hashtag\">#</i>{topic.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"topic-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-delete')}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer } = useSelector(state => state.chat);\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess, modalType } = props;\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/create?serverName=${serverName}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/channel/create?channelName=${channelName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      console.log(err.response.data);\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer.split('-')[1])}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Topics from './Topics'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Topics setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade } from '@material-ui/core';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeTopic } = chatStore;\r\n\r\n  // ref to message container\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <List>\r\n        {chatStore.servers[activeServer][activeTopic].map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={message.from} secondary={message.msg} className=\"message-text\" />\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainer = element}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeTopic } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    dispatch(sendMessage(message));\r\n    setChatMessage(\"\");\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, topic: activeTopic, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeTopic.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeTopic } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar topics={topics} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <i className=\"topic-hashtag\">#</i>\r\n        <Typography variant=\"h6\"> {activeTopic.split('-')[0].toLowerCase()} </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n\r\n      <div className=\"sidebar-grid\">\r\n        <Sidebar />\r\n      </div>\r\n\r\n      <div className=\"messages-grid\">\r\n        <Header />\r\n        <Messages />\r\n      </div>\r\n\r\n      <div className=\"send-messages-grid\">\r\n        <SendMessage />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, Person } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/user/create?userName=${userName}&userPass=${userPass}`);\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.get(`${baseUrl}/user/login?userName=${userName}&userPass=${userPass}`);\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={createVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={loginVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport { signIn } from '../../actions';\nimport createHashHistory from '../../history';\n\nfunction App() {\n\n  // Dispatch \n  const dispatch = useDispatch();\n\n  const checkLocalStorageAuth = () => {\n    // Check local storage if we logged in and force login\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      dispatch(signIn(user));\n      createHashHistory.push('/dashboard');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        {checkLocalStorageAuth()}\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n        <Route path=\"/\" exact component={Auth} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"16px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { SEND_MESSAGE, UPDATE_CHAT, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Emit when SEND_MESSAGE action\r\n    return next => action => {\r\n      if (action.type === SEND_MESSAGE) {\r\n        socket.emit('simple-chat-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (message) => {\r\n    console.log(userId);\r\n    storeAPI.dispatch({\r\n      type: UPDATE_CHAT,\r\n      payload: message\r\n    });\r\n  });\r\n}","import { UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, GET_INITIAL_DATA } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"general-0m5vBsRnfd\": [\r\n      ],\r\n      \"gaming-p9DnvvrfWo\": [\r\n      ],\r\n      \"programming-aRoD4umYpb\": [\r\n      ],\r\n      \"cooking-v88UngJkiD\": [\r\n      ],\r\n      \"misc-uSje5DwUH0\": [\r\n      ],\r\n      \"/b/-Ry06VYrX3x\": [\r\n      ]\r\n    }\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeTopic: 'general-0m5vBsRnfd',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CHAT:\r\n      const { server, topic, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [topic]: [\r\n              ...state.servers[server][topic], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload.server, activeTopic: Object.keys(state.servers[action.payload.server])[0] }\r\n    case CHANGE_TOPIC:\r\n      return { ...state, activeTopic: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}