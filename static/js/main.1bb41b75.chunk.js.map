{"version":3,"sources":["actions/types.js","components/Api/api.js","actions/index.js","history.js","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/PrivateMessageUserList.jsx","components/Sidebar/ChannelList.jsx","components/Sidebar/ServerList.jsx","components/Sidebar/Sidebar.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/UserInfo/UserInfo.jsx","components/Messages/ChannelMessages.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["ADD_MESSAGE","ADD_PRIVATE_MESSAGE","axios","create","baseURL","newMessage","message","type","payload","newPrivateMessage","addChannel","data","addServer","changeServer","server","changeChannel","changeView","view","changePMUser","user","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","get","sent","stop","_x","apply","this","arguments","signIn","signOut","createHashHistory","CreateJoinModal","props","useSelector","state","_useSelector2","chat","activeServer","activeChannel","useDispatch","handleSnackMessage","modalType","_useState","useState","_useState2","slicedToArray","mainVisible","setMainVisible","_useState3","_useState4","mainDirection","setMainDirection","_useState5","_useState6","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","serverId","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","response","post","split","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","renameServer","_ref3","_callee3","_context3","_x5","_x6","deleteServer","_ref4","_callee4","_context4","delete","_x7","_x8","createChannel","_ref5","_callee5","_context5","channel","_x9","_x10","renameChannel","_ref6","_callee6","channelId","_context6","_x11","_x12","deleteChannel","_ref7","_callee7","_context7","_x13","_x14","handleKeyPress","e","callbackMethod","key","react_default","createElement","Paper","className","Slide","direction","in","timeout","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","Typography","variant","color","align","sm","Card","CardActionArea","onClick","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","Button","GroupAdd","TextField","id","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","open","anchorOrigin","vertical","horizontal","onEntered","setTimeout","PrivateMessageUserList","privateMessages","userList","keys","List","ListItem","map","i","button","Avatar","src","process","alt","height","ListItemAvatar","Person","ListItemText","primary","userName","localStorage","clear","ChannelList","chatStore","channels","servers","setDrawerVisible","setModalVisible","setModalType","serverAnchorEl","setServerAnchorEl","channelAchorEl","setChannelAchorEl","isAdmin","setIsAdmin","useEffect","_getAdmin","getAdmin","handleModalShow","handleSettingsClick","event","currentTarget","handleClose","Fragment","Tooltip","title","placement","IconButton","MoreVert","handleChannelChange","toLowerCase","Settings","Menu","anchorEl","Boolean","onClose","MenuItem","text","navigator","clipboard","writeText","callBack","length","ServerList","handleChangeView","undefined","Home","handleServerChange","GroupWork","AddCircleOutline","Sidebar","activeView","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","pass","Modal","aria-labelledby","aria-describedby","SendMessage","_useSelector","activePMUser","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","placeholderTitle","setPlaceholderTitle","handleSubmit","msg","trim","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","shiftKey","from","to","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","setTitle","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","UserInfo","setUserInfoVisible","classes","messageText","setMessageText","sendPrivateMessage","InputProps","InputLabelProps","shrink","ChannelMessages","messages","messagesLength","push","messageContainerBottomRef","messageContainerRef","userInfoVisible","messageIndex","setMessageIndex","loadMessages","setLoadMessages","setUserName","setAnchorEl","scroll","scrollIntoView","block","behavior","formatCode","handleUserClick","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","Fade","startsWith","endsWith","isTextCodeBlock","secondary","react_code_prettify_default","codeString","Popover","Dashboard","isSignedIn","lib_default","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","showMain","handleOnSubmit","error","createAccount","errorData","encodeURIComponent","setItem","JSON","stringify","loginAccount","ArrowBack","values","helperText","Checkbox","checked","vale","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","action","baseUrl","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","activeUsers","combineReducers","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1bb41b75.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_PRIVATE_MESSAGE = 'ADD_PRIVATE_MESSAGE';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const NEW_MESSAGE = 'NEW_MESSAGE';\r\nexport const NEW_PRIVATE_MESSAGE = 'NEW_PRIVATE_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_CHANNEL';\r\nexport const CHANGE_VIEW = 'CHANGE_VIEW';\r\nexport const CHANGE_PM_USER = 'CHANGE_PM_USER';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com')\r\n});","import { NEW_MESSAGE, ADD_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, CHANGE_VIEW, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA, CHANGE_PM_USER, NEW_PRIVATE_MESSAGE } from './types';\r\nimport axios from '../components/Api/api'\r\n\r\n\r\n// Action that socket middleware listens for\r\n// Emits via socket new message event\r\nexport const newMessage = (message) => ({\r\n  type: NEW_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add message to a channel\r\nexport const addMessage = (message) => ({\r\n  type: ADD_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to send new private message\r\nexport const newPrivateMessage = (message) => ({\r\n  type: NEW_PRIVATE_MESSAGE,\r\n  payload: message\r\n})\r\n\r\n// Action to add channel to a server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current active view\r\nexport const changeView = (view) => ({\r\n  type: CHANGE_VIEW,\r\n  payload: view\r\n})\r\n\r\n// Action to change active user we have private message open with\r\nexport const changePMUser = (user) => ({\r\n  type: CHANGE_PM_USER,\r\n  payload: user\r\n})\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleSnackMessage, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting servers\r\n  const deleteServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.delete(`/server/delete?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const renameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const deleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a server\r\n  const renderServerDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeServer.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteServer(activeServer.split('-')[1], userId)}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Channel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"server-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Slide, Button, Typography } from '@material-ui/core';\r\nimport { Person } from '@material-ui/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { signOut, changePMUser } from '../../actions';\r\n\r\nexport default function PrivateMessageUserList() {\r\n\r\n  // Get from Redux store\r\n  const { privateMessages } = useSelector(state => state.chat);\r\n  const user = useSelector(state => state.user);\r\n  const userList = Object.keys(privateMessages);\r\n  const dispatch = useDispatch();\r\n\r\n  // Signs the user out\r\n  const handleSignout = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          Home\r\n        </ListItem>\r\n        {userList.map((user, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={i}>\r\n            <ListItem button className=\"user-item\" onClick={() => dispatch(changePMUser(user))}>\r\n              <Avatar> <img className=\"user\" src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" /> </Avatar>\r\n              <Typography variant=\"body1\" className=\"user-list-name\">{user}</Typography>\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignout}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide, Button } from '@material-ui/core';\r\nimport { changeChannel, signOut } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\n\r\n\r\nexport default function ChannelList(props) {\r\n\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer][\"channels\"]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType, handleSnackMessage } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // Check if admin of active server\r\n  // Will render admin options for server\r\n  useEffect(() => {\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n    getAdmin();\r\n  }, [activeServer, user])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  const handleChannelDelete = (callBack) => {\r\n    if (channels.length === 1) {\r\n      handleSnackMessage(\"Please delete the server if only 1 channel\");\r\n    }\r\n    else {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  // Signs the user out\r\n  const handleSignout = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  // Handles saving serverId to clipboard\r\n  const handleSaveClipboard = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n    handleSnackMessage(`Server ID ${text} saved to clipboard`, false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignout}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleSaveClipboard(activeServer.split('-')[1])}> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-delete')}> Delete Server </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleChannelDelete(() => handleModalShow('channel-delete'))}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline, Home } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer, changeView } from '../../actions';\r\n\r\n\r\nexport default function ServerList(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles changing the view and calls callback function\r\n  const handleChangeView = (view, callBack) => {\r\n    dispatch(changeView(view));\r\n    if (callBack !== undefined)\r\n      callBack();\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        <Tooltip title='Home' key='home' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"home-icon\" onClick={() => handleChangeView('home')}>\r\n            <Home />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <div className=\"menu-seperator\" />\r\n\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleServerChange(server))}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleModalShow())}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\nimport PrivateMessageUserList from './PrivateMessageUserList';\r\nimport ChannelList from './ChannelList';\r\nimport ServerList from './ServerList';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const { activeView } = useSelector(state => state.chat);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleSnackMessage = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <ServerList setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n      {activeView === \"servers\"\r\n        ? <ChannelList setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n        : <PrivateMessageUserList />\r\n      }\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleSnackMessage={handleSnackMessage} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { newMessage, newPrivateMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel, activeView, activePMUser } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n  const [placeholderTitle, setPlaceholderTitle] = useState(null)\r\n\r\n\r\n  // Check active view to determine where we send our messages\r\n  useEffect(() => {\r\n    if (activeView === \"servers\") {\r\n      setPlaceholderTitle(activeChannel.split('-')[0]);\r\n\r\n    }\r\n    else if (activeView === \"home\") {\r\n      setPlaceholderTitle(activePMUser);\r\n\r\n    }\r\n  }, [activeView, activeChannel, activePMUser])\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    if (message.msg.trim() !== \"\") {\r\n      // Send message to server, or user\r\n      if (activeView === \"servers\")\r\n        dispatch(newMessage(message));\r\n      else if (activeView === \"home\") {\r\n        dispatch(newPrivateMessage(message));\r\n      }\r\n      setChatMessage(\"\");\r\n    }\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      if (activeView === \"servers\")\r\n        handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n      else if (activeView === \"home\")\r\n        handleSubmit({ from: userName, to: activePMUser, msg: chatMessage });\r\n    }\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${placeholderTitle}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeChannel, activePMUser, activeView } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const [title, setTitle] = useState(null);\r\n\r\n  // On active view change change title\r\n  useEffect(() => {\r\n    if (activeView === \"servers\") {\r\n      setTitle(activeChannel.split('-')[0].toLowerCase());\r\n    }\r\n    else if (activeView === \"home\") {\r\n      setTitle(activePMUser);\r\n    }\r\n  }, [activeView, activePMUser, activeChannel])\r\n\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => setDrawerVisible(true)}>\r\n          <Sidebar setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\">{title} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon >\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Typography, makeStyles, TextField } from '@material-ui/core';\r\nimport { newPrivateMessage, changeView } from '../../actions';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  // Get state from redux store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const { userName, setUserInfoVisible } = props;\r\n  const classes = useStyle();\r\n  const [messageText, setMessageText] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const sendPrivateMessage = (messageText, userName) => {\r\n    const msg = { \"from\": user.userName, \"msg\": messageText, \"to\": userName };\r\n    dispatch(newPrivateMessage(msg));\r\n    dispatch(changeView('home'));\r\n    setUserInfoVisible(false);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={messageText}\r\n          onChange={(e) => setMessageText(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => sendPrivateMessage(messageText, userName))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade, Popover, CircularProgress } from '@material-ui/core';\r\nimport Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\n\r\nexport default function ChannelMessages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel, activeView, activePMUser } = chatStore;\r\n\r\n  // Get message list from channel or from specific user\r\n  let messages = null;\r\n  let messagesLength = null;\r\n  if (activeView === \"servers\") {\r\n    messages = chatStore.servers[activeServer][\"channels\"][activeChannel];\r\n    messagesLength = messages.length;\r\n  }\r\n  else {\r\n    messages = chatStore.privateMessages[activePMUser];\r\n    // Some hacky stuff because API always responds with null message if none in channel\r\n    if (messages === undefined) {\r\n      messages = [];\r\n      messages.push({ from: null, to: null, msg: null });\r\n    }\r\n    messagesLength = messages.length;\r\n  }\r\n\r\n  // Local state for user popover\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [messageIndex, setMessageIndex] = useState(12);\r\n  const [loadMessages, setLoadMessages] = useState(false);\r\n  const [userName, setUserName] = useState(null)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container\r\n  let messageContainerBottomRef;\r\n  let messageContainerRef;\r\n\r\n  // Scroll bottom of page \r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    if (!loadMessages)\r\n      messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n    else {\r\n      messageContainerRef.scroll(0, 56);\r\n    }\r\n  })\r\n\r\n  // On mount scroll to bottom\r\n  useEffect(() => {\r\n    messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n  }, [messageContainerBottomRef]);\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message) => {\r\n    if (message.startsWith(\"```\") && message.endsWith(\"```\"))\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  // Formats the code block\r\n  const formatCode = (message) => {\r\n    return message.split('```')[1];\r\n  }\r\n\r\n  // Handles clicks for setting anchor\r\n  const handleUserClick = (e, userName) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  }\r\n\r\n  // Closes popup\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  // Handles to load more messages when scroll at top\r\n  const handleScrollTop = (e) => {\r\n    const element = e.target;\r\n    if (element.scrollTop > 100) {\r\n      setLoadMessages(false);\r\n    }\r\n    if (element.scrollTop === 0) {\r\n      if (messagesLength > messageIndex) {\r\n        setTimeout(() => {\r\n          setLoadMessages(true);\r\n          if (messageIndex + 12 > messagesLength) {\r\n            setMessageIndex(messagesLength);\r\n          }\r\n          else {\r\n            setMessageIndex(messageIndex + 12);\r\n          }\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"messages-container\" onScroll={(e) => handleScrollTop(e)} ref={(element) => messageContainerRef = element}>\r\n      {messagesLength >= messageIndex ?\r\n        <div className=\"progress-container\">\r\n          <CircularProgress color=\"primary\" />\r\n        </div>\r\n        : null}\r\n      <List>\r\n        {messages.slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img className=\"user\" onClick={(e) => handleUserClick(e, message.from)} src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  {isTextCodeBlock(message.msg)\r\n                    ? <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={<Code codeString={formatCode(message.msg)} />} className=\"message-text\" />\r\n                    : <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={message.msg} className=\"message-text\" />\r\n                  }\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainerBottomRef = element}></div>\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport Div100vh from 'react-div-100vh';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\nimport ChannelMessages from '../Messages/ChannelMessages';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n\r\n  return (\r\n    <Div100vh>\r\n      <div className=\"grid-container\">\r\n\r\n        <div className=\"sidebar-grid\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"messages-grid\">\r\n          <Header />\r\n          <ChannelMessages />\r\n        </div>\r\n\r\n        <div className=\"send-messages-grid\">\r\n          <SendMessage />\r\n        </div>\r\n\r\n      </div >\r\n    </Div100vh>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid, IconButton, Checkbox } from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection] = useState('left')\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  }\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n      userName = encodeURIComponent(userName);\r\n      userPass = encodeURIComponent(userPass);\r\n\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n    userName = encodeURIComponent(userName);\r\n    userPass = encodeURIComponent(userPass);\r\n\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit >\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox vale={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport './App.css';\r\nimport Dashboard from '../Dashboard/Dashboard';\r\nimport Auth from '../Auth/Auth';\r\nimport { signIn } from '../../actions';\r\nimport createHashHistory from '../../history';\r\n\r\nfunction App() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  const checkLocalStorageAuth = () => {\r\n    // Check local storage if we logged in and force login\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user) {\r\n      dispatch(signIn(user));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <HashRouter>\r\n        {checkLocalStorageAuth()}\r\n        <Route path=\"/dashboard\" exact component={Dashboard} />\r\n        <Route path=\"/\" exact component={Auth} />\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: \"14px\",\r\n        backgroundColor: 'black'\r\n      }\r\n    },\r\n    MuiSnackbarContent: {\r\n      root: {\r\n        backgroundColor: '#202225',\r\n        color: 'white'\r\n      }\r\n    },\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: '#36393E',\r\n        position: 'absolute'\r\n      }\r\n    }\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: '#7289da'\r\n    },\r\n    secondary: {\r\n      main: '#3ca374'\r\n    }\r\n  },\r\n  typography: {\r\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\r\n    \"fontSize\": 14,\r\n    \"fontWeightLight\": 400,\r\n    \"fontWeightRegular\": 500,\r\n    \"fontWeightMedium\": 600\r\n  }\r\n\r\n});","import io from 'socket.io-client';\r\n\r\nimport { NEW_MESSAGE, ADD_MESSAGE, NEW_PRIVATE_MESSAGE, ADD_PRIVATE_MESSAGE, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n      if (action.type === NEW_MESSAGE) {\r\n        socket.emit('simple-chat-new-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n      else if (action.type === NEW_PRIVATE_MESSAGE) {\r\n        socket.emit('simple-chat-new-private-message', action.payload);\r\n        return;\r\n      }\r\n\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server\r\n// Action types of (Message, Channel)\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n    else if (action.type === \"private-message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_PRIVATE_MESSAGE,\r\n        payload: action.payload\r\n      })\r\n    }\r\n  });\r\n}","import { ADD_MESSAGE, ADD_CHANNEL, ADD_PRIVATE_MESSAGE, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER, CHANGE_VIEW, CHANGE_PM_USER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"channels\": {\r\n        \"general-0m5vBsRnfd\": [\r\n        ],\r\n        \"gaming-p9DnvvrfWo\": [\r\n        ],\r\n        \"programming-aRoD4umYpb\": [\r\n        ],\r\n        \"cooking-v88UngJkiD\": [\r\n        ],\r\n        \"misc-uSje5DwUH0\": [\r\n        ],\r\n        \"/b/-Ry06VYrX3x\": [\r\n        ]\r\n      },\r\n      \"activeUsers\": [\r\n\r\n      ]\r\n    }\r\n  },\r\n  privateMessages: {\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n  activeView: 'servers',\r\n  activePMUser: 'none'\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            \"channels\": {\r\n              ...state.servers[server].channels,\r\n              [channel]: [\r\n                ...state.servers[server][\"channels\"][channel], { from: from, msg: msg }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            \"channels\": {\r\n              ...state.servers[action.payload.server].channels,\r\n              [action.payload.channel]: [\r\n\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            \"channels\": {\r\n              [action.payload.channel]: [\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload.servers, privateMessages: action.payload.privateMessages, activeServer: Object.keys(action.payload.servers)[0], activeChannel: Object.keys(action.payload.servers[Object.keys(action.payload.servers)[0]][\"channels\"])[0] };\r\n    case ADD_PRIVATE_MESSAGE:\r\n      if (state.privateMessages[action.payload.user]) {\r\n        return {\r\n          ...state,\r\n          privateMessages: {\r\n            ...state.privateMessages,\r\n            [action.payload.user]: [\r\n              ...state.privateMessages[action.payload.user], { from: action.payload.from, to: action.payload.to, msg: action.payload.msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n      else return {\r\n        ...state,\r\n        privateMessages: {\r\n          ...state.privateMessages,\r\n          [action.payload.user]: [\r\n            { from: action.payload.from, to: action.payload.to, msg: action.payload.msg }\r\n          ]\r\n        }\r\n      }\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload][\"channels\"])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    case CHANGE_VIEW:\r\n      return { ...state, activeView: action.payload, activePMUser: Object.keys(state.privateMessages)[0] }\r\n    case CHANGE_PM_USER:\r\n      return { ...state, activePMUser: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}