{"version":3,"sources":["actions/types.js","components/Api/api.js","actions/index.js","history.js","components/SnackBar/SnackBarContent.jsx","components/Sidebar/PrivateMessageUserList.jsx","components/Sidebar/ChannelList.jsx","components/Sidebar/ServerList.jsx","components/ActionsModal/ActionsModal.jsx","components/Sidebar/Sidebar.jsx","components/SendMessage/SendMessage.jsx","components/ActiveUserList/ActiveUserList.jsx","components/Header/Header.jsx","components/UserInfo/UserInfo.jsx","components/Messages/Messages.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["RECEIVE_SOCKET_MESSAGE","RECEIVE_SOCKET_PRIVATE_MESSAGE","axios","create","baseURL","sendMessage","message","type","payload","sendPrivateMessage","addChannel","data","addServer","updateActiveUserList","server","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","wrap","_context","prev","next","get","concat","sent","stop","_x","apply","this","arguments","updateActiveState","userId","changeServer","split","changeChannel","changeView","view","changePMUser","user","loadUserData","_ref2","_callee2","url","res","_context2","keys","servers","_x2","signIn","signOut","createHashHistory","SnackBarContent","props","content","visible","setVisible","react_default","createElement","Snackbar","open","anchorOrigin","vertical","horizontal","onEntered","setTimeout","PrivateMessageUserList","privateMessages","useSelector","state","chat","userList","useDispatch","className","List","ListItem","map","i","Slide","direction","in","timeout","key","button","onClick","Avatar","src","process","alt","height","Typography","variant","ListItemAvatar","Person","ListItemText","primary","userName","Button","localStorage","clear","ChannelList","chatStore","channels","activeServer","setDrawerVisible","setModalVisible","setModalType","handleSnackMessage","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","serverId","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","Fragment","Tooltip","title","placement","IconButton","e","MoreVert","channel","handleChannelChange","toLowerCase","Settings","Menu","id","anchorEl","Boolean","onClose","MenuItem","text","navigator","clipboard","writeText","callBack","length","ServerList","handleChangeView","undefined","Home","handleServerChange","GroupWork","AddCircleOutline","ActionsModal","_useSelector2","activeChannel","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","handleCreateServer","post","t0","handleJoinServer","_x3","_x4","handleRenameServer","_ref3","_callee3","_context3","_x5","_x6","handleDeleteServer","_ref4","_callee4","_context4","delete","_x7","_x8","handleCreateChannel","_ref5","_callee5","_context5","_x9","_x10","handleRenameChannel","_ref6","_callee6","channelId","_context6","_x11","_x12","handleDeleteChannel","_ref7","_callee7","_context7","_x13","_x14","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","Sidebar","activeView","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","pass","Modal","aria-labelledby","aria-describedby","SendMessage","_useSelector","activePMUser","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","placeholderTitle","setPlaceholderTitle","handleSubmit","validMessage","msg","trim","console","log","replace","formatMessage","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","shiftKey","from","to","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","ActiveUserList","activeUserList","user_name","Header","sideBarDrawerVisible","setSideBarDrawerVisible","userListDrawerVisible","setUserListDrawerVisible","setTitle","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","UserInfo","setUserInfoVisible","classes","messageText","setMessageText","handleSendPrivateMessage","InputProps","InputLabelProps","shrink","Messages","messageContainerBottomRef","messageContainerRef","userInfoVisible","messageIndex","setMessageIndex","loadMessages","setLoadMessages","setUserName","setAnchorEl","messages","messagesLength","scroll","scrollIntoView","block","behavior","formatCode","handleUserClick","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","Fade","startsWith","endsWith","isTextCodeBlock","moment","date","format","secondary","react_code_prettify_default","codeString","Popover","Dashboard","isSignedIn","updateActiveStatus","push","lib_default","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","showMain","handleOnSubmit","error","handleCreateAccount","errorData","encodeURIComponent","setItem","JSON","stringify","handleLoginAccount","ArrowBack","values","helperText","Checkbox","checked","vale","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","baseUrl","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","combineReducers","action","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","storeAPI","socket","io","emit","on","setupSocketListener","serverIds","forEach","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.a171eb96.chunk.js","sourcesContent":["export const RECEIVE_SOCKET_MESSAGE = 'RECEIVE_SOCKET_MESSAGE';\r\nexport const RECEIVE_SOCKET_PRIVATE_MESSAGE = 'RECEIVE_SOCKET_PRIVATE_MESSAGE'\r\nexport const SEND_SOCKET_MESSAGE = 'SEND_SOCKET_MESSAGE';\r\nexport const SEND_SOCKET_PRIVATE_MESSAGE = 'SEND_SOCKET_PRIVATE_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_PRIVATE_MESSAGE = 'ADD_PRIVATE_MESSAGE';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_CHANNEL';\r\nexport const CHANGE_VIEW = 'CHANGE_VIEW';\r\nexport const CHANGE_PM_USER = 'CHANGE_PM_USER';\r\nexport const UPDATE_ACTIVE_USERS = 'UPDATE_ACTIVE_USERS';\r\nexport const UPDATE_ACTIVE_STATE = 'UPDATE_ACTIVE_STATE';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com')\r\n});","import { SEND_SOCKET_MESSAGE, RECEIVE_SOCKET_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, CHANGE_VIEW, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA, CHANGE_PM_USER, SEND_SOCKET_PRIVATE_MESSAGE, RECEIVE_SOCKET_PRIVATE_MESSAGE, UPDATE_ACTIVE_USERS, UPDATE_ACTIVE_STATE } from './types';\r\nimport axios from '../components/Api/api'\r\n\r\n\r\n// Action to send a message (Handled by socket middleware)\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_SOCKET_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add message to a channel (Handled by socket middleware)\r\nexport const receiveMessage = (message) => ({\r\n  type: RECEIVE_SOCKET_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to send new private message (Handled by socket middleware)\r\nexport const sendPrivateMessage = (message) => ({\r\n  type: SEND_SOCKET_PRIVATE_MESSAGE,\r\n  payload: message\r\n})\r\n\r\n// Action to send new private message (Handled by socket middleware)\r\nexport const receivePrivateMessage = (message) => ({\r\n  type: RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n  payload: message\r\n})\r\n\r\n// Action to add Channel to a Server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add Server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Get active user list in given server\r\nexport const updateActiveUserList = (server) => async dispatch => {\r\n  const response = await axios.get(`/server/activeusers?serverId=${server}`);\r\n  dispatch({ type: UPDATE_ACTIVE_USERS, payload: response.data });\r\n}\r\n\r\n// Action creator to update active state (socket middleware)\r\nexport const updateActiveState = (userId) => ({\r\n  type: UPDATE_ACTIVE_STATE,\r\n  payload: userId\r\n});\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => dispatch => {\r\n  dispatch(updateActiveUserList(server.split('-')[1]));\r\n  dispatch({ type: CHANGE_SERVER, payload: server })\r\n};\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current active view\r\nexport const changeView = (view) => ({\r\n  type: CHANGE_VIEW,\r\n  payload: view\r\n})\r\n\r\n// Action to change active user we have private message open with\r\nexport const changePMUser = (user) => ({\r\n  type: CHANGE_PM_USER,\r\n  payload: user\r\n})\r\n\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  // get active user list for first server\r\n  dispatch(updateActiveUserList(Object.keys(res.data.servers)[0].split('-')[1]));\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n// On sign in\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\n// On sign out \r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Slide, Button, Typography } from '@material-ui/core';\r\nimport { Person } from '@material-ui/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { signOut, changePMUser } from '../../actions';\r\n\r\nexport default function PrivateMessageUserList() {\r\n\r\n  // Get from Redux store\r\n  const { privateMessages } = useSelector(state => state.chat);\r\n  const user = useSelector(state => state.user);\r\n  const userList = Object.keys(privateMessages);\r\n  const dispatch = useDispatch();\r\n\r\n  // Signs the user out\r\n  const handleSignOut = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          Home\r\n        </ListItem>\r\n        {userList.map((user, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={i}>\r\n            <ListItem button className=\"user-item\" onClick={() => dispatch(changePMUser(user))}>\r\n              <Avatar> <img className=\"user\" src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" /> </Avatar>\r\n              <Typography variant=\"body1\" className=\"user-list-name\">{user}</Typography>\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignOut}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide, Button } from '@material-ui/core';\r\nimport { changeChannel, signOut } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\n\r\n\r\nexport default function ChannelList(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer][\"channels\"]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType, handleSnackMessage } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // When user or active server changes, check if we are admin\r\n  useEffect(() => {\r\n    // Gets the status if we are admin of current server (allows us to change server settings)\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n\r\n    getAdmin();\r\n  }, [activeServer, user])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Checks if only 1 channel, if so does not call callback to delete channel\r\n  const handleChannelDelete = (callBack) => {\r\n    if (channels.length === 1) {\r\n      handleSnackMessage(\"Please delete the server if only 1 channel\");\r\n    }\r\n    else {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  // Signs the user out\r\n  const handleSignout = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  // Handles saving serverId to clipboard\r\n  const handleSaveClipboard = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n    handleSnackMessage(`Server ID ${text} saved to clipboard`, false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignout}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleSaveClipboard(activeServer.split('-')[1])}> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-delete')}> Delete Server </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleChannelDelete(() => handleModalShow('channel-delete'))}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline, Home } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer, changeView } from '../../actions';\r\n\r\n\r\nexport default function ServerList(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles changing the view and calls callback function\r\n  const handleChangeView = (view, callBack) => {\r\n    dispatch(changeView(view));\r\n    if (callBack !== undefined)\r\n      callBack();\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        <Tooltip title='Home' key='home' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"home-icon\" onClick={() => handleChangeView('home')}>\r\n            <Home />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <div className=\"menu-seperator\" />\r\n\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleServerChange(server))}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleModalShow())}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function ActionsModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleSnackMessage, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showhandleJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showhandleCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const handleCreateServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const handleJoinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const handleRenameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting servers\r\n  const handleDeleteServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.delete(`/server/delete?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const handleCreateChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const handleRenameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const handleDeleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showhandleCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showhandleJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleCreateServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleCreateServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleRenameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleRenameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a server\r\n  const renderServerDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeServer.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => handleDeleteServer(activeServer.split('-')[1], userId)}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleJoinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleJoinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleCreateChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleCreateChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleRenameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleRenameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Channel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => handleDeleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"server-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport PrivateMessageUserList from './PrivateMessageUserList';\r\nimport ChannelList from './ChannelList';\r\nimport ServerList from './ServerList';\r\nimport ActionsModal from '../ActionsModal/ActionsModal';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const { activeView } = useSelector(state => state.chat);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent (Used when Sidebar is rendered by header on mobile)\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleSnackMessage = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <ServerList setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n      {activeView === \"servers\"\r\n        ? <ChannelList setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n        : <PrivateMessageUserList />\r\n      }\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <ActionsModal handleSnackMessage={handleSnackMessage} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage, sendPrivateMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel, activeView, activePMUser } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n  const [placeholderTitle, setPlaceholderTitle] = useState(null)\r\n\r\n\r\n  // Check active view to determine where we send our messages\r\n  useEffect(() => {\r\n    if (activeView === \"servers\") {\r\n      setPlaceholderTitle(activeChannel.split('-')[0]);\r\n    }\r\n    else if (activeView === \"home\") {\r\n      setPlaceholderTitle(activePMUser);\r\n    }\r\n  }, [activeView, activeChannel, activePMUser])\r\n\r\n\r\n  // Checks is message is valid (not just spaces)\r\n  function isValidMessage(message) {\r\n    let validMessage = true;\r\n    // Check if empty stirng\r\n    if (message.msg.trim() !== \"\")\r\n      validMessage = false;\r\n    return validMessage;\r\n  }\r\n\r\n  // Will format out multiple line breaks to 2 max\r\n  function formatMessage(message) {\r\n    console.log(message);\r\n    return message.replace(/(\\r\\n|\\r|\\n){3,}/g, '$1\\n\\n');\r\n  }\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    if (isValidMessage) {\r\n      message.msg = formatMessage(message.msg);\r\n      // Send message to server, or user\r\n      if (activeView === \"servers\")\r\n        dispatch(sendMessage(message));\r\n      else if (activeView === \"home\") {\r\n        dispatch(sendPrivateMessage(message));\r\n      }\r\n      setChatMessage(\"\");\r\n    }\r\n    else {\r\n      // throw some error\r\n    }\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      if (activeView === \"servers\")\r\n        handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n      else if (activeView === \"home\")\r\n        handleSubmit({ from: userName, to: activePMUser, msg: chatMessage });\r\n    }\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${placeholderTitle}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function ActiveUserList() {\r\n\r\n  // Get user list from redux store\r\n  const { activeUserList } = useSelector(state => state.chat);\r\n\r\n  return (\r\n    <div className=\"users-container\">\r\n      <List className=\"users-list\">\r\n        <ListItem className=\"users-list-title\"> Active Users </ListItem>\r\n\r\n        {activeUserList.map((user) => {\r\n          return (\r\n            <ListItem button className=\"user-list-item\">\r\n              <ListItemAvatar className=\"message-user-icon\">\r\n                <Avatar>\r\n                  <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                  <div className='user-list-online'></div>\r\n                </Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText>{user.user_name}</ListItemText>\r\n            </ListItem>\r\n          )\r\n        })}\r\n\r\n\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport ActiveUserList from '../ActiveUserList/ActiveUserList';\r\n\r\nexport default function Header() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeChannel, activePMUser, activeView } = chatStore;\r\n\r\n  // Local state\r\n  const [sideBarDrawerVisible, setSideBarDrawerVisible] = useState(false);\r\n  const [userListDrawerVisible, setUserListDrawerVisible] = useState(false);\r\n  const [title, setTitle] = useState(null);\r\n\r\n  // On active view change change title\r\n  useEffect(() => {\r\n    if (activeView === \"servers\") {\r\n      setTitle(activeChannel.split('-')[0].toLowerCase());\r\n    }\r\n    else if (activeView === \"home\") {\r\n      setTitle(activePMUser);\r\n    }\r\n  }, [activeView, activePMUser, activeChannel])\r\n\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"appbar\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setSideBarDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={sideBarDrawerVisible}\r\n          onClose={() => setSideBarDrawerVisible(false)}\r\n          onOpen={() => setSideBarDrawerVisible(true)}>\r\n          <Sidebar setDrawerVisible={sideBarDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <SwipeableDrawer\r\n          anchor=\"right\"\r\n          open={userListDrawerVisible}\r\n          onClose={() => setUserListDrawerVisible(false)}\r\n          onOpen={() => setUserListDrawerVisible(true)}>\r\n          <ActiveUserList setDrawerVisible={setUserListDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\">{title} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon >\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Typography, makeStyles, TextField } from '@material-ui/core';\r\nimport { sendPrivateMessage, changeView, changePMUser } from '../../actions';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  // Get state from redux store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const { userName, setUserInfoVisible } = props;\r\n  const classes = useStyle();\r\n  const [messageText, setMessageText] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const handleSendPrivateMessage = (messageText, userName) => {\r\n    const msg = { \"from\": user.userName, \"msg\": messageText, \"to\": userName };\r\n    dispatch(sendPrivateMessage(msg));\r\n    dispatch(changeView('home'));\r\n    dispatch(changePMUser(msg.to));\r\n    setUserInfoVisible(false);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={messageText}\r\n          onChange={(e) => setMessageText(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => handleSendPrivateMessage(messageText, userName))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade, Popover, CircularProgress } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get States from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel, activeView, activePMUser } = chatStore;\r\n\r\n  // Local states\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [messageIndex, setMessageIndex] = useState(12);\r\n  const [loadMessages, setLoadMessages] = useState(false);\r\n  const [userName, setUserName] = useState(null)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container (for keeping scroll to bottom of chat)\r\n  let messageContainerBottomRef;\r\n  let messageContainerRef;\r\n\r\n  // Get message list from channel or from specific user\r\n  let messages = null;\r\n  let messagesLength = null;\r\n  if (activeView === \"servers\") {\r\n    messages = chatStore.servers[activeServer][\"channels\"][activeChannel];\r\n    messagesLength = messages.length;\r\n  }\r\n  else {\r\n    messages = chatStore.privateMessages[activePMUser];\r\n    // If no messages need to make empty array\r\n    if (messages === undefined) {\r\n      messages = [];\r\n    }\r\n    messagesLength = messages.length;\r\n  }\r\n\r\n  // Scroll to bottom of container if were not loading new messages\r\n  useEffect(() => {\r\n    if (!loadMessages)\r\n      messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n    else {\r\n      setLoadMessages(false);\r\n      messageContainerRef.scroll(0, 56);\r\n    }\r\n  }, [messageContainerBottomRef, messageContainerRef, loadMessages, messages]);\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message) => {\r\n    if (message.startsWith(\"```\") && message.endsWith(\"```\"))\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  // Handles to load more messages when scroll at top\r\n  const handleScrollTop = (e) => {\r\n    const element = e.target;\r\n    if (element.scrollTop > 100) {\r\n      setLoadMessages(false);\r\n    }\r\n    if (element.scrollTop === 0) {\r\n      if (messagesLength > messageIndex) {\r\n        setTimeout(() => {\r\n          setLoadMessages(true);\r\n          if (messageIndex + 12 > messagesLength) {\r\n            setMessageIndex(messagesLength);\r\n          }\r\n          else {\r\n            setMessageIndex(messageIndex + 12);\r\n          }\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Formats the code block\r\n  const formatCode = (message) => {\r\n    return message.split('```')[1];\r\n  }\r\n\r\n  // Handles clicks for setting anchor to User Info (To private message)\r\n  const handleUserClick = (e, userName) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  }\r\n\r\n  // Closes popup of User Info\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"messages-container\" onScroll={(e) => handleScrollTop(e)} ref={(element) => messageContainerRef = element}>\r\n      {messagesLength >= messageIndex ?\r\n        <div className=\"progress-container\">\r\n          <CircularProgress color=\"primary\" />\r\n        </div>\r\n        : null}\r\n      <List>\r\n        {messages !== null ? messages.slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          return (\r\n            <Fade in={true} timeout={500}>\r\n              <ListItem className=\"message\" key={i}>\r\n                <ListItemAvatar className=\"message-user-icon\">\r\n                  <Avatar>\r\n                    <img onClick={(e) => handleUserClick(e, message.from)} src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                {isTextCodeBlock(message.msg)\r\n                  ? <ListItemText primary={<div className=\"message-user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from.toLowerCase()}<div className=\"message-date\">{` - ${moment(message.date).format('LLL')}`}</div></div>} secondary={<Code codeString={formatCode(message.msg)} />} className=\"message-text\" />\r\n                  : <ListItemText primary={<div className=\"message-user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from.toLowerCase()}<div className=\"message-date\">{` - ${moment(message.date).format('LLL')}`}</div></div>} secondary={message.msg} className=\"message-text\" />\r\n                }\r\n              </ListItem>\r\n            </Fade>\r\n          )\r\n        }) : null}\r\n      </List>\r\n      <div ref={(element) => messageContainerBottomRef = element}></div>\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData, updateActiveState, updateActiveUserList } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport Div100vh from 'react-div-100vh';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\nimport Messages from '../Messages/Messages';\r\nimport ActiveUserList from '../ActiveUserList/ActiveUserList';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const { activeServer } = useSelector(state => state.chat);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else {\r\n      dispatch(loadUserData(user.userId));\r\n      updateActiveStatus();\r\n    }\r\n\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n  // Ping server every 5 minutes to update our active status\r\n  // Also fetches new list of active users in activeServer\r\n  const updateActiveStatus = () => {\r\n    dispatch(updateActiveState);\r\n    dispatch(updateActiveUserList(activeServer));\r\n    setTimeout(updateActiveStatus, 5 * 60000);\r\n  }\r\n\r\n\r\n  return (\r\n    <Div100vh>\r\n      <div className=\"grid-container\">\r\n\r\n        <div className=\"sidebar-grid\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"messages-grid\">\r\n          <Header />\r\n          <Messages />\r\n        </div>\r\n\r\n        <div className=\"user-list-grid\">\r\n          <ActiveUserList />\r\n        </div>\r\n\r\n        <div className=\"send-messages-grid\">\r\n          <SendMessage />\r\n        </div>\r\n\r\n      </div >\r\n    </Div100vh>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid, IconButton, Checkbox } from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection] = useState('left')\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  // Shows the main modal (sets transition directions and views to visible / non visible)\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  }\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles and checks keypress and calls the callback method\r\n  const handleKeyPress = (e, callBack) => {\r\n    if (e.key === \"Enter\") {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const handleCreateAccount = async (userName, userPass) => {\r\n    try {\r\n      // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n      userName = encodeURIComponent(userName);\r\n      userPass = encodeURIComponent(userPass);\r\n\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const handleLoginAccount = async (userName, userPass) => {\r\n    // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n    userName = encodeURIComponent(userName);\r\n    userPass = encodeURIComponent(userPass);\r\n\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders options to Create or Login to account\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders the form to create an account\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit >\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the form to login to account\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox vale={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport './App.css';\r\nimport Dashboard from '../Dashboard/Dashboard';\r\nimport Auth from '../Auth/Auth';\r\nimport { signIn } from '../../actions';\r\nimport createHashHistory from '../../history';\r\n\r\nfunction App() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Check local storage if have login info\r\n  // Dispatch sign in action with our userId and redirect to dashboard\r\n  const checkLocalStorageAuth = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user) {\r\n      dispatch(signIn(user));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <HashRouter>\r\n        {checkLocalStorageAuth()}\r\n        <Route path=\"/dashboard\" exact component={Dashboard} />\r\n        <Route path=\"/\" exact component={Auth} />\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: \"14px\",\r\n        backgroundColor: 'black'\r\n      }\r\n    },\r\n    MuiSnackbarContent: {\r\n      root: {\r\n        backgroundColor: '#202225',\r\n        color: 'white'\r\n      }\r\n    },\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: '#36393E',\r\n        position: 'absolute'\r\n      }\r\n    }\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: '#7289da'\r\n    },\r\n    secondary: {\r\n      main: '#3ca374'\r\n    }\r\n  },\r\n  typography: {\r\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\r\n    \"fontSize\": 14,\r\n    \"fontWeightLight\": 400,\r\n    \"fontWeightRegular\": 500,\r\n    \"fontWeightMedium\": 600\r\n  }\r\n\r\n});","import io from 'socket.io-client';\r\n\r\nimport { SEND_SOCKET_MESSAGE, RECEIVE_SOCKET_MESSAGE, SEND_SOCKET_PRIVATE_MESSAGE, SIGN_IN, RECEIVE_SOCKET_PRIVATE_MESSAGE, GET_INITIAL_DATA, ADD_SERVER, UPDATE_ACTIVE_STATE } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n    let listener = null;\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n\r\n      // Send message over socket\r\n      if (action.type === SEND_SOCKET_MESSAGE) {\r\n        socket.emit('simple-chat-message', action.payload);\r\n        return;\r\n      }\r\n\r\n      // Send private message over socket\r\n      if (action.type === SEND_SOCKET_PRIVATE_MESSAGE) {\r\n        socket.emit('simple-chat-private-message', action.payload);\r\n        return;\r\n      }\r\n\r\n      // Pull sign in action and login to send socket server our userId (identify individual socket connectins)\r\n      if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-sign-in', action.payload.userId);\r\n        listener = setupSocketListener(socket, storeAPI);\r\n      }\r\n\r\n      // Pull server list off initial data load\r\n      // Use to \"join\" our server \"rooms\"\r\n      if (action.type === GET_INITIAL_DATA) {\r\n        // Get list of server Ids (used for \"room\" names on socket server)\r\n        let servers = Object.keys(action.payload.servers);\r\n        let serverIds = [];\r\n        servers.forEach((server, i) => {\r\n          serverIds[i] = servers[i].split('-')[1];\r\n        })\r\n\r\n        // Subscribe to each server (Creates a room on socket io)\r\n        serverIds.forEach((serverId) => {\r\n          socket.emit('subscribe', serverId);\r\n        })\r\n      }\r\n\r\n      // If user creates a server we need to join that room\r\n      if (action.type === ADD_SERVER) {\r\n        let serverId = action.payload.server.split('-')[1];\r\n        socket.emit('subscribe', serverId);\r\n      }\r\n\r\n      // Updates our active state on server\r\n      if (action.type === UPDATE_ACTIVE_STATE) {\r\n        socket.emit('ping');\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server for specific events for messages / private messages\r\n// TODO listen for listen for types of Server + payload of message\r\nfunction setupSocketListener(socket, storeAPI) {\r\n  return socket.on('update', (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: RECEIVE_SOCKET_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n    else if (action.type === \"private-message\") {\r\n      storeAPI.dispatch({\r\n        type: RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n        payload: action.payload\r\n      })\r\n    }\r\n\r\n  });\r\n}","import { RECEIVE_SOCKET_MESSAGE, RECEIVE_SOCKET_PRIVATE_MESSAGE, ADD_CHANNEL, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER, CHANGE_VIEW, CHANGE_PM_USER, UPDATE_ACTIVE_USERS } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"channels\": {\r\n        \"general-0m5vBsRnfd\": [\r\n        ],\r\n        \"gaming-p9DnvvrfWo\": [\r\n        ],\r\n        \"programming-aRoD4umYpb\": [\r\n        ],\r\n        \"cooking-v88UngJkiD\": [\r\n        ],\r\n        \"misc-uSje5DwUH0\": [\r\n        ],\r\n        \"/b/-Ry06VYrX3x\": [\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  privateMessages: {\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n  activeUserList: [],\r\n  activeView: 'servers',\r\n  activePMUser: 'none'\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_SOCKET_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            \"channels\": {\r\n              ...state.servers[server].channels,\r\n              [channel]: [\r\n                ...state.servers[server][\"channels\"][channel], { from: from, msg: msg }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case RECEIVE_SOCKET_PRIVATE_MESSAGE:\r\n      if (state.privateMessages[action.payload.user]) {\r\n        return {\r\n          ...state,\r\n          privateMessages: {\r\n            ...state.privateMessages,\r\n            [action.payload.user]: [\r\n              ...state.privateMessages[action.payload.user], { from: action.payload.from, to: action.payload.to, msg: action.payload.msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n      else return {\r\n        ...state,\r\n        privateMessages: {\r\n          ...state.privateMessages,\r\n          [action.payload.user]: [\r\n            { from: action.payload.from, to: action.payload.to, msg: action.payload.msg }\r\n          ]\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            \"channels\": {\r\n              ...state.servers[action.payload.server].channels,\r\n              [action.payload.channel]: [\r\n\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            \"channels\": {\r\n              [action.payload.channel]: [\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload.servers, privateMessages: action.payload.privateMessages, activeServer: \"Default-FANfDprXmt\", activeChannel: \"gaming-p9DnvvrfWo\" };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload][\"channels\"])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    case CHANGE_VIEW:\r\n      return { ...state, activeView: action.payload, activePMUser: Object.keys(state.privateMessages)[0] }\r\n    case CHANGE_PM_USER:\r\n      return { ...state, activePMUser: action.payload }\r\n    case UPDATE_ACTIVE_USERS:\r\n      return { ...state, activeUserList: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { socketMiddleware } from './middleware/socketMiddleware';\r\n\r\nimport reducers from './reducers'\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'));\r\n"],"sourceRoot":""}