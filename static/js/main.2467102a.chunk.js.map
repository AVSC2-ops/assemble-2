{"version":3,"sources":["actions/index.js","actions/types.js","components/Sidebar/Servers.jsx","components/GoogleOAuth/GoogleOAuth.jsx","components/Sidebar/Topics.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["sendMessage","message","type","payload","changeServer","server","changeTopic","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","axios","get","sent","data","stop","_x","apply","this","arguments","signIn","user","_ref2","_callee2","_context2","userName","post","_x2","signOut","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setDrawerVisible","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","isSignedIn","AddCircleOutline","GoogleOAuth","auth","useRef","onLoginButtonClick","action","current","onAuthChange","_auth$current$current","currentUser","getBasicProfile","Eea","ig","U3","userEmail","getId","useEffect","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","Button","Topics","topics","activeServer","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","handleClose","ListItem","e","currentTarget","MoreVert","Menu","id","open","Boolean","onClose","MenuItem","topic","i","Slide","direction","in","timeout","handleTopicChange","button","Typography","variant","toLowerCase","ListItemAvatar","Avatar","Person","ListItemText","primary","ListItemSecondaryAction","CreateJoinModal","handleModalSuccess","modalType","baseUrl","mainVisible","setMainVisible","_useState3","_useState4","mainDirection","setMainDirection","_useState5","_useState6","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","serverId","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","response","joinServer","_x3","_x4","createChannel","_ref3","_callee3","_context3","_x5","_x6","Paper","mountOnEnter","unmountOnExit","color","align","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","margin","style","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","Modal","aria-labelledby","aria-describedby","console","log","Messages","messageContainer","activeTopic","scrollIntoView","msg","Fade","src","process","alt","height","from","secondary","ref","element","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","handleKeyPress","shiftKey","onclick","String","includes","Fragment","TextareaAutosize","aria-label","placeholder","handleOnChange","onKeyPress","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","App","ThemeProvider","theme","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","backgroundColor","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","initialState","programming haven","general","game land","HOTS","isAdmin","Math","floor","random","combineReducers","length","undefined","_action$payload","objectSpread","defineProperty","toConsumableArray","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","storeAPI","socket","io","on","emit","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.2467102a.chunk.js","sourcesContent":["import { SEND_MESSAGE, UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const updateChat = (message) => ({\r\n  type: UPDATE_CHAT,\r\n  payload: message\r\n});\r\n\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: { server }\r\n});\r\n\r\nexport const changeTopic = (server) => ({\r\n  type: CHANGE_TOPIC,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `${baseUrl}/user?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => async dispatch => {\r\n  let url = `${baseUrl}/user?userId=${user.userId}&userName=${user.userName}`;\r\n  const res = axios.post(url);\r\n  // If server responds true, user exists on backend\r\n  if (res) {\r\n    dispatch({ type: SIGN_IN, payload: user });\r\n  }\r\n}\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","export const UPDATE_CHAT = 'UPDATE_CHAT';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_TOPIC = 'CHANGE_TOPIC';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n        {user.isSignedIn ?\r\n          <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n              <AddCircleOutline />\r\n            </IconButton>\r\n          </Tooltip>\r\n          : null\r\n        }\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { signIn, signOut } from '../../actions';\r\n\r\nexport default function GoogleOAuth() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // When app loads, grab users initial data\r\n  // Includes all channels, history and settings\r\n  let auth = useRef();\r\n  useEffect(() => {\r\n    window.gapi.load('client:auth2', () => {\r\n      window.gapi.client.init({\r\n        clientId: '607332079220-hhs6rhoaq44p29150j4thfdgoj7c5k59.apps.googleusercontent.com',\r\n        scope: 'email'\r\n      }).then(() => {\r\n        auth.current = window.gapi.auth2.getAuthInstance();\r\n        onAuthChange(auth.current.isSignedIn.get());\r\n        // Listen for changes\r\n        auth.current.isSignedIn.listen(() => {\r\n          onAuthChange(auth.current.isSignedIn.get());\r\n        });\r\n      });\r\n    });\r\n  }, [])\r\n\r\n\r\n  function onLoginButtonClick(action) {\r\n    if (action === \"login\")\r\n      auth.current.signIn();\r\n    else auth.current.signOut();\r\n  }\r\n\r\n  function onAuthChange(isSignedIn) {\r\n    if (isSignedIn) {\r\n      const { Eea, ig, U3 } = auth.current.currentUser.get().getBasicProfile();\r\n      dispatch(signIn({ \"userId\": Eea, \"userName\": ig, \"userEmail\": U3 }));\r\n    }\r\n    else\r\n      dispatch(signOut(auth.current.currentUser.get().getId()));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user.isSignedIn ? <Button onClick={() => onLoginButtonClick('logout')}>Sign Out</Button> : <Button onClick={() => onLoginButtonClick('login')}>Sign In</Button>}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport { Person, MoreVert } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, ListItemSecondaryAction, Menu, MenuItem, Slide } from '@material-ui/core';\r\nimport { changeTopic } from '../../actions';\r\n\r\nimport GoogleOAuth from '../GoogleOAuth/GoogleOAuth';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function Topics(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Local state\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // Handle topic change, and closes drawer if on mobile view\r\n  const handleTopicChange = (topic) => {\r\n    dispatch(changeTopic(topic));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('channel');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"topics-container\">\r\n\r\n      <List className=\"topic-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {user.isSignedIn ?\r\n            <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n              <IconButton onClick={(e) => handleSettingsClick(e)}> <MoreVert /> </IconButton>\r\n            </Tooltip>\r\n            : null\r\n          }\r\n          <Menu\r\n            id=\"settings-menu\"\r\n            anchorEl={anchorEl}\r\n            open={Boolean(anchorEl)}\r\n            onClick={handleClose}\r\n            onClose={handleClose}\r\n          >\r\n            <MenuItem> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n            <MenuItem onClick={() => handleModalShow()}> Add Channel </MenuItem>\r\n          </Menu>\r\n        </ListItem>\r\n        {topics.map((topic, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={topic + activeServer}>\r\n            <ListItem onClick={(e) => handleTopicChange(topic)} button>\r\n              <i className=\"topic-hashtag\">#</i>\r\n              <Typography variant=\"body1\">{topic.split('-')[0].toLowerCase()}</Typography>\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <ListItemSecondaryAction>\r\n            <GoogleOAuth />\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer } = useSelector(state => state.chat);\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess, modalType } = props;\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('')\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  // Will call modal close event on success\r\n  const createServer = async (serverName, userId) => {\r\n    const response = await axios.post(`${baseUrl}/server/create?serverName=${serverName}&userId=${userId}`);\r\n    if (response) {\r\n      handleModalSuccess(response.data);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  // Will call modal close event on success\r\n  const joinServer = async (serverId, userId) => {\r\n    const response = await axios.post(`${baseUrl}/server/join?serverId=${serverId}&userId=${userId}`);\r\n    if (response) {\r\n      handleModalSuccess(response.data);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  // Will call modal close on success\r\n  const createChannel = async (channelName, serverId) => {\r\n    const response = await axios.post(`${baseUrl}/channel/create?channelName=${channelName}&serverId=${serverId}&userId=${userId}`);\r\n    if (response) {\r\n      handleModalSuccess(response.data);\r\n    }\r\n  }\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <div className=\"modal-main\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-server modal-flex\">\r\n            <Card>\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n          <div className=\"modal-join-server modal-flex\">\r\n            <Card>\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button style={{ marginLeft: '1em' }} variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button style={{ marginLeft: '1em' }} variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button style={{ marginLeft: '1em' }} variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer.split('-')[1])}>Create Channel</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n\r\n  if (modalType === 'server')\r\n    return (\r\n      <Paper className=\"modal-container\">\r\n        {renderMain()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel') {\r\n    return (\r\n      <Paper className=\"modal-container\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Topics from './Topics'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response) => {\r\n    console.log(response);\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Topics setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade } from '@material-ui/core';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeTopic } = chatStore;\r\n\r\n  // ref to message container\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <List>\r\n        {chatStore.servers[activeServer][activeTopic].map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  <ListItemText primary={message.from} secondary={message.msg} className=\"message-text\" />\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainer = element}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeTopic } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    dispatch(sendMessage(message));\r\n    setChatMessage(\"\");\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, topic: activeTopic, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeTopic.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeTopic } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar topics={topics} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <i className=\"topic-hashtag\">#</i>\r\n        <Typography variant=\"h6\"> {activeTopic.split('-')[0].toLowerCase()} </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\nimport { loadUserData } from '../../actions';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nimport './App.css';\nimport Sidebar from '../Sidebar/Sidebar';\nimport Messages from '../Messages/Messages';\nimport SendMessage from '../SendMessage/SendMessage';\nimport Header from '../Header/Header';\n\nfunction App() {\n\n  // Get State from Redux Store\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  // Listens for changes on isSignedIn\n  // Gets initial user data upon change\n  useEffect(() => {\n    if (user.isSignedIn) {\n      dispatch(loadUserData(user.userId));\n    }\n  }, [dispatch, user.isSignedIn, user.userId])\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"grid-container\">\n\n        <div className=\"sidebar-grid\">\n          <Sidebar />\n        </div>\n\n        <div className=\"messages-grid\">\n          <Header />\n          <Messages />\n        </div>\n\n        <div className=\"send-messages-grid\">\n          <SendMessage />\n        </div>\n\n      </div >\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"16px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { SEND_MESSAGE, UPDATE_CHAT } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Dispatch chat to reducers when we receive data\r\n    socket.on(\"simple-chat\", (message) => {\r\n      storeAPI.dispatch({\r\n        type: UPDATE_CHAT,\r\n        payload: message\r\n      });\r\n    });\r\n\r\n    // Emit when SEND_MESSAGE action\r\n    return next => action => {\r\n      if (action.type === SEND_MESSAGE) {\r\n        socket.emit('simple-chat', action.payload);\r\n        return;\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}","import { UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, GET_INITIAL_DATA } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"programming haven\": {\r\n      general: [\r\n      ]\r\n    },\r\n    \"game land\": {\r\n      HOTS: [\r\n      ]\r\n    },\r\n  },\r\n  activeServer: 'programming haven',\r\n  activeTopic: 'general',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CHAT:\r\n      const { server, topic, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [topic]: [\r\n              ...state.servers[server][topic], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeTopic: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload.server, activeTopic: Object.keys(state.servers[action.payload.server])[0] }\r\n    case CHANGE_TOPIC:\r\n      return { ...state, activeTopic: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: 'anon' + Math.floor((Math.random(0) * 100)),\r\n  userEmail: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName, userEmail: action.payload.userEmail }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}