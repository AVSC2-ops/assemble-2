{"version":3,"sources":["actions/index.js","actions/types.js","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Servers.jsx","components/GoogleOAuth/GoogleOAuth.jsx","components/Sidebar/Topics.jsx","components/Sidebar/Sidebar.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["sendMessage","message","type","payload","changeServer","server","changeTopic","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","axios","get","sent","data","stop","_x","apply","this","arguments","signIn","user","_ref2","_callee2","_context2","userName","post","_x2","signOut","CreateJoinModal","props","useSelector","state","handleModalSuccess","baseUrl","_useState","useState","_useState2","slicedToArray","mainVisible","setMainVisible","_useState3","_useState4","mainDirection","setMainDirection","_useState5","_useState6","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","serverId","setServerId","createServer","response","joinServer","_x3","_x4","react_default","createElement","Paper","className","Slide","direction","in","mountOnEnter","unmountOnExit","Typography","variant","color","align","Card","CardActionArea","onClick","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","Button","GroupAdd","timeout","TextField","id","label","value","onChange","e","target","margin","style","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","open","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Servers","chatStore","chat","servers","keys","useDispatch","modalVisible","setModalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","setDrawerVisible","List","map","Tooltip","title","split","key","placement","IconButton","handleServerChange","GroupWork","AddCircleOutline","Modal","aria-labelledby","aria-describedby","onClose","console","log","GoogleOAuth","auth","useRef","onLoginButtonClick","action","current","onAuthChange","isSignedIn","_auth$current$current","currentUser","getBasicProfile","Eea","ig","U3","userEmail","getId","useEffect","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","Topics","topics","activeServer","ListItem","Add","topic","handleTopicChange","button","toLowerCase","ListItemAvatar","Avatar","Person","ListItemText","primary","ListItemSecondaryAction","Sidebar","Messages","messageContainer","activeTopic","scrollIntoView","i","msg","src","process","alt","height","from","secondary","ref","element","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","handleKeyPress","shiftKey","onclick","String","includes","Fragment","TextareaAutosize","aria-label","placeholder","handleOnChange","onKeyPress","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","App","ThemeProvider","theme","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","backgroundColor","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","initialState","programming haven","general","game land","HOTS","isAdmin","Math","floor","random","combineReducers","length","undefined","_action$payload","objectSpread","defineProperty","toConsumableArray","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","storeAPI","socket","io","on","emit","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.bf2222f6.chunk.js","sourcesContent":["import { SEND_MESSAGE, UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com/');\r\n\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const updateChat = (message) => ({\r\n  type: UPDATE_CHAT,\r\n  payload: message\r\n});\r\n\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: { server }\r\n});\r\n\r\nexport const changeTopic = (server) => ({\r\n  type: CHANGE_TOPIC,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `${baseUrl}/user?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => async dispatch => {\r\n  let url = `${baseUrl}/user?userId=${user.userId}&userName=${user.userName}`;\r\n  const res = axios.post(url);\r\n  // If server responds true, user exists on backend\r\n  if (res) {\r\n    dispatch({ type: SIGN_IN, payload: user });\r\n  }\r\n}\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","export const UPDATE_CHAT = 'UPDATE_CHAT';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_TOPIC = 'CHANGE_TOPIC';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from 'axios';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess } = props;\r\n\r\n  // Base URL for http requests\r\n  const baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com/');\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left')\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [joinVisible, setJoinVisible] = useState(false)\r\n  const [joinDirection, setJoinDirection] = useState('left')\r\n  const [serverName, setServerName] = useState('')\r\n  const [serverId, setServerId] = useState('')\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  // Will call modal close event on success\r\n  const createServer = async (serverName, userId) => {\r\n    const response = await axios.post(`${baseUrl}/server/create?serverName=${serverName}&userId=${userId}`);\r\n    if (response) {\r\n      handleModalSuccess(response.data);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  // Will call modal close event on success\r\n  const joinServer = async (serverId, userId) => {\r\n    const response = await axios.post(`${baseUrl}/server/join?serverId=${serverId}&userId=${userId}`);\r\n    if (response) {\r\n      handleModalSuccess(response.data);\r\n    }\r\n  }\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} mountOnEnter unmountOnExit>\r\n        <div className=\"modal-main\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-server modal-flex\">\r\n            <Card>\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n          <div className=\"modal-join-server modal-flex\">\r\n            <Card>\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button style={{ marginLeft: '1em' }} variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <div className=\"modal-create\">\r\n          <div className=\"modal-title modal-flex\">\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </div>\r\n          <div className=\"modal-create-content\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n            />\r\n            <Button style={{ marginLeft: '1em' }} variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </div>\r\n        </div>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <Paper className=\"modal-container\">\r\n      {renderMain()}\r\n      {renderServerCreate()}\r\n      {renderServerJoin()}\r\n    </Paper >\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton, Modal, } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\n\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response) => {\r\n    console.log(response);\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => setModalVisible(true)}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { signIn, signOut } from '../../actions';\r\n\r\nexport default function GoogleOAuth() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // When app loads, grab users initial data\r\n  // Includes all channels, history and settings\r\n  let auth = useRef();\r\n  useEffect(() => {\r\n    window.gapi.load('client:auth2', () => {\r\n      window.gapi.client.init({\r\n        clientId: '607332079220-hhs6rhoaq44p29150j4thfdgoj7c5k59.apps.googleusercontent.com',\r\n        scope: 'email'\r\n      }).then(() => {\r\n        auth.current = window.gapi.auth2.getAuthInstance();\r\n        onAuthChange(auth.current.isSignedIn.get());\r\n        // Listen for changes\r\n        auth.current.isSignedIn.listen(() => {\r\n          onAuthChange(auth.current.isSignedIn.get());\r\n        });\r\n      });\r\n    });\r\n  }, [])\r\n\r\n\r\n  function onLoginButtonClick(action) {\r\n    if (action === \"login\")\r\n      auth.current.signIn();\r\n    else auth.current.signOut();\r\n  }\r\n\r\n  function onAuthChange(isSignedIn) {\r\n    if (isSignedIn) {\r\n      const { Eea, ig, U3 } = auth.current.currentUser.get().getBasicProfile();\r\n      dispatch(signIn({ \"userId\": Eea, \"userName\": ig, \"userEmail\": U3 }));\r\n    }\r\n    else\r\n      dispatch(signOut(auth.current.currentUser.get().getId()));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user.isSignedIn ? <Button onClick={() => onLoginButtonClick('logout')}>Sign Out</Button> : <Button onClick={() => onLoginButtonClick('login')}>Sign In</Button>}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Person, Add } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\r\nimport { changeTopic } from '../../actions';\r\n\r\nimport GoogleOAuth from '../GoogleOAuth/GoogleOAuth';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function Topics(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Handle topic change, and closes drawer if on mobile view\r\n  const handleTopicChange = (topic) => {\r\n    dispatch(changeTopic(topic));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"topics-container\">\r\n\r\n      <List className=\"topic-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          <Tooltip title=\"Add channel\" key=\"add-channel\" placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"topic-icon\" >\r\n              <Add />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </ListItem>\r\n        {topics.map(topic => (\r\n          <ListItem onClick={(e) => handleTopicChange(topic)} key={topic} button>\r\n            <i className=\"topic-hashtag\">#</i>\r\n            <Typography variant=\"body1\">{topic.split('-')[0].toLowerCase()}</Typography>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <ListItemSecondaryAction>\r\n            <GoogleOAuth />\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Servers from './Servers';\r\nimport Topics from './Topics'\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setDrawerVisible={setDrawerVisible} />\r\n      <Topics setDrawerVisible={setDrawerVisible} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeTopic } = chatStore;\r\n\r\n  // ref to message container\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <List>\r\n        {chatStore.servers[activeServer][activeTopic].map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <ListItem className=\"message\" key={i}>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={message.from} secondary={message.msg} className=\"message-text\" />\r\n              </ListItem>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainer = element}></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeTopic } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    dispatch(sendMessage(message));\r\n    setChatMessage(\"\");\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, topic: activeTopic, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeTopic}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeTopic } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar topics={topics} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <i className=\"topic-hashtag\">#</i>\r\n        <Typography variant=\"h6\"> {activeTopic.split('-')[0].toLowerCase()} </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\nimport { loadUserData } from '../../actions';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\n\nimport './App.css';\nimport Sidebar from '../Sidebar/Sidebar';\nimport Messages from '../Messages/Messages';\nimport SendMessage from '../SendMessage/SendMessage';\nimport Header from '../Header/Header';\n\nfunction App() {\n\n  // Get State from Redux Store\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  // Listens for changes on isSignedIn\n  // Gets initial user data upon change\n  useEffect(() => {\n    if (user.isSignedIn) {\n      dispatch(loadUserData(user.userId));\n    }\n  }, [dispatch, user.isSignedIn, user.userId])\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"grid-container\">\n\n        <div className=\"sidebar-grid\">\n          <Sidebar />\n        </div>\n\n        <div className=\"messages-grid\">\n          <Header />\n          <Messages />\n        </div>\n\n        <div className=\"send-messages-grid\">\n          <SendMessage />\n        </div>\n\n      </div >\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"16px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { SEND_MESSAGE, UPDATE_CHAT } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Dispatch chat to reducers when we receive data\r\n    socket.on(\"simple-chat\", (message) => {\r\n      storeAPI.dispatch({\r\n        type: UPDATE_CHAT,\r\n        payload: message\r\n      });\r\n    });\r\n\r\n    // Emit when SEND_MESSAGE action\r\n    return next => action => {\r\n      if (action.type === SEND_MESSAGE) {\r\n        socket.emit('simple-chat', action.payload);\r\n        return;\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}","import { UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, GET_INITIAL_DATA } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"programming haven\": {\r\n      general: [\r\n      ]\r\n    },\r\n    \"game land\": {\r\n      HOTS: [\r\n      ]\r\n    },\r\n  },\r\n  activeServer: 'programming haven',\r\n  activeTopic: 'general',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CHAT:\r\n      const { server, topic, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [topic]: [\r\n              ...state.servers[server][topic], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeTopic: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload.server, activeTopic: Object.keys(state.servers[action.payload.server])[0] }\r\n    case CHANGE_TOPIC:\r\n      return { ...state, activeTopic: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: 'anon' + Math.floor((Math.random(0) * 100)),\r\n  userEmail: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName, userEmail: action.payload.userEmail }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com/');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}