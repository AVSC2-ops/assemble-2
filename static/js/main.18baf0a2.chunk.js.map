{"version":3,"sources":["actions/types.js","components/Api/api.js","actions/index.js","history.js","components/Sidebar/Servers.jsx","components/Sidebar/Channels.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/UserInfo/UserInfo.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["ADD_MESSAGE","ADD_PRIVATE_MESSAGE","NEW_PRIVATE_MESSAGE","axios","create","baseURL","newMessage","message","type","payload","addChannel","data","addServer","changeServer","server","changeChannel","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","get","sent","stop","_x","apply","this","arguments","signIn","user","signOut","createHashHistory","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","AddCircleOutline","Channels","channels","activeServer","setDrawerVisible","handleSnackMessage","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","serverId","response","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","ListItem","Fragment","e","MoreVert","channel","i","Slide","direction","in","timeout","handleChannelChange","button","Typography","variant","toLowerCase","Settings","ListItemAvatar","Avatar","Person","ListItemText","primary","userName","Button","localStorage","clear","Menu","id","anchorEl","open","Boolean","onClose","MenuItem","text","navigator","clipboard","writeText","callBack","length","CreateJoinModal","_useSelector2","activeChannel","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","post","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","renameServer","_ref3","_callee3","_context3","_x5","_x6","deleteServer","_ref4","_callee4","_context4","delete","_x7","_x8","createChannel","_ref5","_callee5","_context5","_x9","_x10","renameChannel","_ref6","_callee6","channelId","_context6","_x11","_x12","deleteChannel","_ref7","_callee7","_context7","_x13","_x14","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","pass","Modal","aria-labelledby","aria-describedby","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","height","UserInfo","classes","messageText","setMessageText","src","process","alt","placeholder","msg","from","to","sendPrivateMessage","InputProps","InputLabelProps","shrink","Messages","messageContainerBottomRef","messageContainerRef","userInfoVisible","setUserInfoVisible","messageIndex","setMessageIndex","loadMessages","setLoadMessages","setUserName","setAnchorEl","scroll","scrollIntoView","block","behavior","formatCode","handleUserClick","messagesLength","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","Fade","startsWith","endsWith","isTextCodeBlock","secondary","react_code_prettify_default","codeString","Popover","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","shiftKey","trim","window","onclick","String","includes","TextareaAutosize","aria-label","handleOnChange","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","Dashboard","isSignedIn","push","lib_default","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","showMain","handleOnSubmit","error","createAccount","errorData","encodeURIComponent","setItem","JSON","stringify","loginAccount","ArrowBack","values","helperText","Checkbox","checked","vale","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","action","baseUrl","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","activeUsers","messages","combineReducers","undefined","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.18baf0a2.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_PRIVATE_MESSAGE = 'ADD_PRIVATE_MESSAGE';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const NEW_MESSAGE = 'NEW_MESSAGE';\r\nexport const NEW_PRIVATE_MESSAGE = 'NEW_PRIVATE_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_channel';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com')\r\n});","import { NEW_MESSAGE, ADD_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from '../components/Api/api'\r\n\r\n\r\n// Action that socket middleware listens for\r\n// Emits via socket new message event\r\nexport const newMessage = (message) => ({\r\n  type: NEW_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n\r\n// Action to add message to a channel\r\nexport const addMessage = (message) => ({\r\n  type: ADD_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add channel to a server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide, Button } from '@material-ui/core';\r\nimport { changeChannel, signOut } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\n\r\n\r\nexport default function Channels(props) {\r\n\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer][\"channels\"]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType, handleSnackMessage } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // Check if admin of active server\r\n  // Will render admin options for server\r\n  useEffect(() => {\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n    getAdmin();\r\n  }, [activeServer])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  const handleChannelDelete = (callBack) => {\r\n    if (channels.length === 1) {\r\n      handleSnackMessage(\"Please delete the server if only 1 channel\");\r\n    }\r\n    else {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  // Signs the user out\r\n  const handleSignout = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  // Handles saving serverId to clipboard\r\n  const handleSaveClipboard = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n    handleSnackMessage(`Server ID ${text} saved to clipboard`, false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignout}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleSaveClipboard(activeServer.split('-')[1])}> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-delete')}> Delete Server </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleChannelDelete(() => handleModalShow('channel-delete'))}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleSnackMessage, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting servers\r\n  const deleteServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.delete(`/server/delete?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const renameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const deleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a server\r\n  const renderServerDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeServer.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteServer(activeServer.split('-')[1], userId)}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Channel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"server-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Channels from './Channels'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleSnackMessage = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n      <Channels setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleSnackMessage={handleSnackMessage} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Typography, makeStyles, TextField } from '@material-ui/core';\r\nimport { NEW_PRIVATE_MESSAGE } from '../../actions/types';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  // Get state from redux store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const { userName } = props;\r\n  const classes = useStyle();\r\n  const [messageText, setMessageText] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const sendPrivateMessage = (messageText, userName) => {\r\n    const msg = { \"from\": user.userName, \"text\": messageText, \"to\": userName };\r\n    dispatch({ type: NEW_PRIVATE_MESSAGE, payload: msg })\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={messageText}\r\n          onChange={(e) => setMessageText(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => sendPrivateMessage(messageText, userName))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade, Popover, CircularProgress } from '@material-ui/core';\r\nimport Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel } = chatStore;\r\n\r\n  // Local state for user popover\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [messageIndex, setMessageIndex] = useState(12);\r\n  const [loadMessages, setLoadMessages] = useState(false);\r\n  const [userName, setUserName] = useState(null)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container\r\n  let messageContainerBottomRef;\r\n  let messageContainerRef;\r\n\r\n  // Scroll bottom of page \r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    if (!loadMessages)\r\n      messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n    else {\r\n      messageContainerRef.scroll(0, 56);\r\n    }\r\n  })\r\n\r\n  // On mount scroll to bottom\r\n  useEffect(() => {\r\n    messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n  }, []);\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message) => {\r\n    if (message.startsWith(\"```\") && message.endsWith(\"```\"))\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  // Formats the code block\r\n  const formatCode = (message) => {\r\n    return message.split('```')[1];\r\n  }\r\n\r\n  // Handles clicks for setting anchor\r\n  const handleUserClick = (e, userName) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  }\r\n\r\n  // Closes popup\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  // Handles to load more messages when scroll at top\r\n  const handleScrollTop = (e) => {\r\n    const element = e.target;\r\n    if (element.scrollTop > 100) {\r\n      setLoadMessages(false);\r\n    }\r\n    if (element.scrollTop === 0) {\r\n      if (messagesLength > messageIndex) {\r\n        setTimeout(() => {\r\n          setLoadMessages(true);\r\n          if (messageIndex + 12 > messagesLength) {\r\n            setMessageIndex(messagesLength);\r\n          }\r\n          else {\r\n            setMessageIndex(messageIndex + 12);\r\n          }\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  const messagesLength = chatStore.servers[activeServer][\"channels\"][activeChannel].length;\r\n\r\n  return (\r\n    <div className=\"messages-container\" onScroll={(e) => handleScrollTop(e)} ref={(element) => messageContainerRef = element}>\r\n      {messagesLength >= messageIndex ?\r\n        <div className=\"progress-container\">\r\n          <CircularProgress color=\"primary\" />\r\n        </div>\r\n        : null}\r\n      <List>\r\n        {chatStore.servers[activeServer][\"channels\"][activeChannel].slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img className=\"user\" onClick={(e) => handleUserClick(e, message.from)} src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  {isTextCodeBlock(message.msg)\r\n                    ? <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={<Code codeString={formatCode(message.msg)} />} className=\"message-text\" />\r\n                    : <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={message.msg} className=\"message-text\" />\r\n                  }\r\n                </ListItem>\r\n              </Fade>\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainerBottomRef = element}></div>\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} />\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { addMessage, newMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    if (message.msg.trim() !== \"\") {\r\n      dispatch(newMessage(message));\r\n      setChatMessage(\"\");\r\n    }\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeChannel.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, Icon, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeChannel } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => setDrawerVisible(true)}>\r\n          <Sidebar channels={channels} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\"> <i className=\"channel-hashtag\">#</i>{activeChannel.split('-')[0].toLowerCase()} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon >\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport Div100vh from 'react-div-100vh';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n\r\n  return (\r\n    <Div100vh>\r\n      <div className=\"grid-container\">\r\n\r\n        <div className=\"sidebar-grid\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"messages-grid\">\r\n          <Header />\r\n          <Messages />\r\n        </div>\r\n\r\n        <div className=\"send-messages-grid\">\r\n          <SendMessage />\r\n        </div>\r\n\r\n      </div >\r\n    </Div100vh>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid, IconButton, Checkbox } from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection] = useState('left')\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  }\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n      userName = encodeURIComponent(userName);\r\n      userPass = encodeURIComponent(userPass);\r\n\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n    userName = encodeURIComponent(userName);\r\n    userPass = encodeURIComponent(userPass);\r\n\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit >\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox vale={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport { signIn } from '../../actions';\nimport createHashHistory from '../../history';\n\nfunction App() {\n\n  // Dispatch \n  const dispatch = useDispatch();\n\n  const checkLocalStorageAuth = () => {\n    // Check local storage if we logged in and force login\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      dispatch(signIn(user));\n      createHashHistory.push('/dashboard');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        {checkLocalStorageAuth()}\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n        <Route path=\"/\" exact component={Auth} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"14px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { NEW_MESSAGE, ADD_MESSAGE, NEW_PRIVATE_MESSAGE, ADD_PRIVATE_MESSAGE, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n      if (action.type === NEW_MESSAGE) {\r\n        socket.emit('simple-chat-new-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n      else if (action.type === NEW_PRIVATE_MESSAGE) {\r\n        socket.emit('simple-chat-new-private-message', action.payload);\r\n        return;\r\n      }\r\n\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server\r\n// Action types of (Message, Channel)\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n    else if (action.type === \"private-message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_PRIVATE_MESSAGE,\r\n        payload: action.payload\r\n      })\r\n    }\r\n  });\r\n}","import { ADD_MESSAGE, ADD_CHANNEL, ADD_PRIVATE_MESSAGE, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"channels\": {\r\n        \"general-0m5vBsRnfd\": [\r\n        ],\r\n        \"gaming-p9DnvvrfWo\": [\r\n        ],\r\n        \"programming-aRoD4umYpb\": [\r\n        ],\r\n        \"cooking-v88UngJkiD\": [\r\n        ],\r\n        \"misc-uSje5DwUH0\": [\r\n        ],\r\n        \"/b/-Ry06VYrX3x\": [\r\n        ]\r\n      },\r\n      \"activeUsers\": [\r\n\r\n      ]\r\n    }\r\n  },\r\n  messages: {\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            \"channels\": {\r\n              ...state.servers[server].channels,\r\n              [channel]: [\r\n                ...state.servers[server][\"channels\"][channel], { from: from, msg: msg }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            \"channels\": {\r\n              ...state.servers[action.payload.server].channels,\r\n              [action.payload.channel]: [\r\n\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            \"channels\": {\r\n              [action.payload.channel]: [\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeChannel: Object.keys(action.payload[Object.keys(action.payload)[0]][\"channels\"])[0] };\r\n    case ADD_PRIVATE_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: {\r\n          ...state.messages,\r\n          [action.payload.from]: [\r\n            { from: action.payload.from, to: action.payload.to, msg: action.payload.text }\r\n          ]\r\n        }\r\n      }\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload][\"channels\"])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}