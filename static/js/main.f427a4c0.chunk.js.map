{"version":3,"sources":["actions/index.js","actions/types.js","components/GoogleOAuth.jsx","components/Sidebar.jsx","components/Header.jsx","components/Messages.jsx","components/SendMessage.jsx","components/Dashboard.jsx","components/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["sendMessage","message","type","payload","changeServer","server","serverId","changeTopic","getInitialData","oAuthData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","axios","get","sent","data","stop","_x","apply","this","arguments","signIn","user","_ref2","_callee2","_context2","userId","userName","post","_x2","signOut","GoogleOAuth","useSelector","state","useDispatch","auth","useRef","onLoginButtonClick","action","current","onAuthChange","isSignedIn","_auth$current$current","currentUser","getBasicProfile","Eea","ig","U3","userEmail","getId","useEffect","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","react_default","createElement","Button","onClick","Topics","props","chatStore","chat","servers","keys","topics","activeServer","changeDrawerVisible","className","List","map","Tooltip","title","key","placement","IconButton","server_id","GroupWork_default","ListItem","split","topic","e","button","Typography","variant","toLowerCase","ListItemAvatar","Avatar","Person_default","ListItemText","primary","ListItemSecondaryAction","Header","activeTopic","_useState","useState","_useState2","slicedToArray","drawerVisible","AppBar","position","Toolbar","edge","color","aria-label","Menu_default","SwipeableDrawer","anchor","open","onClose","onOpen","Messages","messageContainer","scrollIntoView","Fragment","i","src","process","alt","height","from","secondary","msg","ref","element","SendMessage","_useSelector","chatMessage","changeChatMessage","_useState3","_useState4","emojiMenuVisible","changeEmojiMenuVisible","handleKeyPress","shiftKey","onclick","String","target","includes","TextareaAutosize","placeholder","value","onChange","handleOnChange","onKeyPress","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Dashboard","theme","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","backgroundColor","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","App","baseUrl","ThemeProvider","initialState","programming haven","general","game land","HOTS","isAdmin","Math","floor","random","combineReducers","length","undefined","_action$payload","objectSpread","defineProperty","toConsumableArray","console","log","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","storeAPI","socket","io","on","emit","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.f427a4c0.chunk.js","sourcesContent":["import { SEND_MESSAGE, UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com/');\r\n\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_MESSAGE,\r\n  payload: message\r\n});\r\n\r\nexport const updateChat = (message) => ({\r\n  type: UPDATE_CHAT,\r\n  payload: message\r\n});\r\n\r\nexport const changeServer = (server, serverId) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: { server, serverId }\r\n});\r\n\r\nexport const changeTopic = (server) => ({\r\n  type: CHANGE_TOPIC,\r\n  payload: server\r\n});\r\n\r\nexport const getInitialData = (oAuthData) => async dispatch => {\r\n  let url = `${baseUrl}/user?`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => async dispatch => {\r\n  let url = `${baseUrl}/user?userId=${user.userId}&userName=${user.userName}`;\r\n  const res = axios.post(url);\r\n  // If server responds true, user exists on backend\r\n  if (res) {\r\n    dispatch({ type: SIGN_IN, payload: user });\r\n  }\r\n}\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","export const UPDATE_CHAT = 'UPDATE_CHAT';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_TOPIC = 'CHANGE_TOPIC';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import React, { useEffect, useRef } from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { signIn, signOut } from '../actions';\r\n\r\nexport default function GoogleOAuth() {\r\n\r\n  // Get store state\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // When app loads, grab users initial data\r\n  // Includes all channels, history and settings\r\n  let auth = useRef();\r\n  useEffect(() => {\r\n    window.gapi.load('client:auth2', () => {\r\n      window.gapi.client.init({\r\n        clientId: '607332079220-hhs6rhoaq44p29150j4thfdgoj7c5k59.apps.googleusercontent.com',\r\n        scope: 'email'\r\n      }).then(() => {\r\n        auth.current = window.gapi.auth2.getAuthInstance();\r\n        onAuthChange(auth.current.isSignedIn.get());\r\n        // Listen for changes\r\n        auth.current.isSignedIn.listen(() => {\r\n          onAuthChange(auth.current.isSignedIn.get());\r\n        });\r\n      });\r\n    });\r\n  }, [])\r\n\r\n\r\n  function onLoginButtonClick(action) {\r\n    if (action === \"login\")\r\n      auth.current.signIn();\r\n    else auth.current.signOut();\r\n  }\r\n\r\n  function onAuthChange(isSignedIn) {\r\n    if (isSignedIn) {\r\n      const { Eea, ig, U3 } = auth.current.currentUser.get().getBasicProfile();\r\n      dispatch(signIn({ \"userId\": Eea, \"userName\": ig, \"userEmail\": U3 }));\r\n    }\r\n    else\r\n      dispatch(signOut(auth.current.currentUser.get().getId()));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {user.isSignedIn ? <Button onClick={() => onLoginButtonClick('logout')}>Sign Out</Button> : <Button onClick={() => onLoginButtonClick('login')}>Sign In</Button>}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport GroupWork from '@material-ui/icons/GroupWork';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\r\n\r\n\r\nimport { changeServer, changeTopic } from '../actions';\r\nimport GoogleOAuth from './GoogleOAuth';\r\n\r\nexport default function Topics(props) {\r\n\r\n\r\n  // Get chats from store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n\r\n  // Get user from store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { changeDrawerVisible } = props;\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <div className=\"servers-container\">\r\n        <List>\r\n          {servers.map(server => (\r\n            <Tooltip title={server} key={server} placement=\"right\" className=\"server-tooltip\">\r\n              <IconButton className=\"server-icon\" onClick={() => dispatch(changeServer(server, server.server_id))}>\r\n                <GroupWork />\r\n              </IconButton>\r\n            </Tooltip>\r\n          ))}\r\n        </List>\r\n      </div>\r\n      <div className=\"topics-container\">\r\n        <List className=\"topic-list\">\r\n          <ListItem className=\"title-container\">{activeServer.split('-')[0]}</ListItem>\r\n          {topics.map(topic => (\r\n            <ListItem onClick={(e) => { dispatch(changeTopic(topic)); if (typeof changeDrawerVisible !== \"undefined\") changeDrawerVisible(false) }} key={topic} button>\r\n              <i className=\"topic-hashtag\">#</i>\r\n              <Typography variant=\"body1\">{topic.split('-')[0].toLowerCase()}</Typography>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <div className=\"user-options\">\r\n          <ListItem className=\"user-info\">\r\n            <ListItemAvatar>\r\n              <Avatar>\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={user.userName} />\r\n            <ListItemSecondaryAction>\r\n              <GoogleOAuth />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        </div>\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer } from '@material-ui/core';\r\n\r\nimport Sidebar from './Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get store state\r\n  const { activeTopic } = useSelector(state => state.chat);\r\n\r\n  // Local state\r\n  const [drawerVisible, changeDrawerVisible] = useState(false);\r\n\r\n  // Get props from parent\r\n  const { topics, servers } = props;\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => changeDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => changeDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar topics={topics} servers={servers} changeDrawerVisible={changeDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <i className=\"topic-hashtag\">#</i>\r\n        <Typography variant=\"h6\"> {activeTopic.split('-')[0].toLowerCase()} </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText } from '@material-ui/core';\r\nimport Header from './Header';\r\n\r\nexport default function Messages(props) {\r\n\r\n  // Get chats from store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const topics = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer, activeTopic } = chatStore;\r\n\r\n  // ref\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header topics={topics} servers={servers}></Header>\r\n      <div className=\"messages-container\">\r\n        <List>\r\n          {chatStore.servers[activeServer][activeTopic].map((message, i) => (\r\n            <ListItem className=\"message\" key={i}>\r\n              <ListItemAvatar>\r\n                <Avatar>\r\n                  <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                </Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText primary={message.from} secondary={message.msg} className=\"message-text\" />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <div ref={(element) => messageContainer = element}></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage } from '../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get store state\r\n  const { activeServer, activeTopic } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, changeChatMessage] = useState('');\r\n  const [emojiMenuVisible, changeEmojiMenuVisible] = useState(false);\r\n\r\n  function handleSubmit(message) {\r\n    dispatch(sendMessage(message));\r\n    changeChatMessage(\"\");\r\n  }\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, topic: activeTopic, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  function handleOnChange(e) {\r\n    // Catches enters (dont render to screen)\r\n    // Shift enter still works\r\n    if (e.target.value !== \"\\n\")\r\n      changeChatMessage(e.target.value)\r\n  }\r\n\r\n  function handleEmojiClick(e) {\r\n    changeChatMessage(chatMessage + e.native);\r\n    changeEmojiMenuVisible(false);\r\n  }\r\n\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      changeEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeTopic}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => changeEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\nimport { getInitialData } from '../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Sidebar from './Sidebar';\r\nimport Messages from './Messages';\r\nimport SendMessage from './SendMessage.jsx';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get user store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (user.isSignedIn)\r\n      dispatch(getInitialData());\r\n  }, [dispatch, user.isSignedIn])\r\n\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"sidebar-grid\">\r\n        <Sidebar />\r\n      </div>\r\n\r\n      <div className=\"messages-grid\">\r\n        <Messages />\r\n      </div>\r\n\r\n      <div className=\"send-messages-grid\">\r\n        <SendMessage />\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './Dashboard';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"16px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 300,\n    \"fontWeightRegular\": 400,\n    \"fontWeightMedium\": 500\n  }\n\n});\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <Dashboard></Dashboard>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import io from 'socket.io-client';\r\n\r\nimport { SEND_MESSAGE, UPDATE_CHAT } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Dispatch chat to reducers when we receive data\r\n    socket.on(\"simple-chat\", (message) => {\r\n      storeAPI.dispatch({\r\n        type: UPDATE_CHAT,\r\n        payload: message\r\n      });\r\n    });\r\n\r\n    // Emit when SEND_MESSAGE action\r\n    return next => action => {\r\n      if (action.type === SEND_MESSAGE) {\r\n        socket.emit('simple-chat', action.payload);\r\n        return;\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}","import { UPDATE_CHAT, CHANGE_SERVER, CHANGE_TOPIC, GET_INITIAL_DATA } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"programming haven\": {\r\n      general: [\r\n      ]\r\n    },\r\n    \"game land\": {\r\n      HOTS: [\r\n      ]\r\n    },\r\n  },\r\n  activeServer: 'programming haven',\r\n  activeTopic: 'general',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_CHAT:\r\n      const { server, topic, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [topic]: [\r\n              ...state.servers[server][topic], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeTopic: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload.server, activeTopic: Object.keys(state.servers[action.payload.server])[0] }\r\n    case CHANGE_TOPIC:\r\n      return { ...state, activeTopic: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: 'anon' + Math.floor((Math.random(0) * 100)),\r\n  userEmail: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName, userEmail: action.payload.userEmail }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com/');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}