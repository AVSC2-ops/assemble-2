{"version":3,"sources":["actions/types.ts","components/Api/api.ts","actions/index.ts","history.ts","components/SnackBar/SnackBarContent.jsx","components/Sidebar/PrivateMessageUserList.tsx","components/Sidebar/ChannelList.tsx","components/Sidebar/ServerList.tsx","components/ActionsModal/ActionsModal.tsx","components/Sidebar/Sidebar.tsx","components/SendMessage/SendMessage.tsx","components/UserInfo/UserInfo.jsx","components/ActiveUserList/ActiveUserList.tsx","components/Header/Header.tsx","components/Messages/Messages.tsx","components/Dashboard/Dashboard.tsx","components/Auth/Auth.tsx","components/App/App.tsx","reducers/chatReducer.ts","reducers/userReducer.ts","reducers/index.ts","index.tsx","middleware/socketMiddleware.ts"],"names":["ACTION","axios","create","baseURL","sendMessage","message","type","SEND_SOCKET_MESSAGE","payload","sendPrivateMessage","SEND_SOCKET_PRIVATE_MESSAGE","addChannel","channel","ADD_CHANNEL","addServer","server","ADD_SERVER","updateActiveUserList","serverId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","response","wrap","_context","prev","next","get","concat","sent","UPDATE_ACTIVE_USERS","data","stop","_x","apply","this","arguments","updateActiveState","UPDATE_ACTIVE_STATE","changeServer","split","CHANGE_SERVER","changeChannel","CHANGE_CHANNEL","changeView","view","CHANGE_VIEW","changePMUser","user","CHANGE_PM_USER","loadUserData","userId","_ref2","_callee2","url","res","_context2","keys","servers","GET_INITIAL_DATA","_x2","signIn","SIGN_IN","signOut","SIGN_OUT","createHashHistory","SnackBarContent","props","content","visible","setVisible","react_default","createElement","Snackbar","open","anchorOrigin","vertical","horizontal","onEntered","setTimeout","PrivateMessageUserList","privateMessages","useSelector","state","chat","userList","useDispatch","className","List","ListItem","map","userItem","i","Slide","direction","in","timeout","key","button","onClick","Avatar","src","process","alt","height","Typography","variant","ListItemAvatar","Person","ListItemText","primary","userName","Button","localStorage","clear","ChannelList","chatStore","channels","activeServer","setDrawerVisible","setModalVisible","setModalType","handleSnackMessage","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAnchorEl","setChannelAnchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","getAdmin","handleModalShow","modalType","handleSettingsClick","e","currentTarget","handleClose","Fragment","Tooltip","title","placement","IconButton","MoreVert","handleChannelChange","toLowerCase","Settings","Menu","id","anchorEl","Boolean","onClose","MenuItem","text","navigator","clipboard","writeText","callBack","length","ServerList","handleChangeView","undefined","Home","handleServerChange","GroupWork","AddCircleOutline","ActionsModal","_useSelector2","activeChannel","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","handleCreateServer","_response","post","t0","handleJoinServer","_response2","_x3","_x4","handleRenameServer","_ref3","_callee3","_response3","_context3","_x5","_x6","handleDeleteServer","_ref4","_callee4","_response4","_context4","delete","_x7","_x8","handleCreateChannel","_ref5","_callee5","_response5","_context5","_x9","_x10","handleRenameChannel","_ref6","_callee6","channelId","_response6","_context6","_x11","_x12","handleDeleteChannel","_ref7","_callee7","_response7","_context7","_x13","_x14","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","Sidebar","activeView","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","pass","Modal","aria-labelledby","aria-describedby","SendMessage","_useSelector","activePMUser","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","placeholderTitle","setPlaceholderTitle","handleSubmit","msg","validMessage","trim","isValidMessage","replace","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","shiftKey","from","to","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","UserInfo","setUserInfoVisible","classes","messageText","setMessageText","handleSendPrivateMessage","InputProps","InputLabelProps","shrink","ActiveUserList","activeUserList","userInfoVisible","setUserName","setAnchorEl","handleUserClick","user_name","Popover","Header","sideBarDrawerVisible","setSideBarDrawerVisible","userListDrawerVisible","setUserListDrawerVisible","setTitle","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","Messages","messageIndex","setMessageIndex","loadMessages","setLoadMessages","messageContainerBottomRef","document","getElementById","messageContainerRef","messages","messagesLength","scroll","scrollIntoView","block","behavior","formatCode","PR","prettyPrint","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","Fade","startsWith","endsWith","isTextCodeBlock","moment","date","format","secondary","dangerouslySetInnerHTML","__html","Dashboard","isSignedIn","updateActiveStatus","push","addEventListener","vh","innerHeight","documentElement","setProperty","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","showMain","handleOnSubmit","error","handleCreateAccount","errorData","encodeURIComponent","setItem","JSON","stringify","handleLoginAccount","ArrowBack","helperText","Checkbox","checked","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","combineReducers","action","RECEIVE_SOCKET_MESSAGE","_action$payload","objectSpread","defineProperty","toConsumableArray","RECEIVE_SOCKET_PRIVATE_MESSAGE","baseUrl","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","storeAPI","socket","io","emit","on","setupSocketListener","serverIds","forEach","ReactDOM","render","es","components_App_App"],"mappings":"qLAAYA,wHCKGC,WAAMC,OAAO,CAC1BC,QAHmE,qDDHzDH,2sBEmCL,IAAMI,EAAc,SAACC,GAAD,MAAkD,CAC3EC,KAAMN,EAAOO,oBACbC,QAASH,IAUEI,EAAqB,SAACJ,GAAD,MAAgE,CAChGC,KAAMN,EAAOU,4BACbF,QAASH,IAUEM,EAAa,SAACC,GAAD,MAAgD,CACxEN,KAAMN,EAAOa,YACbL,QAASI,IAIEE,EAAY,SAACC,GAAD,MAA6C,CACpET,KAAMN,EAAOgB,WACbR,QAASO,IAIEE,EAAuB,SAACC,GAAD,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAsB,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACjC9B,EAAM+B,IAAN,gCAAAC,OAA0Cf,IADT,OAClDS,EADkDE,EAAAK,KAExDR,EAAS,CAAEpB,KAAMN,EAAOmC,oBAAqB3B,QAASmB,EAASS,OAFP,wBAAAP,EAAAQ,SAAAZ,MAAtB,gBAAAa,GAAA,OAAAnB,EAAAoB,MAAAC,KAAAC,YAAA,IAMvBC,EAAoB,iBAAgC,CAC/DpC,KAAMN,EAAO2C,oBACbnC,QAAS,OAIEoC,EAAe,SAAC7B,GAAD,OAAoB,SAACW,GAC/CA,EAAST,EAAqBF,EAAO8B,MAAM,KAAK,KAChDnB,EAA6B,CAAEpB,KAAMN,EAAO8C,cAAetC,QAASO,MAIzDgC,EAAgB,SAACnC,GAAD,MAA2C,CACtEN,KAAMN,EAAOgD,eACbxC,QAASI,IAIEqC,EAAa,SAACC,GAAD,MAAqC,CAC7D5C,KAAMN,EAAOmD,YACb3C,QAAS0C,IAIEE,EAAe,SAACC,GAAD,MAAuC,CACjE/C,KAAMN,EAAOsD,eACb9C,QAAS6C,IAIEE,EAAe,SAACC,GAAD,sBAAAC,EAAArC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAoB,SAAAkC,EAAOhC,GAAP,IAAAiC,EAAAC,EAAA,OAAAtC,EAAAC,EAAAK,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAC1C4B,EAD0C,qBAAA1B,OACfuB,GADeK,EAAA9B,KAAA,EAE5B9B,EAAM+B,IAAqB2B,GAFC,OAExCC,EAFwCC,EAAA3B,KAI9CR,EAAST,EAAqBG,OAAO0C,KAAKF,EAAIxB,KAAK2B,SAAS,GAAGlB,MAAM,KAAK,KAC1EnB,EAA6B,CAAEpB,KAAMN,EAAOgE,iBAAkBxD,QAASoD,EAAIxB,OAL7B,wBAAAyB,EAAAxB,SAAAqB,MAApB,gBAAAO,GAAA,OAAAR,EAAAlB,MAAAC,KAAAC,YAAA,IASfyB,EAAS,SAACb,GAAD,MAAqC,CACzD/C,KAAMN,EAAOmE,QACb3D,QAAS6C,IAIEe,EAAU,iBAAsB,CAC3C9D,KAAMN,EAAOqE,SACb7D,QAAS,eC1HI8D,yCCGA,SAASC,EAAgBC,GAAO,IAErCC,EAAiCD,EAAjCC,QAASC,EAAwBF,EAAxBE,QAASC,EAAeH,EAAfG,WAS1B,OACEC,EAAArD,EAAAsD,cAACC,EAAA,EAAD,CACEC,KAAML,EACNrE,QAASoE,EACTO,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,UAAW,WAbbC,WAAW,WACTT,GAAW,IACV,6FCNQ,SAASU,IAAyB,IAEvCC,EAAoBC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAA7DH,gBACFjC,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAChDqC,EAAWtE,OAAO0C,KAAKwB,GACvB5D,EAAWiE,cAQjB,OACEf,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,sBACbhB,EAAArD,EAAAsD,cAACgB,EAAA,EAAD,CAAMD,UAAU,gBACdhB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUF,UAAU,mBAApB,QACCF,EAASK,IAAI,SAACC,EAAUC,GAAX,OACZrB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,QAAQC,IAAI,EAAMC,QAAS,KAAOJ,EAAI,GAAIK,IAAKL,GAC9DrB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUS,QAAM,EAACX,UAAU,YAAYY,QAAS,kBAAM9E,EAAS0B,EAAa4C,MAC1EpB,EAAArD,EAAAsD,cAAC4B,EAAA,EAAD,KACG,IACD7B,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,OAAOc,IAAKC,gCAAsCC,IAAI,YAAYC,OAAO,OAAQ,KAElGjC,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQnB,UAAU,kBACnCI,QAOXpB,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,gBACbhB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUF,UAAU,aAClBhB,EAAArD,EAAAsD,cAACmC,EAAA,EAAD,KACEpC,EAAArD,EAAAsD,cAAC4B,EAAA,EAAD,KACE7B,EAAArD,EAAAsD,cAACoC,EAAA,EAAD,QAGJrC,EAAArD,EAAAsD,cAACqC,EAAA,EAAD,CAAcC,QAAS9D,EAAK+D,WAC5BxC,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CAAQb,QAhCM,WACpBc,aAAaC,QACb7F,EAAS0C,OA8BH,yECnBK,SAASoD,EAAYhD,GAElC,IAAMiD,EAAYlC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACrDiC,EAAWtG,OAAO0C,KAAK2D,EAAU1D,QAAQ0D,EAAUE,cAA5B,UACrBA,EAAiBF,EAAjBE,aACFjG,EAAWiE,cACXtC,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAG9CuE,EAAwEpD,EAAxEoD,iBAAkBC,EAAsDrD,EAAtDqD,gBAAiBC,EAAqCtD,EAArCsD,aAAcC,EAAuBvD,EAAvBuD,mBATEC,EAYfC,mBAAS,MAZMC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAYpDI,EAZoDF,EAAA,GAYpCG,EAZoCH,EAAA,GAAAI,EAabL,mBAAS,MAbIM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAapDE,EAboDD,EAAA,GAanCE,EAbmCF,EAAA,GAAAG,EAc7BT,oBAAS,GAdoBU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAcpDE,EAdoDD,EAAA,GAc3CE,EAd2CF,EAAA,GAiB3DG,oBAAU,WAAM,SAAAC,IAAA,OAAAA,EAAA3H,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAEd,SAAAC,IAAA,IAAAP,EAAAS,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACMb,EAAWyG,EAAa9E,MAAM,KAAK,GADzChB,EAAAE,KAAA,EAEyB9B,EAAM+B,IAAN,0BAAAC,OAAoCf,EAApC,YAAAe,OAAuDoB,EAAKG,SAFrF,OAEQ7B,EAFRE,EAAAK,KAGE2G,EAAWlH,EAASS,MAHtB,wBAAAP,EAAAQ,SAAAZ,OAFcc,MAAAC,KAAAC,YAAA,WAAAsG,EAAAxG,MAAAC,KAAAC,WAQduG,IACC,CAACrB,EAActE,IAGlB,IAeM4F,EAAkB,SAACC,GACvBpB,EAAaoB,GACbrB,GAAgB,IAIZsB,EAAsB,SAACC,EAAQ9I,GACtB,WAATA,EAAmB+H,EAAkBe,EAAEC,eACzB,YAAT/I,GAAoBmI,EAAmBW,EAAEC,gBAI9CC,EAAc,WAClBjB,EAAkB,MAClBI,EAAmB,OAerB,OACE7D,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,sBACbhB,EAAArD,EAAAsD,cAACgB,EAAA,EAAD,CAAMD,UAAU,gBACdhB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUF,UAAU,mBACjB+B,EAAa9E,MAAM,KAAK,GACxB+F,EACChE,EAAArD,EAAAsD,cAACD,EAAArD,EAAMgI,SAAP,KACE3E,EAAArD,EAAAsD,cAAC2E,EAAA,EAAD,CAASC,MAAM,kBAAkBnD,IAAI,kBAAkBoD,UAAU,QAAQ9D,UAAU,WACjFhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CAAYnD,QAAS,SAAA4C,GAAC,OAAID,EAAoBC,EAAG,YAC9C,IACDxE,EAAArD,EAAAsD,cAAC+E,EAAA,EAAD,MAAa,OAIjB,MAELlC,EAAS3B,IAAI,SAACnF,EAASqF,GAAV,OACZrB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,QAAQC,IAAI,EAAMC,QAAS,KAAOJ,EAAI,GAAIK,IAAK1F,EAAU+G,GACxE/C,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUU,QAAS,SAAA4C,GAAC,OA9DF,SAACxI,GAC3Bc,EAASqB,EAAcnC,IACS,qBAArBgH,GAAkCA,GAAiB,GA4D9BiC,CAAoBjJ,IAAU2F,QAAM,EAACX,UAAU,gBACrEhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,SAClBnC,EAAArD,EAAAsD,cAAA,KAAGe,UAAU,mBAAb,KACChF,EAAQiC,MAAM,KAAK,GAAGiH,eAExBlB,EACChE,EAAArD,EAAAsD,cAAC2E,EAAA,EAAD,CAASC,MAAM,kBAAkBnD,IAAI,kBAAkBoD,UAAU,QAAQ9D,UAAU,WACjFhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CAAYnD,QAAS,SAAA4C,GAAC,OAAID,EAAoBC,EAAG,aAC9C,IACDxE,EAAArD,EAAAsD,cAACkF,EAAA,EAAD,CAAUnE,UAAU,qBAAsB,MAG5C,UAMZhB,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,gBACbhB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUF,UAAU,aAClBhB,EAAArD,EAAAsD,cAACmC,EAAA,EAAD,KACEpC,EAAArD,EAAAsD,cAAC4B,EAAA,EAAD,KACE7B,EAAArD,EAAAsD,cAACoC,EAAA,EAAD,QAGJrC,EAAArD,EAAAsD,cAACqC,EAAA,EAAD,CAAcC,QAAS9D,EAAK+D,WAC5BxC,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CAAQb,QAvDM,WACpBc,aAAaC,QACb7F,EAAS0C,OAqDH,cAIJQ,EAAArD,EAAAsD,cAACmF,EAAA,EAAD,CACEC,GAAG,uBACHC,SAAU9B,EACVrD,KAAMoF,QAAQ/B,GACd5B,QAAS8C,EACTc,QAASd,GAET1E,EAAArD,EAAAsD,cAACwF,EAAA,EAAD,CAAU7D,QAAS,kBA5DI8D,EA4DsB3C,EAAa9E,MAAM,KAAK,GA3DzE0H,UAAUC,UAAUC,UAAUH,QAC9BvC,EAAkB,aAAA9F,OAAcqI,EAAd,wBAAyC,GAFjC,IAACA,IA6DpB,IADH,eAEe3C,EAAa9E,MAAM,KAAK,GAAI,KAE3C+B,EAAArD,EAAAsD,cAACwF,EAAA,EAAD,CAAU7D,QAAS,kBAAMyC,EAAgB,mBAAzC,wBACArE,EAAArD,EAAAsD,cAACwF,EAAA,EAAD,CAAU7D,QAAS,kBAAMyC,EAAgB,mBAAzC,mBACArE,EAAArD,EAAAsD,cAACwF,EAAA,EAAD,CAAU7D,QAAS,kBAAMyC,EAAgB,oBAAzC,kBAGFrE,EAAArD,EAAAsD,cAACmF,EAAA,EAAD,CACEC,GAAG,wBACHC,SAAU1B,EACVzD,KAAMoF,QAAQ3B,GACdhC,QAAS8C,EACTc,QAASd,GAET1E,EAAArD,EAAAsD,cAACwF,EAAA,EAAD,CAAU7D,QAAS,kBAAMyC,EAAgB,oBAAzC,yBACArE,EAAArD,EAAAsD,cAACwF,EAAA,EAAD,CAAU7D,QAAS,kBA9GIkE,EA8GsB,kBAAMzB,EAAgB,wBA7G/C,IAApBvB,EAASiD,OACX5C,EAAmB,8CAA8C,GAEjE2C,KAJwB,IAACA,IA+GpB,IADH,iBAEiB,yCClKV,SAASE,GAAWpG,GAEjC,IAAMiD,EAAYlC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACrD1B,EAAU3C,OAAO0C,KAAK2D,EAAU1D,SAChCrC,EAAWiE,cAGTkC,EAAkCrD,EAAlCqD,gBAAiBC,EAAiBtD,EAAjBsD,aAcnB+C,EAAmB,SAAC3H,EAAcwH,GACtChJ,EAASuB,EAAWC,SACH4H,IAAbJ,GAAwBA,KAG9B,OACE9F,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,qBACbhB,EAAArD,EAAAsD,cAACgB,EAAA,EAAD,KACEjB,EAAArD,EAAAsD,cAAC2E,EAAA,EAAD,CAASC,MAAM,OAAOnD,IAAI,OAAOoD,UAAU,QAAQ9D,UAAU,WAC3DhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CAAY/D,UAAU,YAAYY,QAAS,kBAAMqE,EAAiB,UAChEjG,EAAArD,EAAAsD,cAACkG,GAAA,EAAD,QAGJnG,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,mBAEd7B,EAAQgC,IAAI,SAAAhF,GAAM,OACjB6D,EAAArD,EAAAsD,cAAC2E,EAAA,EAAD,CAASC,MAAO1I,EAAO8B,MAAM,KAAK,GAAIyD,IAAKvF,EAAQ2I,UAAU,QAAQ9D,UAAU,WAC7EhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CACE/D,UAAU,cACVY,QAAS,kBAAMqE,EAAiB,UAAW,kBA9B5B,SAAC9J,GAC1BW,EAASkB,EAAa7B,IA6BqCiK,CAAmBjK,OAEpE6D,EAAArD,EAAAsD,cAACoG,GAAA,EAAD,UAKNrG,EAAArD,EAAAsD,cAAC2E,EAAA,EAAD,CAASC,MAAM,gBAAgBnD,IAAI,gBAAgBoD,UAAU,QAAQ9D,UAAU,WAC7EhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CAAY/D,UAAU,cAAcY,QAAS,kBAAMqE,EAAiB,UAAW,kBAhCrF/C,EAAa,2BACbD,GAAgB,OAgCRjD,EAAArD,EAAAsD,cAACqG,GAAA,EAAD,uGCrCG,SAASC,GAAa3G,GAA0B,IAErDhB,EAAW+B,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAApDG,OAFqD4H,EAGrB7F,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAAzEkC,EAHqDyD,EAGrDzD,aAAc0D,EAHuCD,EAGvCC,cAEhB3J,EAAWiE,cAGToC,EAAkCvD,EAAlCuD,mBAAoBmB,EAAc1E,EAAd0E,UARiClB,EAWvBC,oBAAS,GAXcC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAWtDsD,EAXsDpD,EAAA,GAWzCqD,EAXyCrD,EAAA,GAAAI,EAYdL,mBAAS,QAZKM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAYtDkD,EAZsDjD,EAAA,GAYvCkD,EAZuClD,EAAA,GAAAG,EAanBT,oBAAS,GAbUU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAatDgD,EAbsD/C,EAAA,GAavCgD,EAbuChD,EAAA,GAAAiD,EAcV3D,mBAAS,QAdC4D,EAAAzK,OAAA+G,EAAA,EAAA/G,CAAAwK,EAAA,GActDE,EAdsDD,EAAA,GAcrCE,EAdqCF,EAAA,GAAAG,EAevB/D,oBAAS,GAfcgE,EAAA7K,OAAA+G,EAAA,EAAA/G,CAAA4K,EAAA,GAetDE,EAfsDD,EAAA,GAezCE,EAfyCF,EAAA,GAAAG,EAgBdnE,mBAAS,QAhBKoE,EAAAjL,OAAA+G,EAAA,EAAA/G,CAAAgL,EAAA,GAgBtDE,EAhBsDD,EAAA,GAgBvCE,EAhBuCF,EAAA,GAAAG,EAiBzBvE,mBAAS,IAjBgBwE,EAAArL,OAAA+G,EAAA,EAAA/G,CAAAoL,EAAA,GAiBtDE,EAjBsDD,EAAA,GAiB1CE,EAjB0CF,EAAA,GAAAG,EAkB7B3E,mBAAS,IAlBoB4E,EAAAzL,OAAA+G,EAAA,EAAA/G,CAAAwL,EAAA,GAkBtD1L,EAlBsD2L,EAAA,GAkB5CC,EAlB4CD,EAAA,GAAAE,EAmBvB9E,mBAAS,IAnBc+E,EAAA5L,OAAA+G,EAAA,EAAA/G,CAAA2L,EAAA,GAmBtDE,GAnBsDD,EAAA,GAmBzCE,GAnByCF,EAAA,GAsCvDG,GAAkB,eAAAhM,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOiL,EAAoBlJ,GAA3B,IAAA4J,EAAA/M,EAAA,OAAAiB,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEA9B,EAAMoN,KAAN,6BAAApL,OAAwCyK,EAAxC,YAAAzK,OAA6DuB,IAF7D,OAEjB7B,EAFiBE,EAAAK,KAGvBR,EAASZ,EAAUa,EAASS,OACtB/B,EAJiB,UAAA4B,OAIGN,EAASS,KAAKrB,OAAO8B,MAAM,KAAK,GAJnC,aAAAZ,OAKrBN,EAASS,KAAKrB,OAAO8B,MAAM,KAAK,GALX,YAOvBkF,EAAmB1H,GAAS,GAPLwB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAyL,GAAAzL,EAAA,SASvBkG,EAAmBlG,EAAAyL,GAAI3L,SAASS,MAAM,GATf,yBAAAP,EAAAQ,SAAAZ,EAAA,iBAAH,gBAAAa,EAAA2B,GAAA,OAAA9C,EAAAoB,MAAAC,KAAAC,YAAA,GAclB8K,GAAgB,eAAA9J,EAAArC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAkC,EAAOxC,EAAkBsC,GAAzB,IAAAgK,EAAA,OAAAlM,EAAAC,EAAAK,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAAA8B,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAEE9B,EAAMoN,KAAN,yBAAApL,OAAoCf,EAApC,YAAAe,OAAuDuB,IAFzD,OAEf7B,EAFekC,EAAA3B,KAGrB6F,EAAmBpG,EAASS,MAAM,GAHbyB,EAAA9B,KAAA,gBAAA8B,EAAA/B,KAAA,EAAA+B,EAAAyJ,GAAAzJ,EAAA,SAKrBkE,EAAmBlE,EAAAyJ,GAAI3L,SAASS,MAAM,GALjB,yBAAAyB,EAAAxB,SAAAqB,EAAA,iBAAH,gBAAA+J,EAAAC,GAAA,OAAAjK,EAAAlB,MAAAC,KAAAC,YAAA,GAUhBkL,GAAkB,eAAAC,EAAAxM,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAqM,EAAOnB,EAAoBxL,GAA3B,IAAA4M,EAAA,OAAAxM,EAAAC,EAAAK,KAAA,SAAAmM,GAAA,cAAAA,EAAAjM,KAAAiM,EAAAhM,MAAA,cAAAgM,EAAAjM,KAAA,EAAAiM,EAAAhM,KAAA,EAEA9B,EAAMoN,KAAN,6BAAApL,OACQyK,EADR,cAAAzK,OAC+Bf,EAD/B,YAAAe,OACkDuB,IAHlD,OAEjB7B,EAFiBoM,EAAA7L,KAKvB6F,EAAmBpG,EAASS,MAAM,GALX2L,EAAAhM,KAAA,gBAAAgM,EAAAjM,KAAA,EAAAiM,EAAAT,GAAAS,EAAA,SAOvBhG,EAAmBgG,EAAAT,GAAI3L,SAASS,MAAM,GAPf,yBAAA2L,EAAA1L,SAAAwL,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAArL,MAAAC,KAAAC,YAAA,GAYlByL,GAAkB,eAAAC,EAAA/M,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA4M,EAAOlN,EAAkBsC,GAAzB,IAAA6K,EAAA,OAAA/M,EAAAC,EAAAK,KAAA,SAAA0M,GAAA,cAAAA,EAAAxM,KAAAwM,EAAAvM,MAAA,cAAAuM,EAAAxM,KAAA,EAAAwM,EAAAvM,KAAA,EAEA9B,EAAMsO,OAAN,2BAAAtM,OAAwCf,EAAxC,YAAAe,OAA2DuB,IAF3D,OAEjB7B,EAFiB2M,EAAApM,KAGvB6F,EAAmBpG,EAASS,MAAM,GAHXkM,EAAAvM,KAAA,gBAAAuM,EAAAxM,KAAA,EAAAwM,EAAAhB,GAAAgB,EAAA,SAKvBvG,EAAmBuG,EAAAhB,GAAI3L,SAASS,MAAM,GALf,yBAAAkM,EAAAjM,SAAA+L,EAAA,iBAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAA5L,MAAAC,KAAAC,YAAA,GAUlBiM,GAAmB,eAAAC,EAAAvN,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAoN,EAAO3B,EAAqBlM,GAA5B,IAAA8N,EAAAxO,EAAA,OAAAiB,EAAAC,EAAAK,KAAA,SAAAkN,GAAA,cAAAA,EAAAhN,KAAAgN,EAAA/M,MAAA,cAAA+M,EAAAhN,KAAA,EAAAgN,EAAA/M,KAAA,EAED9B,EAAMoN,KAAN,+BAAApL,OAA0CgL,EAA1C,YAAAhL,OAAgElB,EAAhE,YAAAkB,OAAiFuB,IAFhF,OAElB7B,EAFkBmN,EAAA5M,KAGxBR,EAASf,EAAWgB,EAASS,OACvB/B,EAJkB,UAAA4B,OAIEN,EAASS,KAAKxB,QAAQiC,MAAM,KAAK,GAJnC,aAAAZ,OAIiDN,EAASS,KAAKxB,QAAQiC,MAC7F,IAAI,IALkB,YAOxBkF,EAAmB1H,GAAS,GAPJyO,EAAA/M,KAAA,gBAAA+M,EAAAhN,KAAA,EAAAgN,EAAAxB,GAAAwB,EAAA,SASxB/G,EAAmB+G,EAAAxB,GAAI3L,SAASS,MAAM,GATd,yBAAA0M,EAAAzM,SAAAuM,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAApM,MAAAC,KAAAC,YAAA,GAcnBwM,GAAmB,eAAAC,EAAA9N,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA2N,EAAOlC,EAAqBmC,GAA5B,IAAAC,EAAA,OAAA/N,EAAAC,EAAAK,KAAA,SAAA0N,GAAA,cAAAA,EAAAxN,KAAAwN,EAAAvN,MAAA,cAAAuN,EAAAxN,KAAA,EAAAwN,EAAAvN,KAAA,EAED9B,EAAMoN,KAAN,+BAAApL,OACUgL,EADV,eAAAhL,OACmCmN,EADnC,cAAAnN,OAEnB0F,EAAa9E,MAAM,KAAK,GAFL,YAAAZ,OAGVuB,IALW,OAElB7B,EAFkB2N,EAAApN,KAOxB6F,EAAmBpG,EAASS,MAAM,GAPVkN,EAAAvN,KAAA,gBAAAuN,EAAAxN,KAAA,EAAAwN,EAAAhC,GAAAgC,EAAA,SASxBvH,EAAmBuH,EAAAhC,GAAI3L,SAASS,MAAM,GATd,yBAAAkN,EAAAjN,SAAA8M,EAAA,iBAAH,gBAAAI,EAAAC,GAAA,OAAAN,EAAA3M,MAAAC,KAAAC,YAAA,GAcnBgN,GAAmB,eAAAC,EAAAtO,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAmO,EAAO1C,EAAqBmC,GAA5B,IAAAQ,EAAA,OAAAtO,EAAAC,EAAAK,KAAA,SAAAiO,GAAA,cAAAA,EAAA/N,KAAA+N,EAAA9N,MAAA,cAAA8N,EAAA/N,KAAA,EAAA+N,EAAA9N,KAAA,EAED9B,EAAMsO,OAAN,6BAAAtM,OACQmN,EADR,cAAAnN,OAC8B0F,EAAa9E,MAAM,KAAK,GADtD,YAAAZ,OACmEuB,IAHlE,OAElB7B,EAFkBkO,EAAA3N,KAKxB6F,EAAmBpG,EAASS,MAAM,GALVyN,EAAA9N,KAAA,gBAAA8N,EAAA/N,KAAA,EAAA+N,EAAAvC,GAAAuC,EAAA,SAOxB9H,EAAmB8H,EAAAvC,GAAI3L,SAASS,MAAM,GAPd,yBAAAyN,EAAAxN,SAAAsN,EAAA,iBAAH,gBAAAG,EAAAC,GAAA,OAAAL,EAAAnN,MAAAC,KAAAC,YAAA,GAYnBuN,GAAiB,SAAC5G,EAAkB6G,GAC1B,UAAV7G,EAAE9C,KACJ2J,KA0VJ,MAAkB,uBAAd/G,EAEAtE,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBArVjBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAWqF,EAAepF,GAAIkF,EAAajF,QAAS,IAAK8J,cAAY,EAACC,eAAa,GACxFxL,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,wCAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpB/L,EAAArD,EAAAsD,cAACkM,GAAA,EAAD,CAAMnL,UAAU,aACdhB,EAAArD,EAAAsD,cAACmM,GAAA,EAAD,CAAgBxK,QAAS,kBA/GnCiF,EAAiB,SACjBc,EAAiB,QACjBZ,GAAiB,QACjBJ,GAAe,KA6GH3G,EAAArD,EAAAsD,cAACoM,GAAA,EAAD,KACErM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUM,cAAY,GAArD,UAGAtM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAArC,gDAGAvM,EAAArD,EAAAsD,cAACuM,GAAA,EAAD,KACExM,EAAArD,EAAAsD,cAACwM,GAAA,EAAD,CAAYzL,UAAU,qBAExBhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CAAQN,QAAQ,YAAY6J,MAAM,UAAUhL,UAAU,gBAAtD,qBAORhB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpB/L,EAAArD,EAAAsD,cAACkM,GAAA,EAAD,CAAMnL,UAAU,aACdhB,EAAArD,EAAAsD,cAACmM,GAAA,EAAD,CAAgBxK,QAAS,kBA3InCiF,EAAiB,SACjBM,EAAmB,QACnBI,GAAe,QACfZ,GAAe,KAyIH3G,EAAArD,EAAAsD,cAACoM,GAAA,EAAD,KACErM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,YAAYM,cAAY,GAAvD,QAGAtM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAArC,6CAGAvM,EAAArD,EAAAsD,cAACuM,GAAA,EAAD,KACExM,EAAArD,EAAAsD,cAACyM,GAAA,EAAD,CAAU1L,UAAU,qBAEtBhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CAAQN,QAAQ,YAAY6J,MAAM,YAAYhL,UAAU,gBAAxD,uBAeZhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAW2F,EAAiB1F,GAAIsF,EAAeyE,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACxFzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,qBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,oFAEoF,KAEpFvM,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,sBACHuH,MAAM,cACNC,MAAO/E,EACPgF,SAAU,SAAAtI,GAAC,OAAIuD,EAAcvD,EAAEuI,OAAOF,QACtCG,WAAY,SAAAxI,GAAC,OAAI4G,GAAe5G,EAAG,kBAAM+D,GAAmBT,EAAYlJ,MACxEqO,OAAO,QACP9K,QAAQ,WACR+K,aAAa,SAGjBlN,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAM2G,GAAmBT,EAAYlJ,KAJhD,oBAmGNoB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAWmG,EAAelG,GAAI8F,EAAaiE,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACpFzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,mBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,8EAE8E,KAE9EvM,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,oBACHuH,MAAM,YACNC,MAAOvQ,EACPwQ,SAAU,SAAAtI,GAAC,OAAI0D,EAAY1D,EAAEuI,OAAOF,QACpCG,WAAY,SAAAxI,GAAC,OAAI4G,GAAe5G,EAAG,kBAAMmE,GAAiBrM,EAAUsC,MACpEqO,OAAO,QACP9K,QAAQ,WACR+K,aAAa,SAGjBlN,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAM+G,GAAiBrM,EAAUsC,KAJ5C,mBAiJa,mBAAd0F,EACAtE,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBAjItBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAM+J,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACpEzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,sBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,0EAE0E,KAE1EvM,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,uBACHuH,MAAM,eACNC,MAAOxE,GACPyE,SAAU,SAAAtI,GAAC,OAAI8D,GAAe9D,EAAEuI,OAAOF,QACvCG,WAAY,SAAAxI,GAAC,OAAI4G,GAAe5G,EAAG,kBAAMsF,GAAoBzB,GAAatF,MAC1EkK,OAAO,QACP9K,QAAQ,WACR+K,aAAa,SAGjBlN,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAMkI,GAAoBzB,GAAatF,KAJlD,sBA0Ge,kBAAduB,EACFtE,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBA9PtBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAM+J,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACpEzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,kBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,wCAEwCxJ,EAAa9E,MAAM,KAAK,GAAI,KAEpE+B,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,uBACHuH,MAAM,eACNC,MAAO/E,EACPgF,SAAU,SAAAtI,GAAC,OAAIuD,EAAcvD,EAAEuI,OAAOF,QACtCG,WAAY,SAAAxI,GAAC,OAAI4G,GAAe5G,EAAG,kBAAMuE,GAAmBjB,EAAY/E,EAAa9E,MAAM,KAAK,OAChGgP,OAAO,QACP9K,QAAQ,WACR+K,aAAa,SAGjBlN,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAMmH,GAAmBjB,EAAY/E,EAAa9E,MAAM,KAAK,MAJxE,qBAuOe,mBAAdqG,EACFtE,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBA5FtBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAM+J,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACpEzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,kBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,0CAE0C9F,EAAcxI,MAAM,KAAK,GAAI,KAEvE+B,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,uBACHuH,MAAM,eACNC,MAAOxE,GACPyE,SAAU,SAAAtI,GAAC,OAAI8D,GAAe9D,EAAEuI,OAAOF,QACvCG,WAAY,SAAAxI,GAAC,OAAI4G,GAAe5G,EAAG,kBAAM6F,GAAoBhC,GAAa5B,EAAcxI,MAAM,KAAK,OACnGgP,OAAO,QACP9K,QAAQ,WACR+K,aAAa,SAGjBlN,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAMyI,GAAoBhC,GAAa5B,EAAcxI,MAAM,KAAK,MAJ3E,sBAqEe,mBAAdqG,EACFtE,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBArDtBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAM+J,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACpEzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,mBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,qCAEqC9F,EAAcxI,MAAM,KAAK,GAAI,MAGpE+B,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,QAASC,YAAa,OAChDzL,QAAS,kBAAMiJ,GAAoBxC,GAAa5B,EAAcxI,MAAM,KAAK,MAL3E,OASA+B,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,MAAOE,WAAY,OAC7C1L,QAAS,kBAAMuB,EAAmB,wBAAwB,KAL5D,UA+Be,kBAAdmB,EACFtE,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBA3NtBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAU,OAAOC,IAAI,EAAM+J,cAAY,EAACC,eAAa,EAAC/J,QAAS,KACpEzB,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,kBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAClC,IADH,qCAEqCxJ,EAAa9E,MAAM,KAAK,GAAI,MAGnE+B,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,QAASC,YAAa,OAChDzL,QAAS,kBAAM0H,GAAmBvG,EAAa9E,MAAM,KAAK,GAAIW,KALhE,OASAoB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,eACVmB,QAAQ,YACR6J,MAAM,UACNmB,MAAO,CAAEC,gBAAiB,MAAOE,WAAY,OAC7C1L,QAAS,kBAAMuB,EAAmB,wBAAwB,KAL5D,UAqMI,KCnfD,SAASoK,GAAQ3N,GAE9B,IAAMnB,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAC9C+O,EAAe7M,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAAxD2M,WAGF1Q,EAAWiE,cAGTiC,EAAqBpD,EAArBoD,iBAT2CI,EAYXC,oBAAS,GAZEC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAY5CqK,EAZ4CnK,EAAA,GAY9BL,EAZ8BK,EAAA,GAAAI,EAajBL,mBAAS,IAbQM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAa5CY,EAb4CX,EAAA,GAajCT,EAbiCS,EAAA,GAAAG,EAcXT,mBAAS,IAdEU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAc5C4J,EAd4C3J,EAAA,GAc9B4J,EAd8B5J,EAAA,GAAAiD,EAeX3D,oBAAS,GAfE4D,EAAAzK,OAAA+G,EAAA,EAAA/G,CAAAwK,EAAA,GAe5C4G,EAf4C3G,EAAA,GAe9B4G,EAf8B5G,EAAA,GAmB7C9D,EAAqB,SAACpG,EAAkB+Q,GAC3B,OAAb/Q,IACFkG,GAAgB,GAChB4K,GAAgB,GAChBF,EAAgB5Q,GACZ+Q,GAAMhR,EAAS6B,EAAaF,EAAKG,WAIzC,OACEoB,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,qBACbhB,EAAArD,EAAAsD,cAAC+F,GAAD,CAAY/C,gBAAiBA,EAAiBC,aAAcA,IAC5C,YAAfsK,EACCxN,EAAArD,EAAAsD,cAAC2C,EAAD,CACEI,iBAAkBA,EAClBC,gBAAiBA,EACjBC,aAAcA,EACdC,mBAAoBA,IAGtBnD,EAAArD,EAAAsD,cAACQ,EAAD,MAEFT,EAAArD,EAAAsD,cAAC8N,EAAA,EAAD,CACE5N,KAAMsN,EACNO,kBAAgB,sBAChBC,mBAAiB,kBACjBjN,UAAU,gBACVwE,QAAS,kBAAMvC,GAAgB,KAE/BjD,EAAArD,EAAAsD,cAACsG,GAAD,CAAcpD,mBAAoBA,EAAoBmB,UAAWA,KAEnEtE,EAAArD,EAAAsD,cAACN,EAAD,CAAiBG,QAAS8N,EAAc7N,WAAY8N,EAAiBhO,QAAS6N,2DCvDrE,SAASQ,KAAc,IAAAC,EAE8BxN,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAAnGkC,EAF4BoL,EAE5BpL,aAAc0D,EAFc0H,EAEd1H,cAAe+G,EAFDW,EAECX,WAAYY,EAFbD,EAEaC,aACzC5L,EAAa7B,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAAtD+D,SACF1F,EAAWiE,cAJmBqC,EAOEC,mBAAS,IAPXC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAO7BiL,EAP6B/K,EAAA,GAOhBgL,EAPgBhL,EAAA,GAAAI,EAQYL,oBAAS,GARrBM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAQ7B6K,EAR6B5K,EAAA,GAQX6K,EARW7K,EAAA,GAAAG,EASYT,mBAAS,IATrBU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAS7B2K,EAT6B1K,EAAA,GASX2K,EATW3K,EAAA,GAmCpC,SAAS4K,EAAalT,IAdtB,SAAwBmT,GACtB,IAAIC,GAAe,EAGnB,MADmB,KAAfD,EAAIE,SAAeD,GAAe,GAC/BA,GAWHE,CAAetT,EAAQmT,OACzBnT,EAAQmT,IAAoBnT,EAAQmT,IAP3BI,QAAQ,oBAAqB,UASnB,YAAfxB,GAA6C,mBAAjB/R,EAAQC,KACtCoB,EAAStB,EAAYC,IACG,SAAf+R,GAA0C,mBAAjB/R,EAAQC,MAC1CoB,EAASjB,EAAmBJ,IAE9B6S,EAAe,KAsCnB,OAtEApK,oBAAU,WACW,YAAfsJ,EACFkB,EAAoBjI,EAAcxI,MAAM,KAAK,IACrB,SAAfuP,GACTkB,EAAoBN,IAErB,CAACZ,EAAY/G,EAAe2H,IA4D/Ba,OAAOC,QAAU,SAAC1K,GACZ2K,OAAO3K,EAAEuI,OAAO/L,WAAWoO,SAAS,4BAA4BZ,GAAoB,IAIxFxO,EAAArD,EAAAsD,cAACD,EAAArD,EAAMgI,SAAP,KACE3E,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,wBACfhB,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,0BACbhB,EAAArD,EAAAsD,cAACoP,GAAA,EAAD,CACEC,aAAW,iBACXC,YAAW,aAAAlS,OAAeoR,GAC1BzN,UAAU,oBACV6L,MAAOwB,EACPvB,SAAU,SAAAtI,GAAC,OAxBnB,SAAwBA,GACC,OAAnBA,EAAEuI,OAAOF,OAAgByB,EAAe9J,EAAEuI,OAAOF,OAuBhC2C,CAAehL,IAC9BwI,WAAY,SAAAxI,GAAC,OAzCrB,SAAwBA,GACR,UAAVA,EAAE9C,KAAoB8C,EAAEiL,WACP,YAAfjC,EACFmB,EAAa,CACXxS,OAAQ4G,EACR/G,QAASyK,EACTiJ,KAAMlN,EACNoM,IAAKP,EACL3S,KAAM,mBAEc,SAAf8R,GACPmB,EAAa,CAAEe,KAAMlN,EAAUmN,GAAIvB,EAAcQ,IAAKP,EAAa3S,KAAM,oBA8BtD0P,CAAe5G,MAElCxE,EAAArD,EAAAsD,cAAC2P,GAAAjT,EAAD,CAAYqE,UAAU,4BAA4BY,QAAS,kBAAM4M,GAAqBD,OAExFvO,EAAArD,EAAAsD,cAAA,OAAKe,UAAWuN,EAAmB,+BAAiC,gCAClEvO,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,iBACbhB,EAAArD,EAAAsD,cAAC4P,GAAA,EAAD,CAAQC,IAAI,WAAWC,SAAU,SAAAvL,GAAC,OA1B1C,SAA0BA,GACxB8J,EAAeD,EAAc7J,EAAEwL,QAC/BxB,GAAoB,GAwBwByB,CAAiBzL,uGCxG3D0L,GAAWC,aAAW,SAAAC,GAAK,MAAK,CACpCC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChB3E,WAAY,SACZ4E,UAAW,SACXC,MAAO,IACPC,WAAY,WAEdC,WAAY,CACVD,WAAY,UACZD,MAAO,QAETG,MAAO,CACLC,UAAW,MACXC,aAAc,OAEhBC,UAAW,CACTC,QAAS,OAEXC,MAAO,CACLjP,OAAQ,WAIG,SAASkP,GAASvR,GAG/B,IAAMnB,EAAOkC,YAAY,SAAAC,GAAK,OAAIA,EAAMnC,OAClC3B,EAAWiE,cAETyB,EAAiC5C,EAAjC4C,SAAU4O,EAAuBxR,EAAvBwR,mBACZC,EAAUnB,KAPsB9M,EAQAC,mBAAS,IARTC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAQ/BkO,EAR+BhO,EAAA,GAQlBiO,EARkBjO,EAAA,GA0BtC,OACEtD,EAAArD,EAAAsD,cAACkM,GAAA,EAAD,CAAMnL,UAAWqQ,EAAQhB,MACvBrQ,EAAArD,EAAAsD,cAAA,OAAKe,UAAWqQ,EAAQT,YACtB5Q,EAAArD,EAAAsD,cAAA,OAAK6B,IAAKC,gCAAsCC,IAAI,YAAYhB,UAAWqQ,EAAQR,QACnF7Q,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQmK,cAAY,GAAE9J,IAE5CxC,EAAArD,EAAAsD,cAAA,OAAKe,UAAWqQ,EAAQL,WACtBhR,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,uBACHuH,MAAK,kBACL2C,YAAW,aAAAlS,OAAemF,GAC1BqK,MAAOyE,EACPxE,SAAU,SAACtI,GAAD,OAAO+M,EAAe/M,EAAEuI,OAAOF,QACzCG,WAAY,SAACxI,GAAD,OA5BG,SAACA,EAAG6G,GACX,UAAV7G,EAAE9C,KACJ2J,IA0BuBD,CAAe5G,EAAG,kBArBZ,SAAC8M,EAAa9O,GAC7C,IAAMoM,EAAM,CAAEc,KAAQjR,EAAK+D,SAAUoM,IAAO0C,EAAa3B,GAAMnN,GAC/D1F,EAASjB,EAAmB+S,IAC5B9R,EAASuB,EAAW,SACpBvB,EAAS0B,EAAaoQ,EAAIe,GAAGzK,gBAC7BkM,GAAmB,GAgB8BI,CAAyBF,EAAa9O,MACjFL,QAAQ,WACRsP,WAAY,CACVzQ,UAAWqQ,EAAQH,OAErBQ,gBAAiB,CACfC,QAAQ,OCtEL,SAASC,KAAiB,IAE/BC,EAAmBlR,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAA5DgR,eAF+BzO,EAKOC,oBAAS,GALhBC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAKhC0O,EALgCxO,EAAA,GAKf8N,EALe9N,EAAA,GAAAI,EAMPL,mBAAS,IANFM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAMhClB,EANgCmB,EAAA,GAMtBoO,EANsBpO,EAAA,GAAAG,EAOPT,mBAAS,MAPFU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAOhCwB,EAPgCvB,EAAA,GAOtBiO,EAPsBjO,EAAA,GAqBvC,OACE/D,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,uBACbhB,EAAArD,EAAAsD,cAACgB,EAAA,EAAD,CAAMD,UAAU,cACdhB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUF,UAAU,oBAApB,kBACC6Q,EAAe1Q,IAAI,SAAA1C,GAClB,OACEuB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUS,QAAM,EAACX,UAAU,iBAAiBY,QAAS,SAAA4C,GAAC,OAjBxC,SAACA,EAAQhC,GAC/BuP,EAAYvP,GACZ4O,GAAmB,GACnBY,EAAYxN,EAAEC,eAcoDwN,CAAgBzN,EAAG/F,EAAKyT,aAChFlS,EAAArD,EAAAsD,cAACmC,EAAA,EAAD,CAAgBpB,UAAU,qBACxBhB,EAAArD,EAAAsD,cAAC4B,EAAA,EAAD,KACE7B,EAAArD,EAAAsD,cAAA,OAAK6B,IAAKC,gCAAsCC,IAAI,YAAYC,OAAO,OACvEjC,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,uBAGnBhB,EAAArD,EAAAsD,cAACqC,EAAA,EAAD,KAAe7D,EAAKyT,eAM5BlS,EAAArD,EAAAsD,cAACkS,GAAA,EAAD,CACE9M,GAAG,YACHlF,KAAM2R,EACNxM,SAAUA,EACVE,QA3BqB,WACzB4L,GAAmB,GACnBY,EAAY,OA0BR5R,aAAc,CACZC,SAAU,SACVC,WAAY,UAGdN,EAAArD,EAAAsD,cAACkR,GAAD,CAAU3O,SAAUA,EAAU4O,mBAAoBA,MC1C3C,SAASgB,KAEtB,IAAMvP,EAAYlC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACnD4F,EAA4C5D,EAA5C4D,cAAe2H,EAA6BvL,EAA7BuL,aAAcZ,EAAe3K,EAAf2K,WAHNpK,EAMyBC,oBAAS,GANlCC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAMxBiP,EANwB/O,EAAA,GAMFgP,EANEhP,EAAA,GAAAI,EAO2BL,oBAAS,GAPpCM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAOxB6O,EAPwB5O,EAAA,GAOD6O,EAPC7O,EAAA,GAAAG,EAQLT,mBAAS,IARJU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAQxBe,EARwBd,EAAA,GAQjB0O,EARiB1O,EAAA,GAmB/B,OARAG,oBAAU,WACW,YAAfsJ,EACFiF,EAAShM,EAAcxI,MAAM,KAAK,GAAGiH,eACb,SAAfsI,GACTiF,EAASrE,IAEV,CAACZ,EAAYY,EAAc3H,IAG5BzG,EAAArD,EAAAsD,cAACyS,GAAA,EAAD,CAAQC,SAAS,SAAS3R,UAAU,UAClChB,EAAArD,EAAAsD,cAAC2S,GAAA,EAAD,CAAS5R,UAAU,UACjBhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CACE8N,KAAK,QACL7G,MAAM,UACNsD,aAAW,OACXtO,UAAU,qBACVY,QAAS,kBAAM0Q,GAAwB,KAEvCtS,EAAArD,EAAAsD,cAAC6S,GAAAnW,EAAD,OAEFqD,EAAArD,EAAAsD,cAAC8S,GAAA,EAAD,CACEC,OAAO,OACP7S,KAAMkS,EACN7M,QAAS,kBAAM8M,GAAwB,IACvCW,OAAQ,kBAAMX,GAAwB,KAEtCtS,EAAArD,EAAAsD,cAACsN,GAAD,CAASvK,iBAAkBsP,KAE7BtS,EAAArD,EAAAsD,cAAC8S,GAAA,EAAD,CACEC,OAAO,QACP7S,KAAMoS,EACN/M,QAAS,kBAAMgN,GAAyB,IACxCS,OAAQ,kBAAMT,GAAyB,KAEvCxS,EAAArD,EAAAsD,cAAC2R,GAAD,OAEF5R,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,MAAM0C,EAA1B,KACA7E,EAAArD,EAAAsD,cAACiT,GAAA,EAAD,CAAMC,KAAK,kDAAkDpG,OAAO,SAASI,MAAO,CAAEnB,MAAO,UAC3FhM,EAAArD,EAAAsD,cAAC2E,EAAA,EAAD,CAASC,MAAM,0BAA0B7D,UAAU,WACjDhB,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,KACE/E,EAAArD,EAAAsD,cAACmT,GAAA,EAAD,KACEpT,EAAArD,EAAAsD,cAAA,QAAMoT,EAAE,4vBCxCT,SAASC,KAEtB,IAAMzQ,EAAYlC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OACnDkC,EAA0DF,EAA1DE,aAAc0D,EAA4C5D,EAA5C4D,cAAe+G,EAA6B3K,EAA7B2K,WAAYY,EAAiBvL,EAAjBuL,aAHhBhL,EAMaC,oBAAS,GANtBC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAM1B0O,EAN0BxO,EAAA,GAMT8N,EANS9N,EAAA,GAAAI,EAOOL,mBAAS,IAPhBM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAO1B6P,EAP0B5P,EAAA,GAOZ6P,EAPY7P,EAAA,GAAAG,EAQOT,oBAAS,GARhBU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAQ1B2P,EAR0B1P,EAAA,GAQZ2P,EARY3P,EAAA,GAAAiD,EASD3D,mBAAS,IATR4D,EAAAzK,OAAA+G,EAAA,EAAA/G,CAAAwK,EAAA,GAS1BxE,EAT0ByE,EAAA,GAShB8K,EATgB9K,EAAA,GAAAG,EAUD/D,mBAAS,MAVRgE,EAAA7K,OAAA+G,EAAA,EAAA/G,CAAA4K,EAAA,GAU1B9B,EAV0B+B,EAAA,GAUhB2K,EAVgB3K,EAAA,GAa7BsM,EAA4BC,SAASC,eAAe,2BACpDC,EAAsBF,SAASC,eAAe,qBAG9CE,EAA0B,GAC1BC,EAAiB,EACF,YAAfxG,GACFuG,EAAWlR,EAAU1D,QAAQ4D,GAAlB,SAA4C0D,GACvDuN,EAAiBD,EAAShO,cAITG,KAFjB6N,EAAWlR,EAAUnC,gBAAgB0N,MAGnC2F,EAAW,IAEbC,EAAiBD,EAAShO,QAI5B7B,oBAAU,WACJyP,GAA6BG,IAC3BL,EACFK,EAAoBG,OAAO,EAAG,IAE9BN,EAA0BO,eAAe,CAAEC,MAAO,MAAOC,SAAU,aAGtE,CAACX,EAAcM,EAAUD,EAAqBH,IAGjD,IA0BMU,EAAa,SAAC5Y,GAClB,OAAOA,EAAQwC,MAAM,OAAO,IAIxBgU,EAAkB,SAACzN,EAAQhC,GAC/BuP,EAAYvP,GACZ4O,GAAmB,GACnBY,EAAYxN,EAAEC,gBAchB,OAJAP,oBAAU,WACRoQ,GAAGC,gBAIHvU,EAAArD,EAAAsD,cAAA,OACEoF,GAAG,oBACHrE,UAAU,qBACVwT,SAAU,SAAAhQ,GAAC,OA9CS,SAACA,GACvB,IAAMiQ,EAAUjQ,EAAEuI,OACd0H,EAAQC,UAAY,IACtBhB,GAAgB,GAEQ,IAAtBe,EAAQC,WACNV,EAAiBT,GACnB/S,WAAW,WACTkT,GAAgB,GAEdF,EADED,EAAe,GAAKS,EACNA,EAEAT,EAAe,KAEhC,KAgCUoB,CAAgBnQ,IAC/BoQ,IAAK,SAAAH,GAAO,OAAKX,EAAsBW,IAEtCT,GAAkBT,EACjBvT,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,sBACbhB,EAAArD,EAAAsD,cAAC4U,GAAA,EAAD,CAAkB7I,MAAM,aAExB,KACJhM,EAAArD,EAAAsD,cAACgB,EAAA,EAAD,KACgB,OAAb8S,EACGA,EAASe,MAAMd,EAAiBT,EAAcS,GAAgB7S,IAAI,SAAC1F,EAAS4F,GAE1E,OACErB,EAAArD,EAAAsD,cAAC8U,GAAA,EAAD,CAAMvT,IAAI,EAAMC,QAAS,KACvBzB,EAAArD,EAAAsD,cAACiB,EAAA,EAAD,CAAUF,UAAU,UAAUU,IAAKL,GACjCrB,EAAArD,EAAAsD,cAACmC,EAAA,EAAD,CAAgBpB,UAAU,qBACxBhB,EAAArD,EAAAsD,cAAC4B,EAAA,EAAD,KACE7B,EAAArD,EAAAsD,cAAA,OACE2B,QAAS,SAAA4C,GAAC,OAAIyN,EAAgBzN,EAAG/I,EAAQiU,OACzC5N,IAAKC,gCACLC,IAAI,YACJC,OAAO,SAzEP,SAACxG,GACvB,SAAIA,EAAQuZ,WAAW,SAAUvZ,EAAQwZ,SAAS,QA4EjCC,CAAgBzZ,EAAQmT,KACvB5O,EAAArD,EAAAsD,cAACqC,EAAA,EAAD,CACEC,QACEvC,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,eAAeY,QAAS,SAAA4C,GAAC,OAAIyN,EAAgBzN,EAAG/I,EAAQiU,QACpEjU,EAAQiU,KAAKxK,cACdlF,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,gBAAf,MAAA3D,OAAqC8X,KAAO1Z,EAAQ2Z,MAAMC,OAAO,UAGrEC,UACEtV,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,eACbhB,EAAArD,EAAAsD,cAAA,OAAKsV,wBAAyB,CAAEC,OAAQnB,EAAW5Y,EAAQmT,SAG/D5N,UAAU,iBAGZhB,EAAArD,EAAAsD,cAACqC,EAAA,EAAD,CACEC,QACEvC,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,eAAeY,QAAS,SAAA4C,GAAC,OAAIyN,EAAgBzN,EAAG/I,EAAQiU,QACpEjU,EAAQiU,KAAKxK,cACdlF,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,gBAAf,MAAA3D,OAAqC8X,KAAO1Z,EAAQ2Z,MAAMC,OAAO,UAGrEC,UAAW7Z,EAAQmT,IACnB5N,UAAU,qBAOtB,MAENhB,EAAArD,EAAAsD,cAAA,OAAK2U,IAAK,SAAAH,GAAO,OAAKd,EAA4Bc,GAAUpP,GAAG,4BAC/DrF,EAAArD,EAAAsD,cAACkS,GAAA,EAAD,CACE9M,GAAG,YACHlF,KAAM2R,EACNxM,SAAUA,EACVE,QA7EqB,WACzB4L,GAAmB,GACnBY,EAAY,OA4ER5R,aAAc,CACZC,SAAU,SACVC,WAAY,UAGdN,EAAArD,EAAAsD,cAACkR,GAAD,CAAU3O,SAAUA,EAAU4O,mBAAoBA,MCjL3C,SAASqE,KAEtB,IAAMhX,EAAOkC,YAAY,SAACC,GAAD,OAAuBA,EAAMnC,OAC9CsE,EAAiBpC,YAAY,SAACC,GAAD,OAAuBA,EAAMC,OAA1DkC,aACFjG,EAAWiE,cA2BjB,OAfAmD,oBAAU,WACHzF,EAAKiX,YAGR5Y,EAAS6B,EAAaF,EAAKG,SAZJ,SAArB+W,IACJ7Y,EAASgB,KACThB,EAAST,EAAqB0G,EAAa9E,MAAM,KAAK,KACtDuC,WAAWmV,EAAoB,KAU7BA,IAHAjW,EAAkBkW,KAAK,MAKxB,CAAC9Y,EAAU2B,EAAKiX,WAAYjX,EAAKG,SAGpCqQ,OAAO4G,iBAAiB,SAAU,WAChC,IAAIC,EAA0B,IAArB7G,OAAO8G,YAChBnC,SAASoC,gBAAgB7I,MAAM8I,YAAY,OAA3C,GAAA5Y,OAAsDyY,EAAtD,SAIA9V,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,aACbhB,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,kBACbhB,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,gBACbhB,EAAArD,EAAAsD,cAACsN,GAAD,OAGFvN,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,iBACbhB,EAAArD,EAAAsD,cAACmS,GAAD,MACApS,EAAArD,EAAAsD,cAACqT,GAAD,OAGFtT,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,kBACbhB,EAAArD,EAAAsD,cAAC2R,GAAD,OAGF5R,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,sBACbhB,EAAArD,EAAAsD,cAACiO,GAAD,iCCvCK,SAASgI,KAEtB,IAAMpZ,EAAWiE,cAFYqC,EAKSC,oBAAS,GALlBC,EAAA9G,OAAA+G,EAAA,EAAA/G,CAAA4G,EAAA,GAKtBsD,EALsBpD,EAAA,GAKTqD,EALSrD,EAAA,GAAAI,EAMkBL,mBAAS,QAN3BM,EAAAnH,OAAA+G,EAAA,EAAA/G,CAAAkH,EAAA,GAMtBkD,EANsBjD,EAAA,GAMPkD,EANOlD,EAAA,GAAAG,EAOaT,oBAAS,GAPtBU,EAAAvH,OAAA+G,EAAA,EAAA/G,CAAAsH,EAAA,GAOtBgD,EAPsB/C,EAAA,GAOPgD,EAPOhD,EAAA,GAAAiD,EAQsB3D,mBAAS,QAR/B4D,EAAAzK,OAAA+G,EAAA,EAAA/G,CAAAwK,EAAA,GAQtBE,EARsBD,EAAA,GAQLE,EARKF,EAAA,GAAAG,EASW/D,oBAAS,GATpBgE,EAAA7K,OAAA+G,EAAA,EAAA/G,CAAA4K,EAAA,GAStB+O,EATsB9O,EAAA,GASR+O,EATQ/O,EAAA,GAAAG,EAUoBnE,mBAAS,QAV7BoE,EAAAjL,OAAA+G,EAAA,EAAA/G,CAAAgL,EAAA,GAUtB6O,EAVsB5O,EAAA,GAUN6O,EAVM7O,EAAA,GAAAG,EAWGvE,mBAAS,IAXZwE,EAAArL,OAAA+G,EAAA,EAAA/G,CAAAoL,EAAA,GAWtBpF,EAXsBqF,EAAA,GAWZkK,EAXYlK,EAAA,GAAAG,EAYa3E,oBAAS,GAZtB4E,EAAAzL,OAAA+G,EAAA,EAAA/G,CAAAwL,EAAA,GAYtBuO,EAZsBtO,EAAA,GAYPuO,EAZOvO,EAAA,GAAAE,EAamB9E,mBAAS,IAb5B+E,EAAA5L,OAAA+G,EAAA,EAAA/G,CAAA2L,EAAA,GAatBsO,EAbsBrO,EAAA,GAaJsO,EAbItO,EAAA,GAAAuO,EAcGtT,mBAAS,IAdZuT,EAAApa,OAAA+G,EAAA,EAAA/G,CAAAma,EAAA,GActBE,EAdsBD,EAAA,GAcZE,GAdYF,EAAA,GAAAG,GAea1T,oBAAS,GAftB2T,GAAAxa,OAAA+G,EAAA,EAAA/G,CAAAua,GAAA,GAetBE,GAfsBD,GAAA,GAePE,GAfOF,GAAA,GAAAG,GAgBmB9T,mBAAS,IAhB5B+T,GAAA5a,OAAA+G,EAAA,EAAA/G,CAAA2a,GAAA,GAgBtBE,GAhBsBD,GAAA,GAgBJE,GAhBIF,GAAA,GAAAG,GAiBOlU,oBAAS,GAjBhBmU,GAAAhb,OAAA+G,EAAA,EAAA/G,CAAA+a,GAAA,GAiBtBE,GAjBsBD,GAAA,GAiBVE,GAjBUF,GAAA,GAoBvBG,GAAW,WACf9Q,EAAiB,QACjBF,GAAe,GACfI,GAAiB,GACjBI,EAAmB,SACnBiP,GAAgB,GAChBE,EAAkB,UAoBdlL,GAAiB,SAAC5G,EAAkBsB,GAC1B,UAAVtB,EAAE9C,KACJoE,KAKE8R,GAAiB,SAACpV,EAAkBqU,EAAkB/Q,GAC1D,IAAI+R,GAAQ,EACK,KAAbrV,GACFgU,GAAiB,GACjBE,EAAoB,wBACpBmB,GAAQ,GACHrB,GAAiB,GACpBK,EAAS9Q,OAAS,GACpBmR,IAAiB,GACjBI,GAAoB,kCACpBO,GAAQ,GACHX,IAAiB,GAEnBW,GACH/R,KAKEgS,GAAmB,eAAAvb,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAO2F,EAAkBqU,GAAzB,IAAA9Z,EAAAgb,EAAA,OAAArb,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGxBsF,EAAWwV,mBAAmBxV,GAC9BqU,EAAWmB,mBAAmBnB,GAJN5Z,EAAAE,KAAA,EAMD9B,EAAMoN,KAAN,yBAAApL,OAAoCmF,EAApC,cAAAnF,OAAyDwZ,IANxD,OAMlB9Z,EANkBE,EAAAK,KAOpBma,IACF/U,aAAauV,QAAQ,OAAQC,KAAKC,UAAUpb,EAASS,OAEvDV,EAASwC,EAAOvC,EAASS,OACzBkC,EAAkBkW,KAAK,cAXC3Y,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAyL,GAAAzL,EAAA,UAalB8a,EAAY9a,EAAAyL,GAAI3L,SAASS,QAE7BgZ,GAAiB,GACjBE,EAAoBqB,IAhBE,yBAAA9a,EAAAQ,SAAAZ,EAAA,kBAAH,gBAAAa,EAAA2B,GAAA,OAAA9C,EAAAoB,MAAAC,KAAAC,YAAA,GAsBnBua,GAAkB,eAAAvZ,EAAArC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAkC,EAAO0D,EAAkBqU,GAAzB,IAAA9Z,EAAAgb,EAAA,OAAArb,EAAAC,EAAAK,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAEzBqF,EAAWwV,mBAAmBxV,GAC9BqU,EAAWmB,mBAAmBnB,GAHL5X,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAMA9B,EAAM+B,IAAN,wBAAAC,OAAkCmF,EAAlC,cAAAnF,OAAuDwZ,IANvD,OAMjB9Z,EANiBkC,EAAA3B,KAOnBma,IACF/U,aAAauV,QAAQ,OAAQC,KAAKC,UAAUpb,EAASS,OAEvDV,EAASwC,EAAOvC,EAASS,OACzBkC,EAAkBkW,KAAK,cAXA3W,EAAA9B,KAAA,iBAAA8B,EAAA/B,KAAA,GAAA+B,EAAAyJ,GAAAzJ,EAAA,UAajB8Y,EAAY9Y,EAAAyJ,GAAI3L,SAASS,QAE7BgZ,GAAiB,GACjBE,EAAoBqB,GACpBb,IAAiB,GACjBI,GAAoBS,IAlBC,yBAAA9Y,EAAAxB,SAAAqB,EAAA,kBAAH,gBAAA+J,EAAAC,GAAA,OAAAjK,EAAAlB,MAAAC,KAAAC,YAAA,GAqNxB,OACEmC,EAAArD,EAAAsD,cAAA,OAAKe,UAAU,gBACbhB,EAAArD,EAAAsD,cAACqL,GAAA,EAAD,CAAOtK,UAAU,oBA7LjBhB,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAWqF,EAAepF,GAAIkF,EAAajF,QAAS,IAAK8J,cAAY,EAACC,eAAa,GACxFxL,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,GAAIH,GAAI,IACrB/L,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,mCAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpB/L,EAAArD,EAAAsD,cAACkM,GAAA,EAAD,CAAMnL,UAAU,aACdhB,EAAArD,EAAAsD,cAACmM,GAAA,EAAD,CAAgBxK,QAAS,kBAlGnCuF,EAAmB,QACnBN,EAAiB,SACjBE,GAAiB,QACjBJ,GAAe,KAgGH3G,EAAArD,EAAAsD,cAACoM,GAAA,EAAD,KACErM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUM,cAAY,GAArD,UAGAtM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAArC,yBAGAvM,EAAArD,EAAAsD,cAACuM,GAAA,EAAD,KACExM,EAAArD,EAAAsD,cAACyM,GAAA,EAAD,CAAU1L,UAAU,qBAEtBhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CAAQN,QAAQ,YAAY6J,MAAM,WAAlC,cAORhM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACI,GAAI,EAAGH,GAAI,IACpB/L,EAAArD,EAAAsD,cAACkM,GAAA,EAAD,CAAMnL,UAAU,aACdhB,EAAArD,EAAAsD,cAACmM,GAAA,EAAD,CAAgBxK,QAAS,kBA9GnC0U,EAAkB,QAClBzP,EAAiB,SACjBuP,GAAgB,QAChBzP,GAAe,KA4GH3G,EAAArD,EAAAsD,cAACoM,GAAA,EAAD,KACErM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,YAAYM,cAAY,GAAvD,SAGAtM,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,QAAQoK,WAAS,GAArC,mCAGAvM,EAAArD,EAAAsD,cAACuM,GAAA,EAAD,KACExM,EAAArD,EAAAsD,cAACoC,EAAA,EAAD,CAAQrB,UAAU,qBAEpBhB,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CAAQN,QAAQ,YAAY6J,MAAM,aAAlC,QACQ,WAcpBhM,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAW2F,EAAiB1F,GAAIsF,EAAerF,QAAS,IAAK8J,cAAY,EAACC,eAAa,GAC5FxL,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CAAYnD,QAAS+V,IACnB3X,EAAArD,EAAAsD,cAACoY,GAAA,EAAD,OAEFrY,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,mBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,WACHuH,MAAM,WACNC,MAAOrK,EACPqV,MAAOtB,EACP+B,WAAY7B,EACZ3J,SAAU,SAAAtI,GAAC,OAAIuN,EAAYvN,EAAEuI,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACb/K,QAAQ,WACR6K,WAAY,SAAAxI,GAAC,OACX4G,GAAe5G,EAAG,kBAChBoT,GAAepV,EAAUqU,EAAU,kBAAMiB,GAAoBtV,EAAUqU,WAK/E7W,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,WACHuH,MAAM,WACNlR,KAAK,WACLmR,MAAOgK,EACPgB,MAAOZ,GACPqB,WAAYjB,GACZvK,SAAU,SAAAtI,GAAC,OAAIsS,GAAYtS,EAAEuI,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACb/K,QAAQ,WACR6K,WAAY,SAAAxI,GAAC,OACX4G,GAAe5G,EAAG,kBAChBoT,GAAepV,EAAUqU,EAAU,kBAAMiB,GAAoBtV,EAAUqU,WAK/E7W,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAAA,0BACcD,EAAArD,EAAAsD,cAACsY,GAAA,EAAD,CAAU1L,MAAO4K,GAAY3K,SAAU,SAAAtI,GAAC,OAAIkT,GAAclT,EAAEuI,OAAOyL,aAEjFxY,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEN,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAMgW,GAAepV,EAAUqU,EAAU,kBAAMiB,GAAoBtV,EAAUqU,OAHxF,aAgBN7W,EAAArD,EAAAsD,cAACqB,EAAA,EAAD,CAAOC,UAAW8U,EAAgB7U,GAAI2U,EAAc1U,QAAS,IAAK8J,cAAY,EAACC,eAAa,GAC1FxL,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UACtD7L,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,IACb/L,EAAArD,EAAAsD,cAAC8E,EAAA,EAAD,CAAYnD,QAAS+V,IACnB3X,EAAArD,EAAAsD,cAACoY,GAAA,EAAD,OAEFrY,EAAArD,EAAAsD,cAACiC,EAAA,EAAD,CAAYC,QAAQ,KAAK6J,MAAM,UAAUC,MAAM,UAA/C,kBAIFjM,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,WACHuH,MAAM,WACNC,MAAOrK,EACPqV,MAAOtB,EACP+B,WAAY7B,EACZ3J,SAAU,SAAAtI,GAAC,OAAIuN,EAAYvN,EAAEuI,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACb/K,QAAQ,WACR6K,WAAY,SAAAxI,GAAC,OACX4G,GAAe5G,EAAG,kBAChBoT,GAAepV,EAAUqU,EAAU,kBAAMuB,GAAmB5V,EAAUqU,WAK9E7W,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,kBAC3BhB,EAAArD,EAAAsD,cAAC0M,GAAA,EAAD,CACEtH,GAAG,WACHuH,MAAM,WACNlR,KAAK,WACLmR,MAAOgK,EACPgB,MAAOZ,GACPqB,WAAYjB,GACZvK,SAAU,SAAAtI,GAAC,OAAIsS,GAAYtS,EAAEuI,OAAOF,QACpCI,OAAO,QACPC,aAAa,MACb/K,QAAQ,WACR6K,WAAY,SAAAxI,GAAC,OACX4G,GAAe5G,EAAG,kBAChBoT,GAAepV,EAAUqU,EAAU,kBAAMuB,GAAmB5V,EAAUqU,WAK9E7W,EAAArD,EAAAsD,cAACwL,GAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAI/K,UAAU,eAC3BhB,EAAArD,EAAAsD,cAAA,0BACcD,EAAArD,EAAAsD,cAACsY,GAAA,EAAD,CAAU1L,MAAO4K,GAAY3K,SAAU,SAAAtI,GAAC,OAAIkT,GAAclT,EAAEuI,OAAOyL,aAEjFxY,EAAArD,EAAAsD,cAACwC,EAAA,EAAD,CACEzB,UAAU,qBACVmB,QAAQ,YACR6J,MAAM,UACNpK,QAAS,kBAAMgW,GAAepV,EAAUqU,EAAU,kBAAMuB,GAAmB5V,EAAUqU,OAJvF,cCtRG4B,OAzBf,WAEE,IAAM3b,EAAWiE,cAYjB,OACEf,EAAArD,EAAAsD,cAACyY,EAAA,EAAD,CAAetI,MAAOA,IACpBpQ,EAAArD,EAAAsD,cAAC0Y,EAAA,EAAD,KAV0B,WAC5B,IAAIla,EAAOyZ,KAAKU,MAAMlW,aAAamW,QAAQ,SACvCpa,IACF3B,EAASwC,EAAOb,IAChBiB,EAAkBkW,KAAK,eAOpBkD,GACD9Y,EAAArD,EAAAsD,cAAC8Y,EAAA,EAAD,CAAOC,KAAK,aAAaC,OAAK,EAACC,UAAWzD,KAC1CzV,EAAArD,EAAAsD,cAAC8Y,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWhD,QAQnC9F,GAAQ+I,YAAe,CAC3BC,UAAW,CACTC,WAAY,CACVC,QAAS,CACPC,SAAU,OACVnM,gBAAiB,UAGrBoM,mBAAoB,CAClBC,KAAM,CACJrM,gBAAiB,UACjBpB,MAAO,UAGX0N,UAAW,CACTC,aAAc,CACZvM,gBAAiB,UACjBuF,SAAU,cAIhBiH,QAAS,CACPle,KAAM,OACN6G,QAAS,CACPsX,KAAM,WAERvE,UAAW,CACTuE,KAAM,YAGVC,WAAY,CACVC,WAAY,6CACZR,SAAU,GACVS,gBAAiB,IACjBC,kBAAmB,IACnBC,iBAAkB,4CCtDhBC,GAAe,CACnBhb,QAAS,CACPib,qBAAsB,CACpBtX,SAAU,CACRuX,qBAAsB,MAI5B3Z,gBAAiB,GACjBqC,aAAc,qBACd0D,cAAe,qBACfoL,eAAgB,GAChBrE,WAAY,UACZY,aAAc,QCxBV+L,GAAe,CACnBzE,YAAY,EACZ1R,SAAS,EACTpF,OAAQ,GACR4D,SAAU,aCJG8X,8BAA4B,CACzCzZ,KF0ByB,WAAyE,IAAxED,EAAwE/C,UAAAkI,OAAA,QAAAG,IAAArI,UAAA,GAAAA,UAAA,GAArDsc,GAAcI,EAAuC1c,UAAAkI,OAAA,EAAAlI,UAAA,QAAAqI,EAClG,OAAQqU,EAAO7e,MACb,KAAKN,EAAOof,uBAAZ,IAAAC,EAC6CF,EAAO3e,QAA5CO,EADRse,EACQte,OAAQH,EADhBye,EACgBze,QAAS0T,EADzB+K,EACyB/K,KAAMd,EAD/B6L,EAC+B7L,IAAKwG,EADpCqF,EACoCrF,KAClC,OAAO5Y,OAAAke,GAAA,EAAAle,CAAA,GACFoE,EADL,CAEEzB,QAAQ3C,OAAAke,GAAA,EAAAle,CAAA,GACHoE,EAAMzB,QADJ3C,OAAAme,GAAA,EAAAne,CAAA,GAEJL,EAFIK,OAAAke,GAAA,EAAAle,CAAA,GAGAoE,EAAMzB,QAAQhD,GAHd,CAIH2G,SAAStG,OAAAke,GAAA,EAAAle,CAAA,GACJoE,EAAMzB,QAAQhD,GAAQ2G,SADnBtG,OAAAme,GAAA,EAAAne,CAAA,GAELR,EAFK,GAAAqB,OAAAb,OAAAoe,GAAA,EAAApe,CAESoE,EAAMzB,QAAQhD,GAAd,SAAkCH,IAF3C,CAEqD,CAAE0T,KAAMA,EAAMd,IAAKA,EAAKwG,KAAMA,aAKnG,KAAKha,EAAOyf,+BACV,OAAIja,EAAMF,gBAAgB6Z,EAAO3e,QAAQ6C,MAChCjC,OAAAke,GAAA,EAAAle,CAAA,GACFoE,EADL,CAEEF,gBAAgBlE,OAAAke,GAAA,EAAAle,CAAA,GACXoE,EAAMF,gBADIlE,OAAAme,GAAA,EAAAne,CAAA,GAEZ+d,EAAO3e,QAAQ6C,KAFH,GAAApB,OAAAb,OAAAoe,GAAA,EAAApe,CAGRoE,EAAMF,gBAAgB6Z,EAAO3e,QAAQ6C,OAH7B,CAIX,CAAEiR,KAAM6K,EAAO3e,QAAQ8T,KAAMC,GAAI4K,EAAO3e,QAAQ+T,GAAIf,IAAK2L,EAAO3e,QAAQgT,IAAKwG,KAAMmF,EAAO3e,QAAQwZ,YAKxG5Y,OAAAke,GAAA,EAAAle,CAAA,GACKoE,EADL,CAEEF,gBAAgBlE,OAAAke,GAAA,EAAAle,CAAA,GACXoE,EAAMF,gBADIlE,OAAAme,GAAA,EAAAne,CAAA,GAEZ+d,EAAO3e,QAAQ6C,KAAO,CACrB,CAAEiR,KAAM6K,EAAO3e,QAAQ8T,KAAMC,GAAI4K,EAAO3e,QAAQ+T,GAAIf,IAAK2L,EAAO3e,QAAQgT,IAAKwG,KAAMmF,EAAO3e,QAAQwZ,WAI5G,KAAKha,EAAOa,YACV,OAAOO,OAAAke,GAAA,EAAAle,CAAA,GACFoE,EADL,CAEEzB,QAAQ3C,OAAAke,GAAA,EAAAle,CAAA,GACHoE,EAAMzB,QADJ3C,OAAAme,GAAA,EAAAne,CAAA,GAEJ+d,EAAO3e,QAAQO,OAFXK,OAAAke,GAAA,EAAAle,CAAA,GAGAoE,EAAMzB,QAAQob,EAAO3e,QAAQO,QAH7B,CAIH2G,SAAStG,OAAAke,GAAA,EAAAle,CAAA,GACJoE,EAAMzB,QAAQob,EAAO3e,QAAQO,QAAQ2G,SADlCtG,OAAAme,GAAA,EAAAne,CAAA,GAEL+d,EAAO3e,QAAQI,QAAU,WAKpC,KAAKZ,EAAOgB,WACV,OAAOI,OAAAke,GAAA,EAAAle,CAAA,GACFoE,EADL,CAEEzB,QAAQ3C,OAAAke,GAAA,EAAAle,CAAA,GACHoE,EAAMzB,QADJ3C,OAAAme,GAAA,EAAAne,CAAA,GAEJ+d,EAAO3e,QAAQO,OAAS,CACvB2G,SAAStG,OAAAme,GAAA,EAAAne,CAAA,GACN+d,EAAO3e,QAAQI,QAAU,SAKpC,KAAKZ,EAAOgE,iBACV,OAAO5C,OAAAke,GAAA,EAAAle,CAAA,GACFoE,EADL,CAEEzB,QAASob,EAAO3e,QAAQuD,QACxBuB,gBAAiB6Z,EAAO3e,QAAQ8E,gBAChCqC,aAAcvG,OAAO0C,KAAKqb,EAAO3e,QAAQuD,SAAS,GAClDsH,cAAejK,OAAO0C,KAAK0B,EAAMzB,QAAQ3C,OAAO0C,KAAKqb,EAAO3e,QAAQuD,SAAS,IAAI2D,UAAU,KAE/F,KAAK1H,EAAO8C,cACV,OAAO1B,OAAAke,GAAA,EAAAle,CAAA,GACFoE,EADL,CAEEmC,aAAcwX,EAAO3e,QACrB6K,cAAejK,OAAO0C,KAAK0B,EAAMzB,QAAQob,EAAO3e,SAASkH,UAAU,KAEvE,KAAK1H,EAAOgD,eACV,OAAO5B,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,EAAZ,CAAmB6F,cAAe8T,EAAO3e,UAC3C,KAAKR,EAAOmD,YACV,OAAO/B,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,EAAZ,CAAmB4M,WAAY+M,EAAO3e,QAASwS,aAAc5R,OAAO0C,KAAK0B,EAAMF,iBAAiB,KAClG,KAAKtF,EAAOsD,eACV,OAAOlC,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,EAAZ,CAAmBwN,aAAcmM,EAAO3e,UAC1C,KAAKR,EAAOmC,oBACV,OAAOf,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,EAAZ,CAAmBiR,eAAgB0I,EAAO3e,UAC5C,QACE,OAAOY,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,KEjHhBnC,KDKyB,WAAyE,IAAxEmC,EAAwE/C,UAAAkI,OAAA,QAAAG,IAAArI,UAAA,GAAAA,UAAA,GAArDsc,GAAcI,EAAuC1c,UAAAkI,OAAA,EAAAlI,UAAA,QAAAqI,EAClG,OAAQqU,EAAO7e,MACb,KAAKN,EAAOmE,QACV,OAAO/C,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,EAAZ,CAAmB8U,YAAY,EAAM9W,OAAQ2b,EAAO3e,QAAQgD,OAAQ4D,SAAU+X,EAAO3e,QAAQ4G,WAC/F,KAAKpH,EAAOqE,SACV,OAAOjD,OAAAke,GAAA,EAAAle,CAAA,GAAKoE,EAAZ,CAAmB8U,YAAY,EAAO9W,OAAQ,GAAI4D,SAAU,GAAIwB,SAAS,IAC3E,QACE,OAAOpD,qCEbb,ICJiCka,GDO3BC,GAAQC,uBAAYC,GAAUC,+BAAoBC,2BAAgBC,MCPvCN,GDKoC,yCCJ5D,SAACO,GACN,IAAIC,EAASC,KAAGT,IAKhB,OAAO,SAAC3d,GAAD,OAA+B,SAACod,GAErC,GAAIA,EAAO7e,OAASN,EAAOO,oBAA3B,CAMA,GAAI4e,EAAO7e,OAASN,EAAOU,4BAA3B,CAaA,GAPIye,EAAO7e,OAASN,EAAOmE,UACzB+b,EAAOE,KAAK,sBAAuBjB,EAAO3e,QAAQgD,QAuC1D,SAA6B0c,EAA+BD,GACnDC,EAAOG,GAAG,SAAU,SAAClB,GAEN,YAAhBA,EAAO7e,KACT2f,EAASve,SAAS,CAChBpB,KAAMN,EAAOof,uBACb5e,QAAS2e,EAAO3e,UAEO,oBAAhB2e,EAAO7e,MAChB2f,EAASve,SAAS,CAChBpB,KAAMN,EAAOyf,+BACbjf,QAAS2e,EAAO3e,YAjDL8f,CAAoBJ,EAAQD,IAKrCd,EAAO7e,OAASN,EAAOgE,iBAAkB,CAE3C,IAAID,EAAU3C,OAAO0C,KAAKqb,EAAO3e,QAAQuD,SACrCwc,EAAsB,GAC1Bxc,EAAQyc,QAAQ,SAACzf,EAAQkF,GACvBsa,EAAUta,GAAKlF,EAAO8B,MAAM,KAAK,KAInC0d,EAAUC,QAAQ,SAAAtf,GAChBgf,EAAOE,KAAK,YAAalf,KAK7B,GAAIie,EAAO7e,OAASN,EAAOgB,WAAY,CACrC,IAAIE,EAAWie,EAAO3e,QAAQO,OAAO8B,MAAM,KAAK,GAChDqd,EAAOE,KAAK,YAAalf,GAQ3B,OAJIie,EAAO7e,OAASN,EAAO2C,qBACzBud,EAAOE,KAAK,QAGPre,EAAKod,GArCVe,EAAOE,KAAK,8BAA+BjB,EAAO3e,cANlD0f,EAAOE,KAAK,sBAAuBjB,EAAO3e,gBDDlDigB,IAASC,OACP9b,EAAArD,EAAAsD,cAAC8b,EAAA,EAAD,CAAUhB,MAAOA,IACf/a,EAAArD,EAAAsD,cAAC+b,GAAD,OAEFpI,SAASC,eAAe","file":"static/js/main.23794b46.chunk.js","sourcesContent":["export enum ACTION {\r\n  RECEIVE_SOCKET_MESSAGE,\r\n  RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n  SEND_SOCKET_MESSAGE,\r\n  SEND_SOCKET_PRIVATE_MESSAGE,\r\n  ADD_SERVER,\r\n  ADD_PRIVATE_MESSAGE,\r\n  ADD_CHANNEL,\r\n  CHANGE_CHANNEL,\r\n  CHANGE_SERVER,\r\n  CHANGE_VIEW,\r\n  CHANGE_PM_USER,\r\n  UPDATE_ACTIVE_USERS,\r\n  UPDATE_ACTIVE_STATE,\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  GET_INITIAL_DATA\r\n}\r\n\r\nexport type ChatActionTypes =\r\n  | ReceiveMessageAction\r\n  | ReceivePrivateMessageAction\r\n  | AddChannelAction\r\n  | AddServerAction\r\n  | ChangeServerAction\r\n  | ChangeChannelAction\r\n  | ChangeViewAction\r\n  | ChangePmUserAction\r\n  | LoadUserDataAction\r\n  | UpdateActiveUsersAction;\r\n\r\nexport type SocketActions =\r\n  | SendMessageAction\r\n  | SendPrivateMessageAction\r\n  | SignInAction\r\n  | LoadUserDataAction\r\n  | AddServerAction\r\n  | UpdateActiveStateAction;\r\n\r\nexport type UserActionTypes = SignInAction | SignOutAction;\r\n\r\n/* Actions Types */\r\nexport type SendMessageAction = {\r\n  type: ACTION.SEND_SOCKET_MESSAGE;\r\n  payload: SendMessageData;\r\n};\r\n\r\nexport type ReceiveMessageAction = {\r\n  type: ACTION.RECEIVE_SOCKET_MESSAGE;\r\n  payload: ReceiveMessageData;\r\n};\r\n\r\nexport type SendPrivateMessageAction = {\r\n  type: ACTION.SEND_SOCKET_PRIVATE_MESSAGE;\r\n  payload: SendPrivateMessageData;\r\n};\r\n\r\nexport type ReceivePrivateMessageAction = {\r\n  type: ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE;\r\n  payload: ReceivePrivateMessageData;\r\n};\r\n\r\nexport type AddChannelAction = {\r\n  type: ACTION.ADD_CHANNEL;\r\n  payload: AddChannelData;\r\n};\r\n\r\nexport type AddServerAction = {\r\n  type: ACTION.ADD_SERVER;\r\n  payload: AddServerData;\r\n};\r\n\r\nexport type UpdateActiveUsersAction = {\r\n  type: ACTION.UPDATE_ACTIVE_USERS;\r\n  payload: { user_name: string }[];\r\n};\r\n\r\nexport type UpdateActiveStateAction = {\r\n  type: ACTION.UPDATE_ACTIVE_STATE;\r\n  payload: null;\r\n};\r\n\r\nexport type ChangeServerAction = {\r\n  type: ACTION.CHANGE_SERVER;\r\n  payload: string;\r\n};\r\n\r\nexport type ChangeChannelAction = {\r\n  type: ACTION.CHANGE_CHANNEL;\r\n  payload: string;\r\n};\r\n\r\nexport type ChangeViewAction = {\r\n  type: ACTION.CHANGE_VIEW;\r\n  payload: string;\r\n};\r\n\r\nexport type ChangePmUserAction = {\r\n  type: ACTION.CHANGE_PM_USER;\r\n  payload: string;\r\n};\r\n\r\nexport type LoadUserDataAction = {\r\n  type: ACTION.GET_INITIAL_DATA;\r\n  payload: LoadInitialData;\r\n};\r\n\r\nexport type SignInAction = {\r\n  type: ACTION.SIGN_IN;\r\n  payload: SignInData;\r\n};\r\n\r\nexport type SignOutAction = {\r\n  type: ACTION.SIGN_OUT;\r\n  payload: null;\r\n};\r\n\r\n/* Interfaces for Data coming into Action Creators */\r\n\r\nexport interface SendMessageData {\r\n  type: 'channelMessage';\r\n  server: string;\r\n  channel: string;\r\n  from: string;\r\n  msg: string;\r\n}\r\n\r\nexport interface SendPrivateMessageData {\r\n  type: 'privateMessage';\r\n  from: string;\r\n  to: string;\r\n  msg: string;\r\n}\r\n\r\nexport interface ReceiveMessageData {\r\n  server: string;\r\n  channel: string;\r\n  from: string;\r\n  msg: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface ReceivePrivateMessageData {\r\n  user: string;\r\n  from: string;\r\n  to: string;\r\n  msg: string;\r\n  date: Date;\r\n}\r\n\r\nexport interface AddChannelData {\r\n  server: string;\r\n  channel: string;\r\n}\r\n\r\nexport interface AddServerData {\r\n  server: string;\r\n  channel: string;\r\n}\r\n\r\nexport interface LoadInitialData {\r\n  servers: {\r\n    [serverName: string]: {\r\n      channels: {\r\n        [channelName: string]: { from: string; to: string; msg: string; date: Date }[];\r\n      };\r\n    };\r\n  };\r\n  privateMessages: {\r\n    [userPM: string]: { from: string; to: string; msg: string; user: string; date: Date }[];\r\n  };\r\n}\r\n\r\nexport interface SignInData {\r\n  userId: string;\r\n  userName: string;\r\n}\r\n","import axios from 'axios';\r\n\r\nconst baseUrl =\r\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com';\r\n\r\nexport default axios.create({\r\n  baseURL: baseUrl\r\n});\r\n","import axios from '../components/Api/api';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AnyAction } from 'redux';\r\n\r\nimport {\r\n  ACTION,\r\n  UpdateActiveStateAction,\r\n  ChangeServerAction,\r\n  ChangeChannelAction,\r\n  ChangeViewAction,\r\n  ChangePmUserAction,\r\n  LoadUserDataAction,\r\n  LoadInitialData,\r\n  SignInAction,\r\n  SignInData,\r\n  SignOutAction\r\n} from './types';\r\nimport {\r\n  SendMessageData,\r\n  ReceiveMessageData,\r\n  SendPrivateMessageData,\r\n  ReceivePrivateMessageData,\r\n  AddChannelData,\r\n  AddServerData\r\n} from './types';\r\nimport {\r\n  SendMessageAction,\r\n  ReceiveMessageAction,\r\n  SendPrivateMessageAction,\r\n  ReceivePrivateMessageAction,\r\n  AddChannelAction,\r\n  AddServerAction\r\n} from './types';\r\n\r\n// Action to send a message (Handled by socket middleware)\r\nexport const sendMessage = (message: SendMessageData): SendMessageAction => ({\r\n  type: ACTION.SEND_SOCKET_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add message to a channel (Handled by socket middleware)\r\nexport const receiveMessage = (message: ReceiveMessageData): ReceiveMessageAction => ({\r\n  type: ACTION.RECEIVE_SOCKET_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to send new private message (Handled by socket middleware)\r\nexport const sendPrivateMessage = (message: SendPrivateMessageData): SendPrivateMessageAction => ({\r\n  type: ACTION.SEND_SOCKET_PRIVATE_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to send new private message (Handled by socket middleware)\r\nexport const receivePrivateMessage = (message: ReceivePrivateMessageData): ReceivePrivateMessageAction => ({\r\n  type: ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add Channel to a Server\r\nexport const addChannel = (channel: AddChannelData): AddChannelAction => ({\r\n  type: ACTION.ADD_CHANNEL,\r\n  payload: channel\r\n});\r\n\r\n// Action to add Server to server list\r\nexport const addServer = (server: AddServerData): AddServerAction => ({\r\n  type: ACTION.ADD_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Get active user list in given server\r\nexport const updateActiveUserList = (serverId: string) => async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n  const response = await axios.get(`/server/activeusers?serverId=${serverId}`);\r\n  dispatch({ type: ACTION.UPDATE_ACTIVE_USERS, payload: response.data });\r\n};\r\n\r\n// Action creator to update active state (socket middleware)\r\nexport const updateActiveState = (): UpdateActiveStateAction => ({\r\n  type: ACTION.UPDATE_ACTIVE_STATE,\r\n  payload: null\r\n});\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server: string) => (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n  dispatch(updateActiveUserList(server.split('-')[1]));\r\n  dispatch<ChangeServerAction>({ type: ACTION.CHANGE_SERVER, payload: server });\r\n};\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (channel: string): ChangeChannelAction => ({\r\n  type: ACTION.CHANGE_CHANNEL,\r\n  payload: channel\r\n});\r\n\r\n// Action to change the current active view\r\nexport const changeView = (view: string): ChangeViewAction => ({\r\n  type: ACTION.CHANGE_VIEW,\r\n  payload: view\r\n});\r\n\r\n// Action to change active user we have private message open with\r\nexport const changePMUser = (user: string): ChangePmUserAction => ({\r\n  type: ACTION.CHANGE_PM_USER,\r\n  payload: user\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId: string) => async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get<LoadInitialData>(url);\r\n  // get active user list for first server\r\n  dispatch(updateActiveUserList(Object.keys(res.data.servers)[0].split('-')[1]));\r\n  dispatch<LoadUserDataAction>({ type: ACTION.GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n// On sign in\r\nexport const signIn = (user: SignInData): SignInAction => ({\r\n  type: ACTION.SIGN_IN,\r\n  payload: user\r\n});\r\n\r\n// On sign out\r\nexport const signOut = (): SignOutAction => ({\r\n  type: ACTION.SIGN_OUT,\r\n  payload: null\r\n});\r\n","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Slide, Button, Typography } from '@material-ui/core';\r\nimport { Person } from '@material-ui/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { signOut, changePMUser } from '../../actions';\r\nimport { StoreState } from '../../reducers';\r\n\r\nexport default function PrivateMessageUserList() {\r\n  // Get from Redux store\r\n  const { privateMessages } = useSelector((state: StoreState) => state.chat);\r\n  const user = useSelector((state: StoreState) => state.user);\r\n  const userList = Object.keys(privateMessages);\r\n  const dispatch = useDispatch();\r\n\r\n  // Signs the user out\r\n  const handleSignOut = () => {\r\n    localStorage.clear();\r\n    dispatch(signOut());\r\n  };\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">Home</ListItem>\r\n        {userList.map((userItem, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={i}>\r\n            <ListItem button className=\"user-item\" onClick={() => dispatch(changePMUser(userItem))}>\r\n              <Avatar>\r\n                {' '}\r\n                <img className=\"user\" src={process.env.PUBLIC_URL + '/user.png'} alt=\"user icon\" height=\"48\" />{' '}\r\n              </Avatar>\r\n              <Typography variant=\"body1\" className=\"user-list-name\">\r\n                {userItem}\r\n              </Typography>\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignOut}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  Tooltip,\r\n  IconButton,\r\n  Typography,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n  Slide,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { changeChannel, signOut } from '../../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\nimport { StoreState } from '../../reducers';\r\n\r\ninterface ChannelListProps {\r\n  setDrawerVisible?: (drawerVisible: boolean) => void;\r\n  setModalVisible: (modalVisible: boolean) => void;\r\n  setModalType: (modalType: string) => void;\r\n  handleSnackMessage: (response: string, pass: boolean) => void;\r\n}\r\n\r\nexport default function ChannelList(props: ChannelListProps) {\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector((state: StoreState) => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]['channels']);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state: StoreState) => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType, handleSnackMessage } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAnchorEl, setChannelAnchorEl] = useState(null);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // When user or active server changes, check if we are admin\r\n  useEffect(() => {\r\n    // Gets the status if we are admin of current server (allows us to change server settings)\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n\r\n    getAdmin();\r\n  }, [activeServer, user]);\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel: string) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== 'undefined') setDrawerVisible(false);\r\n  };\r\n\r\n  // Checks if only 1 channel, if so does not call callback to delete channel\r\n  const handleChannelDelete = (callBack: Function) => {\r\n    if (channels.length === 1) {\r\n      handleSnackMessage('Please delete the server if only 1 channel', false);\r\n    } else {\r\n      callBack();\r\n    }\r\n  };\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType: string) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (e: any, type: string) => {\r\n    if (type === 'server') setServerAnchorEl(e.currentTarget);\r\n    else if (type === 'channel') setChannelAnchorEl(e.currentTarget);\r\n  };\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAnchorEl(null);\r\n  };\r\n\r\n  // Signs the user out\r\n  const handleSignOut = () => {\r\n    localStorage.clear();\r\n    dispatch(signOut());\r\n  };\r\n\r\n  // Handles saving serverId to clipboard\r\n  const handleSaveClipboard = (text: string) => {\r\n    navigator.clipboard.writeText(text);\r\n    handleSnackMessage(`Server ID ${text} saved to clipboard`, false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ? (\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={e => handleSettingsClick(e, 'server')}>\r\n                  {' '}\r\n                  <MoreVert />{' '}\r\n                </IconButton>\r\n              </Tooltip>\r\n            </React.Fragment>\r\n          ) : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={e => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\">\r\n                <i className=\"channel-hashtag\">#</i>\r\n                {channel.split('-')[0].toLowerCase()}\r\n              </Typography>\r\n              {isAdmin ? (\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={e => handleSettingsClick(e, 'channel')}>\r\n                    {' '}\r\n                    <Settings className=\"channel-settings\" />{' '}\r\n                  </IconButton>\r\n                </Tooltip>\r\n              ) : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignOut}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu\r\n        id=\"server-settings-menu\"\r\n        anchorEl={serverAnchorEl}\r\n        open={Boolean(serverAnchorEl)}\r\n        onClick={handleClose}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={() => handleSaveClipboard(activeServer.split('-')[1])}>\r\n          {' '}\r\n          Server Id - {activeServer.split('-')[1]}{' '}\r\n        </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-delete')}> Delete Server </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu\r\n        id=\"channel-settings-menu\"\r\n        anchorEl={channelAnchorEl}\r\n        open={Boolean(channelAnchorEl)}\r\n        onClick={handleClose}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleChannelDelete(() => handleModalShow('channel-delete'))}>\r\n          {' '}\r\n          Delete Channel{' '}\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline, Home } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer, changeView } from '../../actions';\r\nimport { StoreState } from '../../reducers';\r\n\r\ninterface ServerListProps {\r\n  setModalVisible: (modalVisible: boolean) => void;\r\n  setModalType: (modalType: string) => void;\r\n}\r\n\r\nexport default function ServerList(props: ServerListProps) {\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector((state: StoreState) => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server: string) => {\r\n    dispatch(changeServer(server));\r\n  };\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  };\r\n\r\n  // Handles changing the view and calls callback function\r\n  const handleChangeView = (view: string, callBack?: Function) => {\r\n    dispatch(changeView(view));\r\n    if (callBack !== undefined) callBack();\r\n  };\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        <Tooltip title=\"Home\" key=\"home\" placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"home-icon\" onClick={() => handleChangeView('home')}>\r\n            <Home />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <div className=\"menu-seperator\" />\r\n\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton\r\n              className=\"server-icon\"\r\n              onClick={() => handleChangeView('servers', () => handleServerChange(server))}\r\n            >\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title=\"Create Server\" key=\"create-server\" placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleModalShow())}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, KeyboardEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Paper,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Slide,\r\n  TextField,\r\n  Grid\r\n} from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\nimport { StoreState } from '../../reducers';\r\n\r\ninterface ActionsModalProps {\r\n  handleSnackMessage: (response: string, pass: boolean) => void;\r\n  modalType: string;\r\n}\r\n\r\nexport default function ActionsModal(props: ActionsModalProps) {\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector((state: StoreState) => state.user);\r\n  const { activeServer, activeChannel } = useSelector((state: StoreState) => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleSnackMessage, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection]: any = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection]: any = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection]: any = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n  // Handles showing the Join Server window\r\n  const showhandleJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  };\r\n\r\n  // Handles showing the Create Server window\r\n  const showhandleCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  };\r\n\r\n  // Method to handle creation of servers\r\n  const handleCreateServer = async (serverName: string, userId: string) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${\r\n        response.data.server.split('-')[1]\r\n      } created`;\r\n      handleSnackMessage(message, false);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Method to handle joining of servers\r\n  const handleJoinServer = async (serverId: string, userId: string) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Method to handle renaming of servers\r\n  const handleRenameServer = async (serverName: string, serverId: string) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`\r\n      );\r\n      handleSnackMessage(response.data, true);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Method to handle deleting servers\r\n  const handleDeleteServer = async (serverId: string, userId: string) => {\r\n    try {\r\n      const response = await axios.delete(`/server/delete?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Method to handle creation of channels\r\n  const handleCreateChannel = async (channelName: string, server: string) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split(\r\n        '-'[1]\r\n      )} created`;\r\n      handleSnackMessage(message, false);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Method to handle renaming of channels\r\n  const handleRenameChannel = async (channelName: string, channelId: string) => {\r\n    try {\r\n      const response = await axios.post(\r\n        `/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${\r\n          activeServer.split('-')[1]\r\n        }&userId=${userId}`\r\n      );\r\n      handleSnackMessage(response.data, true);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Method to handle deleting of channels\r\n  const handleDeleteChannel = async (channelName: string, channelId: string) => {\r\n    try {\r\n      const response = await axios.delete(\r\n        `/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`\r\n      );\r\n      handleSnackMessage(response.data, true);\r\n    } catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  };\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e: KeyboardEvent, callbackMethod: Function) => {\r\n    if (e.key === 'Enter') {\r\n      callbackMethod();\r\n    }\r\n  };\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Another server? Wow you're popular!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showhandleCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>\r\n                    Create\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" paragraph>\r\n                    Create a server and invite all your buddies.\r\n                  </Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">\r\n                    Join a server\r\n                  </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showhandleJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>\r\n                    Join\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" paragraph>\r\n                    Join a friends server and pwn some noobs!\r\n                  </Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">\r\n                    Join a server\r\n                  </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Create a Server!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Enter a Server Name to create a server and get access to unlimited chat channels!{' '}\r\n            </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={e => setServerName(e.target.value)}\r\n              onKeyPress={e => handleKeyPress(e, () => handleCreateServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleCreateServer(serverName, userId)}\r\n            >\r\n              Create Server\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Rename Server\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Enter a new Server Name for Server - {activeServer.split('-')[0]}{' '}\r\n            </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={e => setServerName(e.target.value)}\r\n              onKeyPress={e => handleKeyPress(e, () => handleRenameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleRenameServer(serverName, activeServer.split('-')[1])}\r\n            >\r\n              Rename Server\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders a modal to delete a server\r\n  const renderServerDelete = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Delete Server\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Are you sure you want to delete - {activeServer.split('-')[0]}{' '}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ backgroundColor: 'green', marginRight: '8px' }}\r\n              onClick={() => handleDeleteServer(activeServer.split('-')[1], userId)}\r\n            >\r\n              Yes\r\n            </Button>\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ backgroundColor: 'red', marginLeft: '8px' }}\r\n              onClick={() => handleSnackMessage('Not deleting channel', false)}\r\n            >\r\n              No\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Join a Server!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Enter a the Server Id provided by your friend and start chatting right now!{' '}\r\n            </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={e => setServerId(e.target.value)}\r\n              onKeyPress={e => handleKeyPress(e, () => handleJoinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleJoinServer(serverId, userId)}\r\n            >\r\n              Join Server\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Create a Channel!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Enter a Channel Name for your new channel and start chatting right now!{' '}\r\n            </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={e => setChannelName(e.target.value)}\r\n              onKeyPress={e => handleKeyPress(e, () => handleCreateChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleCreateChannel(channelName, activeServer)}\r\n            >\r\n              Create Channel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Rename Chanel\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Enter a new Channel Name for Channel - {activeChannel.split('-')[0]}{' '}\r\n            </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={e => setChannelName(e.target.value)}\r\n              onKeyPress={e => handleKeyPress(e, () => handleRenameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleRenameChannel(channelName, activeChannel.split('-')[1])}\r\n            >\r\n              Rename Channel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction=\"left\" in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Delete Channel\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph>\r\n              {' '}\r\n              Are you sure you want to delete - {activeChannel.split('-')[0]}{' '}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ backgroundColor: 'green', marginRight: '8px' }}\r\n              onClick={() => handleDeleteChannel(channelName, activeChannel.split('-')[1])}\r\n            >\r\n              Yes\r\n            </Button>\r\n            <Button\r\n              className=\"modal-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ backgroundColor: 'red', marginLeft: '8px' }}\r\n              onClick={() => handleSnackMessage('Not deleting channel', false)}\r\n            >\r\n              No\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper>\r\n    );\r\n  else if (modalType === 'channel-create') {\r\n    return <Paper className=\"container-prompt\">{renderChannelCreate()}</Paper>;\r\n  } else if (modalType === 'server-rename') {\r\n    return <Paper className=\"container-prompt\">{renderServerRename()}</Paper>;\r\n  } else if (modalType === 'channel-rename') {\r\n    return <Paper className=\"container-prompt\">{renderChannelRename()}</Paper>;\r\n  } else if (modalType === 'channel-delete') {\r\n    return <Paper className=\"container-prompt\">{renderChannelDelete()}</Paper>;\r\n  } else if (modalType === 'server-delete') {\r\n    return <Paper className=\"container-prompt\">{renderServerDelete()}</Paper>;\r\n  } else return null;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport PrivateMessageUserList from './PrivateMessageUserList';\r\nimport ChannelList from './ChannelList';\r\nimport ServerList from './ServerList';\r\nimport ActionsModal from '../ActionsModal/ActionsModal';\r\nimport { loadUserData } from '../../actions';\r\nimport { StoreState } from '../../reducers';\r\n\r\ninterface SidebarProps {\r\n  setDrawerVisible?: (drawerVisible: boolean) => void;\r\n}\r\n\r\nexport default function Sidebar(props: SidebarProps) {\r\n  // Get from Redux Store\r\n  const user = useSelector((state: StoreState) => state.user);\r\n  const { activeView } = useSelector((state: StoreState) => state.chat);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent (Used when Sidebar is rendered by header on mobile)\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState('');\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleSnackMessage = (response: string, pass: boolean) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass) dispatch(loadUserData(user.userId));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <ServerList setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      {activeView === 'servers' ? (\r\n        <ChannelList\r\n          setDrawerVisible={setDrawerVisible}\r\n          setModalVisible={setModalVisible}\r\n          setModalType={setModalType}\r\n          handleSnackMessage={handleSnackMessage}\r\n        />\r\n      ) : (\r\n        <PrivateMessageUserList />\r\n      )}\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}\r\n      >\r\n        <ActionsModal handleSnackMessage={handleSnackMessage} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\nimport { Picker } from 'emoji-mart';\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\nimport { StoreState } from '../../reducers';\r\nimport { sendMessage, sendPrivateMessage } from '../../actions';\r\nimport { SendMessageData, SendPrivateMessageData } from '../../actions/types';\r\n\r\nexport default function SendMessage() {\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel, activeView, activePMUser } = useSelector((state: StoreState) => state.chat);\r\n  const { userName } = useSelector((state: StoreState) => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n  const [placeholderTitle, setPlaceholderTitle] = useState('');\r\n\r\n  // Check active view to determine where we send our messages\r\n  useEffect(() => {\r\n    if (activeView === 'servers') {\r\n      setPlaceholderTitle(activeChannel.split('-')[0]);\r\n    } else if (activeView === 'home') {\r\n      setPlaceholderTitle(activePMUser);\r\n    }\r\n  }, [activeView, activeChannel, activePMUser]);\r\n\r\n  // Checks is message is valid (not just spaces)\r\n  function isValidMessage(msg: string) {\r\n    let validMessage = true;\r\n    // Check if empty stirng\r\n    if (msg.trim() === '') validMessage = false;\r\n    return validMessage;\r\n  }\r\n\r\n  // Will format out multiple line breaks to 2 max\r\n  function formatMessage(msg: string) {\r\n    return msg.replace(/(\\r\\n|\\r|\\n){3,}/g, '$1\\n\\n');\r\n  }\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message: SendMessageData | SendPrivateMessageData) {\r\n    if (isValidMessage(message.msg)) {\r\n      message.msg = formatMessage(message.msg);\r\n      // Send message to server, or user\r\n      if (activeView === 'servers' && message.type === 'channelMessage') {\r\n        dispatch(sendMessage(message));\r\n      } else if (activeView === 'home' && message.type === 'privateMessage') {\r\n        dispatch(sendPrivateMessage(message));\r\n      }\r\n      setChatMessage('');\r\n    } else {\r\n      // throw some error\r\n    }\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e: any) {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      if (activeView === 'servers')\r\n        handleSubmit({\r\n          server: activeServer,\r\n          channel: activeChannel,\r\n          from: userName,\r\n          msg: chatMessage,\r\n          type: 'channelMessage'\r\n        });\r\n      else if (activeView === 'home')\r\n        handleSubmit({ from: userName, to: activePMUser, msg: chatMessage, type: 'privateMessage' });\r\n    }\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\r\n    if (e.target.value !== '\\n') setChatMessage(e.target.value);\r\n  }\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e: any) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = (e: any) => {\r\n    if (String(e.target.className).includes('send-message-emoji-menu')) setEmojiMenuVisible(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${placeholderTitle}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={e => handleOnChange(e)}\r\n          onKeyPress={e => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={emojiMenuVisible ? 'send-message-emoji-menu show' : 'send-message-emoji-menu hide'}>\r\n        <div className=\"emoji-wrapper\">\r\n          <Picker set=\"emojione\" onSelect={e => handleEmojiClick(e)} />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Typography, makeStyles, TextField } from '@material-ui/core';\r\nimport { sendPrivateMessage, changeView, changePMUser } from '../../actions';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  // Get state from redux store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const { userName, setUserInfoVisible } = props;\r\n  const classes = useStyle();\r\n  const [messageText, setMessageText] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const handleSendPrivateMessage = (messageText, userName) => {\r\n    const msg = { \"from\": user.userName, \"msg\": messageText, \"to\": userName };\r\n    dispatch(sendPrivateMessage(msg));\r\n    dispatch(changeView('home'));\r\n    dispatch(changePMUser(msg.to.toLowerCase()));\r\n    setUserInfoVisible(false);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={messageText}\r\n          onChange={(e) => setMessageText(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => handleSendPrivateMessage(messageText, userName))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Popover } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\nimport { StoreState } from '../../reducers';\r\n\r\nexport default function ActiveUserList() {\r\n  // Get user list from redux store\r\n  const { activeUserList } = useSelector((state: StoreState) => state.chat);\r\n\r\n  // Local state\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // Handles clicks for setting anchor to User Info (To private message)\r\n  const handleUserClick = (e: any, userName: string) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  };\r\n\r\n  // Closes popup of User Info\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <div className=\"user-list-container\">\r\n      <List className=\"users-list\">\r\n        <ListItem className=\"users-list-title\"> Active Users </ListItem>\r\n        {activeUserList.map(user => {\r\n          return (\r\n            <ListItem button className=\"user-list-item\" onClick={e => handleUserClick(e, user.user_name)}>\r\n              <ListItemAvatar className=\"message-user-icon\">\r\n                <Avatar>\r\n                  <img src={process.env.PUBLIC_URL + '/user.png'} alt=\"user icon\" height=\"48\" />\r\n                  <div className=\"user-list-online\"></div>\r\n                </Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText>{user.user_name}</ListItemText>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport ActiveUserList from '../ActiveUserList/ActiveUserList';\r\nimport { StoreState } from '../../reducers';\r\n\r\nexport default function Header() {\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector((state: StoreState) => state.chat);\r\n  const { activeChannel, activePMUser, activeView } = chatStore;\r\n\r\n  // Local state\r\n  const [sideBarDrawerVisible, setSideBarDrawerVisible] = useState(false);\r\n  const [userListDrawerVisible, setUserListDrawerVisible] = useState(false);\r\n  const [title, setTitle] = useState('');\r\n\r\n  // On active view change change title\r\n  useEffect(() => {\r\n    if (activeView === 'servers') {\r\n      setTitle(activeChannel.split('-')[0].toLowerCase());\r\n    } else if (activeView === 'home') {\r\n      setTitle(activePMUser);\r\n    }\r\n  }, [activeView, activePMUser, activeChannel]);\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"appbar\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n          className=\"menu-burger-button\"\r\n          onClick={() => setSideBarDrawerVisible(true)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={sideBarDrawerVisible}\r\n          onClose={() => setSideBarDrawerVisible(false)}\r\n          onOpen={() => setSideBarDrawerVisible(true)}\r\n        >\r\n          <Sidebar setDrawerVisible={setSideBarDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <SwipeableDrawer\r\n          anchor=\"right\"\r\n          open={userListDrawerVisible}\r\n          onClose={() => setUserListDrawerVisible(false)}\r\n          onOpen={() => setUserListDrawerVisible(true)}\r\n        >\r\n          <ActiveUserList />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\">{title} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon>\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText,\r\n  Fade,\r\n  Popover,\r\n  CircularProgress\r\n} from '@material-ui/core';\r\nimport moment from 'moment';\r\n//import Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\nimport { StoreState } from '../../reducers';\r\n\r\ninterface MessageList {\r\n  from: string;\r\n  to?: string;\r\n  msg: string;\r\n  date: Date;\r\n}\r\n\r\ndeclare var PR: any;\r\n\r\nexport default function Messages() {\r\n  // Get States from Redux Store\r\n  const chatStore = useSelector((state: StoreState) => state.chat);\r\n  const { activeServer, activeChannel, activeView, activePMUser } = chatStore;\r\n\r\n  // Local states\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [messageIndex, setMessageIndex] = useState(12);\r\n  const [loadMessages, setLoadMessages] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container (for keeping scroll to bottom of chat)\r\n  let messageContainerBottomRef = document.getElementById('messagesContainerBottom');\r\n  let messageContainerRef = document.getElementById('messagesContainer');\r\n\r\n  // Get message list from channel or from specific user\r\n  let messages: MessageList[] = [];\r\n  let messagesLength = 0;\r\n  if (activeView === 'servers') {\r\n    messages = chatStore.servers[activeServer]['channels'][activeChannel];\r\n    messagesLength = messages.length;\r\n  } else {\r\n    messages = chatStore.privateMessages[activePMUser];\r\n    // If no messages need to make empty array\r\n    if (messages === undefined) {\r\n      messages = [];\r\n    }\r\n    messagesLength = messages.length;\r\n  }\r\n\r\n  // Scroll to bottom of container if were not loading new messages\r\n  useEffect(() => {\r\n    if (messageContainerBottomRef && messageContainerRef) {\r\n      if (loadMessages) {\r\n        messageContainerRef.scroll(0, 60);\r\n      } else {\r\n        messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' });\r\n      }\r\n    }\r\n  }, [loadMessages, messages, messageContainerRef, messageContainerBottomRef]);\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message: string) => {\r\n    if (message.startsWith('```') && message.endsWith('```')) return true;\r\n    else return false;\r\n  };\r\n\r\n  // Handles to load more messages when scroll at top\r\n  const handleScrollTop = (e: any) => {\r\n    const element = e.target;\r\n    if (element.scrollTop > 60) {\r\n      setLoadMessages(false);\r\n    }\r\n    if (element.scrollTop === 0) {\r\n      if (messagesLength > messageIndex) {\r\n        setTimeout(() => {\r\n          setLoadMessages(true);\r\n          if (messageIndex + 12 > messagesLength) {\r\n            setMessageIndex(messagesLength);\r\n          } else {\r\n            setMessageIndex(messageIndex + 12);\r\n          }\r\n        }, 400);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Formats the code block\r\n  const formatCode = (message: string) => {\r\n    return message.split('```')[1];\r\n  };\r\n\r\n  // Handles clicks for setting anchor to User Info (To private message)\r\n  const handleUserClick = (e: any, userName: string) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  };\r\n\r\n  // Closes popup of User Info\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  // Load pretty print on every render change\r\n  useEffect(() => {\r\n    PR.prettyPrint();\r\n  });\r\n\r\n  return (\r\n    <div\r\n      id=\"messagesContainer\"\r\n      className=\"messages-container\"\r\n      onScroll={e => handleScrollTop(e)}\r\n      ref={element => (messageContainerRef = element)}\r\n    >\r\n      {messagesLength >= messageIndex ? (\r\n        <div className=\"progress-container\">\r\n          <CircularProgress color=\"primary\" />\r\n        </div>\r\n      ) : null}\r\n      <List>\r\n        {messages !== null\r\n          ? messages.slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\r\n              // Filter for null messages (dummy message on backend should fix...)\r\n              return (\r\n                <Fade in={true} timeout={500}>\r\n                  <ListItem className=\"message\" key={i}>\r\n                    <ListItemAvatar className=\"message-user-icon\">\r\n                      <Avatar>\r\n                        <img\r\n                          onClick={e => handleUserClick(e, message.from)}\r\n                          src={process.env.PUBLIC_URL + '/user.png'}\r\n                          alt=\"user icon\"\r\n                          height=\"48\"\r\n                        />\r\n                      </Avatar>\r\n                    </ListItemAvatar>\r\n                    {isTextCodeBlock(message.msg) ? (\r\n                      <ListItemText\r\n                        primary={\r\n                          <div className=\"message-user\" onClick={e => handleUserClick(e, message.from)}>\r\n                            {message.from.toLowerCase()}\r\n                            <div className=\"message-date\">{` - ${moment(message.date).format('LLL')}`}</div>\r\n                          </div>\r\n                        }\r\n                        secondary={\r\n                          <pre className=\"prettyprint\">\r\n                            <div dangerouslySetInnerHTML={{ __html: formatCode(message.msg) }}></div>\r\n                          </pre>\r\n                        }\r\n                        className=\"message-text\"\r\n                      />\r\n                    ) : (\r\n                      <ListItemText\r\n                        primary={\r\n                          <div className=\"message-user\" onClick={e => handleUserClick(e, message.from)}>\r\n                            {message.from.toLowerCase()}\r\n                            <div className=\"message-date\">{` - ${moment(message.date).format('LLL')}`}</div>\r\n                          </div>\r\n                        }\r\n                        secondary={message.msg}\r\n                        className=\"message-text\"\r\n                      />\r\n                    )}\r\n                  </ListItem>\r\n                </Fade>\r\n              );\r\n            })\r\n          : null}\r\n      </List>\r\n      <div ref={element => (messageContainerBottomRef = element)} id=\"messagesContainerBottom\"></div>\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData, updateActiveState, updateActiveUserList } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\nimport Messages from '../Messages/Messages';\r\nimport ActiveUserList from '../ActiveUserList/ActiveUserList';\r\nimport { StoreState } from '../../reducers';\r\n\r\nexport default function Dashboard() {\r\n  // Get State from Redux Store\r\n  const user = useSelector((state: StoreState) => state.user);\r\n  const { activeServer } = useSelector((state: StoreState) => state.chat);\r\n  const dispatch = useDispatch();\r\n\r\n  // Ping server every 5 minutes to update our active status\r\n  // Also fetches new list of active users in activeServer\r\n  const updateActiveStatus = () => {\r\n    dispatch(updateActiveState());\r\n    dispatch(updateActiveUserList(activeServer.split('-')[1]));\r\n    setTimeout(updateActiveStatus, 5 * 60000);\r\n  };\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    } else {\r\n      dispatch(loadUserData(user.userId));\r\n      updateActiveStatus();\r\n    } // eslint-disable-next-line\r\n  }, [dispatch, user.isSignedIn, user.userId]);\r\n\r\n  // Watches viewport height (fix for mobile address bar size)\r\n  window.addEventListener('resize', () => {\r\n    let vh = window.innerHeight * 0.01;\r\n    document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n  });\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <div className=\"grid-container\">\r\n        <div className=\"sidebar-grid\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"messages-grid\">\r\n          <Header />\r\n          <Messages />\r\n        </div>\r\n\r\n        <div className=\"user-list-grid\">\r\n          <ActiveUserList />\r\n        </div>\r\n\r\n        <div className=\"send-messages-grid\">\r\n          <SendMessage />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, KeyboardEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  Paper,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Slide,\r\n  TextField,\r\n  Grid,\r\n  IconButton,\r\n  Checkbox\r\n} from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection]: any = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection]: any = useState('left');\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection]: any = useState('left');\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState('');\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState('');\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  // Shows the main modal (sets transition directions and views to visible / non visible)\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  };\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  };\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  };\r\n\r\n  // Handles and checks keypress and calls the callback method\r\n  const handleKeyPress = (e: KeyboardEvent, callBack: Function) => {\r\n    if (e.key === 'Enter') {\r\n      callBack();\r\n    }\r\n  };\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName: string, userPass: string, callBack: Function) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    } else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    } else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  };\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const handleCreateAccount = async (userName: string, userPass: string) => {\r\n    try {\r\n      // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n      userName = encodeURIComponent(userName);\r\n      userPass = encodeURIComponent(userPass);\r\n\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    } catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handles login of account and calls sign in action\r\n  const handleLoginAccount = async (userName: string, userPass: string) => {\r\n    // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n    userName = encodeURIComponent(userName);\r\n    userPass = encodeURIComponent(userPass);\r\n\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    } catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Renders options to Create or Login to account\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Create an account, or sign in!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>\r\n                    Create\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" paragraph>\r\n                    Create a new account.\r\n                  </Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">\r\n                    Create\r\n                  </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>\r\n                    Login\r\n                  </Typography>\r\n                  <Typography variant=\"body1\" paragraph>\r\n                    Sign in to an existing account.\r\n                  </Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    Login{' '}\r\n                  </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders the form to create an account\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}>\r\n              <ArrowBack />\r\n            </IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Create Account\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              value={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={e => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={e =>\r\n                handleKeyPress(e, () =>\r\n                  handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))\r\n                )\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              value={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={e => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={e =>\r\n                handleKeyPress(e, () =>\r\n                  handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))\r\n                )\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={e => setRememberMe(e.target.checked)} />\r\n            </div>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))}\r\n            >\r\n              Create\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  // Renders the form to login to account\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}>\r\n              <ArrowBack />\r\n            </IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">\r\n              Login Account\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              value={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={e => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={e =>\r\n                handleKeyPress(e, () =>\r\n                  handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))\r\n                )\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              value={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={e => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={e =>\r\n                handleKeyPress(e, () =>\r\n                  handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))\r\n                )\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={e => setRememberMe(e.target.checked)} />\r\n            </div>\r\n            <Button\r\n              className=\"modal-login-button\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport './App.css';\r\nimport Dashboard from '../Dashboard/Dashboard';\r\nimport Auth from '../Auth/Auth';\r\nimport { signIn } from '../../actions';\r\nimport createHashHistory from '../../history';\r\n\r\nfunction App() {\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Check local storage if have login info\r\n  // Dispatch sign in action with our userId and redirect to dashboard\r\n  const checkLocalStorageAuth = () => {\r\n    let user = JSON.parse(localStorage.getItem('user')!);\r\n    if (user) {\r\n      dispatch(signIn(user));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <HashRouter>\r\n        {checkLocalStorageAuth()}\r\n        <Route path=\"/dashboard\" exact component={Dashboard} />\r\n        <Route path=\"/\" exact component={Auth} />\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: '14px',\r\n        backgroundColor: 'black'\r\n      }\r\n    },\r\n    MuiSnackbarContent: {\r\n      root: {\r\n        backgroundColor: '#202225',\r\n        color: 'white'\r\n      }\r\n    },\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: '#36393E',\r\n        position: 'absolute'\r\n      }\r\n    }\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: '#7289da'\r\n    },\r\n    secondary: {\r\n      main: '#3ca374'\r\n    }\r\n  },\r\n  typography: {\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontSize: 14,\r\n    fontWeightLight: 400,\r\n    fontWeightRegular: 500,\r\n    fontWeightMedium: 600\r\n  }\r\n});\r\n","import { ACTION, ChatActionTypes } from '../actions/types';\r\n\r\nexport interface ChatStore {\r\n  servers: {\r\n    [serverName: string]: {\r\n      channels: {\r\n        [channelName: string]: { from: string; msg: string; date: Date }[];\r\n      };\r\n    };\r\n  };\r\n  privateMessages: {\r\n    [userPM: string]: { from: string; to: string; msg: string; date: Date }[];\r\n  };\r\n  activeServer: string;\r\n  activeChannel: string;\r\n  activeUserList: { user_name: string }[];\r\n  activeView: string;\r\n  activePMUser: string;\r\n}\r\n\r\nconst initialState = {\r\n  servers: {\r\n    'Default-FANfDprXmt': {\r\n      channels: {\r\n        'general-0m5vBsRnfd': []\r\n      }\r\n    }\r\n  },\r\n  privateMessages: {},\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n  activeUserList: [],\r\n  activeView: 'servers',\r\n  activePMUser: 'none'\r\n};\r\n\r\nexport const chatReducer = (state: ChatStore = initialState, action: ChatActionTypes): ChatStore => {\r\n  switch (action.type) {\r\n    case ACTION.RECEIVE_SOCKET_MESSAGE:\r\n      let { server, channel, from, msg, date } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            channels: {\r\n              ...state.servers[server].channels,\r\n              [channel]: [...state.servers[server]['channels'][channel], { from: from, msg: msg, date: date }]\r\n            }\r\n          }\r\n        }\r\n      };\r\n    case ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE:\r\n      if (state.privateMessages[action.payload.user]) {\r\n        return {\r\n          ...state,\r\n          privateMessages: {\r\n            ...state.privateMessages,\r\n            [action.payload.user]: [\r\n              ...state.privateMessages[action.payload.user],\r\n              { from: action.payload.from, to: action.payload.to, msg: action.payload.msg, date: action.payload.date }\r\n            ]\r\n          }\r\n        };\r\n      } else\r\n        return {\r\n          ...state,\r\n          privateMessages: {\r\n            ...state.privateMessages,\r\n            [action.payload.user]: [\r\n              { from: action.payload.from, to: action.payload.to, msg: action.payload.msg, date: action.payload.date }\r\n            ]\r\n          }\r\n        };\r\n    case ACTION.ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            channels: {\r\n              ...state.servers[action.payload.server].channels,\r\n              [action.payload.channel]: []\r\n            }\r\n          }\r\n        }\r\n      };\r\n    case ACTION.ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            channels: {\r\n              [action.payload.channel]: []\r\n            }\r\n          }\r\n        }\r\n      };\r\n    case ACTION.GET_INITIAL_DATA:\r\n      return {\r\n        ...state,\r\n        servers: action.payload.servers,\r\n        privateMessages: action.payload.privateMessages,\r\n        activeServer: Object.keys(action.payload.servers)[0],\r\n        activeChannel: Object.keys(state.servers[Object.keys(action.payload.servers)[0]].channels)[0]\r\n      };\r\n    case ACTION.CHANGE_SERVER:\r\n      return {\r\n        ...state,\r\n        activeServer: action.payload,\r\n        activeChannel: Object.keys(state.servers[action.payload].channels)[0]\r\n      };\r\n    case ACTION.CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload };\r\n    case ACTION.CHANGE_VIEW:\r\n      return { ...state, activeView: action.payload, activePMUser: Object.keys(state.privateMessages)[0] };\r\n    case ACTION.CHANGE_PM_USER:\r\n      return { ...state, activePMUser: action.payload };\r\n    case ACTION.UPDATE_ACTIVE_USERS:\r\n      return { ...state, activeUserList: action.payload };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { ACTION, UserActionTypes } from '../actions/types';\r\n\r\nexport interface UserStore {\r\n  isSignedIn: boolean;\r\n  isAdmin: boolean;\r\n  userId: string;\r\n  userName: string;\r\n}\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: '',\r\n  userName: ''\r\n};\r\n\r\nexport const userReducer = (state: UserStore = initialState, action: UserActionTypes): UserStore => {\r\n  switch (action.type) {\r\n    case ACTION.SIGN_IN:\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName };\r\n    case ACTION.SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: '', userName: '', isAdmin: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { chatReducer, ChatStore } from './chatReducer';\r\nimport { userReducer, UserStore } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport interface StoreState {\r\n  chat: ChatStore;\r\n  user: UserStore;\r\n}\r\n\r\nexport default combineReducers<StoreState>({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { socketMiddleware } from './middleware/socketMiddleware';\r\n\r\nconst baseUrl =\r\n  process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com';\r\n\r\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(thunk, socketMiddleware(baseUrl || ''))));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","import io from 'socket.io-client';\r\n\r\nimport { ACTION, SocketActions } from '../actions/types';\r\nimport { Dispatch } from 'react';\r\nimport { AnyAction, MiddlewareAPI } from 'redux';\r\n\r\nexport const socketMiddleware = (baseUrl: string) => {\r\n  return (storeAPI: MiddlewareAPI) => {\r\n    let socket = io(baseUrl);\r\n    // eslint-disable-next-line\r\n    let listener: SocketIOClient.Emitter;\r\n\r\n    // Check actions and emit from socket if needed\r\n    return (next: Dispatch<AnyAction>) => (action: SocketActions) => {\r\n      // Send message over socket\r\n      if (action.type === ACTION.SEND_SOCKET_MESSAGE) {\r\n        socket.emit('simple-chat-message', action.payload);\r\n        return;\r\n      }\r\n\r\n      // Send private message over socket\r\n      if (action.type === ACTION.SEND_SOCKET_PRIVATE_MESSAGE) {\r\n        socket.emit('simple-chat-private-message', action.payload);\r\n        return;\r\n      }\r\n\r\n      // Pull sign in action and login to send socket server our userId (identify individual socket connectins)\r\n      if (action.type === ACTION.SIGN_IN) {\r\n        socket.emit('simple-chat-sign-in', action.payload.userId);\r\n        listener = setupSocketListener(socket, storeAPI);\r\n      }\r\n\r\n      // Pull server list off initial data load\r\n      // Use to \"join\" our server \"rooms\"\r\n      if (action.type === ACTION.GET_INITIAL_DATA) {\r\n        // Get list of server Ids (used for \"room\" names on socket server)\r\n        let servers = Object.keys(action.payload.servers);\r\n        let serverIds: string[] = [];\r\n        servers.forEach((server, i) => {\r\n          serverIds[i] = server.split('-')[1];\r\n        });\r\n\r\n        // Subscribe to each server (Creates a room on socket io)\r\n        serverIds.forEach(serverId => {\r\n          socket.emit('subscribe', serverId);\r\n        });\r\n      }\r\n\r\n      // If user creates a server we need to join that room\r\n      if (action.type === ACTION.ADD_SERVER) {\r\n        let serverId = action.payload.server.split('-')[1];\r\n        socket.emit('subscribe', serverId);\r\n      }\r\n\r\n      // Updates our active state on server\r\n      if (action.type === ACTION.UPDATE_ACTIVE_STATE) {\r\n        socket.emit('ping');\r\n      }\r\n\r\n      return next(action);\r\n    };\r\n  };\r\n};\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server for specific events for messages / private messages\r\n// TODO listen for listen for types of Server + payload of message\r\nfunction setupSocketListener(socket: SocketIOClient.Socket, storeAPI: MiddlewareAPI): SocketIOClient.Emitter {\r\n  return socket.on('update', (action: any) => {\r\n    // Check for action type\r\n    if (action.type === 'message') {\r\n      storeAPI.dispatch({\r\n        type: ACTION.RECEIVE_SOCKET_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    } else if (action.type === 'private-message') {\r\n      storeAPI.dispatch({\r\n        type: ACTION.RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n  });\r\n}\r\n"],"sourceRoot":""}