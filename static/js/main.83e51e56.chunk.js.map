{"version":3,"sources":["actions/types.js","components/Api/api.js","actions/index.js","history.js","components/Sidebar/Servers.jsx","components/Sidebar/Channels.jsx","components/Modal/CreateJoinModal.jsx","components/SnackBar/SnackBarContent.jsx","components/Sidebar/Sidebar.jsx","components/UserInfo/UserInfo.jsx","components/Messages/Messages.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["ADD_MESSAGE","axios","create","baseURL","newMessage","message","type","payload","addChannel","data","addServer","changeServer","server","changeChannel","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","get","sent","stop","_x","apply","this","arguments","signIn","user","createHashHistory","Servers","props","chatStore","useSelector","state","chat","servers","keys","useDispatch","setModalVisible","setModalType","react_default","createElement","className","List","map","Tooltip","title","split","key","placement","IconButton","onClick","handleServerChange","GroupWork","AddCircleOutline","Channels","channels","activeServer","setDrawerVisible","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","serverId","response","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","ListItem","Fragment","e","MoreVert","channel","i","Slide","direction","in","timeout","handleChannelChange","button","Typography","variant","toLowerCase","Settings","ListItemAvatar","Avatar","Person","ListItemText","primary","userName","Menu","id","anchorEl","open","Boolean","onClose","MenuItem","CreateJoinModal","_useSelector2","activeChannel","handleModalSuccess","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","createServer","post","t0","_x2","joinServer","_ref2","_callee2","_context2","_x3","_x4","createChannel","_ref3","_callee3","_context3","_x5","_x6","renameServer","_ref4","_callee4","_context4","_x7","_x8","renameChannel","_ref5","_callee5","channelId","_context5","_x9","_x10","deleteChannel","_ref6","_callee6","_context6","delete","_x11","_x12","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","Button","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","SnackBarContent","content","visible","setVisible","Snackbar","anchorOrigin","vertical","horizontal","onEntered","setTimeout","Sidebar","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","Modal","aria-labelledby","aria-describedby","pass","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","height","UserInfo","classes","setMessage","src","process","alt","placeholder","InputProps","InputLabelProps","shrink","Messages","messageContainer","userInfoVisible","setUserInfoVisible","setUserName","setAnchorEl","scrollIntoView","formatCode","handleUserClick","msg","Fade","from","startsWith","endsWith","isTextCodeBlock","secondary","react_code_prettify_default","codeString","ref","element","Popover","SendMessage","_useSelector","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","shiftKey","window","onclick","String","includes","TextareaAutosize","aria-label","handleOnChange","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","Dashboard","isSignedIn","push","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","showMain","handleOnSubmit","callBack","error","length","createAccount","errorData","localStorage","setItem","JSON","stringify","loginAccount","ArrowBack","values","helperText","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","action","baseUrl","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","combineReducers","undefined","console","log","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.83e51e56.chunk.js","sourcesContent":["export const ADD_MESSAGE = 'ADD_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const NEW_MESSAGE = 'NEW_MESSAGE';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_channel';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com')\r\n});","import { NEW_MESSAGE, ADD_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA } from './types';\r\nimport axios from '../components/Api/api'\r\n\r\n\r\n// Action that socket middleware listens for\r\n// Emits via socket new message event\r\nexport const newMessage = (message) => ({\r\n  type: NEW_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n\r\n// Action to add message to a channel\r\nexport const addMessage = (message) => ({\r\n  type: ADD_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add channel to a server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n\r\n// On sign in, post to backend to create user if non existant\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer } from '../../actions';\r\n\r\n\r\nexport default function Servers(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleServerChange(server)}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleModalShow()}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide } from '@material-ui/core';\r\nimport { changeChannel } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\n\r\n\r\nexport default function Channels(props) {\r\n\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // Check if admin of active server\r\n  // Will render admin options for server\r\n  useEffect(() => {\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n    getAdmin();\r\n  }, [activeServer])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-delete')}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function CreateJoinModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleModalSuccess, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const createServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleModalSuccess(message, false);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const joinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const createChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleModalSuccess(message, false);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const renameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const renameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const deleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleModalSuccess(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleModalSuccess(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => joinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => joinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => createChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => createChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => renameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => renameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => deleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleModalSuccess('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport Servers from './Servers';\r\nimport Channels from './Channels'\r\nimport CreateJoinModal from '../Modal/CreateJoinModal';\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleModalSuccess = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <Servers setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Channels setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} />\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <CreateJoinModal handleModalSuccess={handleModalSuccess} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Card, CardHeader, Typography, CardMedia, CardContent, makeStyles, TextField } from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  const { userName } = props;\r\n  const classes = useStyle();\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const sendPrivateMessage = (message) => {\r\n\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => sendPrivateMessage(message))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade, Popover } from '@material-ui/core';\r\nimport Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel } = chatStore;\r\n\r\n  // Local state for user popover\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [userName, setUserName] = useState(null)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container\r\n  let messageContainer;\r\n\r\n  useEffect(() => {\r\n    // Keep scroll on bottom\r\n    messageContainer.scrollIntoView()\r\n  })\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message) => {\r\n    if (message.startsWith(\"```\") && message.endsWith(\"```\"))\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  // Formats the code block\r\n  const formatCode = (message) => {\r\n    return message.split('```')[1];\r\n  }\r\n\r\n  // Handles clicks for setting anchor\r\n  const handleUserClick = (e, userName) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  }\r\n\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"messages-container\">\r\n      <List>\r\n        {chatStore.servers[activeServer][activeChannel].map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          if (message.msg !== null)\r\n            return (\r\n              <Fade in={true} timeout={500}>\r\n                <ListItem className=\"message\" key={i}>\r\n                  <ListItemAvatar>\r\n                    <Avatar>\r\n                      <img className=\"user\" onClick={(e) => handleUserClick(e, message.from)} src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                    </Avatar>\r\n                  </ListItemAvatar>\r\n                  {isTextCodeBlock(message.msg)\r\n                    ? <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={<Code codeString={formatCode(message.msg)} />} className=\"message-text\" />\r\n                    : <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from}</div>} secondary={message.msg} className=\"message-text\" />\r\n                  }\r\n                </ListItem>\r\n              </Fade>\r\n\r\n            )\r\n          else return null;\r\n        })}\r\n      </List>\r\n      <div ref={(element) => messageContainer = element}></div>\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} />\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { addMessage, newMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    dispatch(newMessage(message));\r\n    setChatMessage(\"\");\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey)\r\n      handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${activeChannel.split('-')[0]}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, Icon, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer]);\r\n  const { activeChannel } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => null}>\r\n          <Sidebar channels={channels} servers={servers} setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\"> <i className=\"channel-hashtag\">#</i>{activeChannel.split('-')[0].toLowerCase()} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon >\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport Messages from '../Messages/Messages';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n  return (\r\n    <div className=\"grid-container\">\r\n\r\n      <div className=\"sidebar-grid\">\r\n        <Sidebar />\r\n      </div>\r\n\r\n      <div className=\"messages-grid\">\r\n        <Header />\r\n        <Messages />\r\n      </div>\r\n\r\n      <div className=\"send-messages-grid\">\r\n        <SendMessage />\r\n      </div>\r\n\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid, IconButton } from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection] = useState('left')\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n\r\n\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  }\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const createAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const loginAccount = async (userName, userPass) => {\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders main screen to create or login\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders create account form\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit >\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => createAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => loginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createMuiTheme } from '@material-ui/core/styles'\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport './App.css';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Auth from '../Auth/Auth';\nimport { signIn } from '../../actions';\nimport createHashHistory from '../../history';\n\nfunction App() {\n\n  // Dispatch \n  const dispatch = useDispatch();\n\n  const checkLocalStorageAuth = () => {\n    // Check local storage if we logged in and force login\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      dispatch(signIn(user));\n      createHashHistory.push('/dashboard');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        {checkLocalStorageAuth()}\n        <Route path=\"/dashboard\" exact component={Dashboard} />\n        <Route path=\"/\" exact component={Auth} />\n      </HashRouter>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: \"14px\",\n        backgroundColor: 'black'\n      }\n    },\n    MuiSnackbarContent: {\n      root: {\n        backgroundColor: '#202225',\n        color: 'white'\n      }\n    },\n    MuiAppBar: {\n      colorPrimary: {\n        backgroundColor: '#36393E',\n        position: 'absolute'\n      }\n    }\n  },\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#7289da'\n    },\n    secondary: {\n      main: '#3ca374'\n    }\n  },\n  typography: {\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    \"fontSize\": 14,\n    \"fontWeightLight\": 400,\n    \"fontWeightRegular\": 500,\n    \"fontWeightMedium\": 600\n  }\n\n});","import io from 'socket.io-client';\r\n\r\nimport { NEW_MESSAGE, ADD_MESSAGE, SIGN_IN } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n      if (action.type === NEW_MESSAGE) {\r\n        socket.emit('simple-chat-new-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-userId', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server\r\n// Action types of (Message, Channel)\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: ADD_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n  });\r\n}","import { ADD_MESSAGE, ADD_CHANNEL, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"general-0m5vBsRnfd\": [\r\n      ],\r\n      \"gaming-p9DnvvrfWo\": [\r\n      ],\r\n      \"programming-aRoD4umYpb\": [\r\n      ],\r\n      \"cooking-v88UngJkiD\": [\r\n      ],\r\n      \"misc-uSje5DwUH0\": [\r\n      ],\r\n      \"/b/-Ry06VYrX3x\": [\r\n      ]\r\n    }\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  console.log(action.payload);\r\n  switch (action.type) {\r\n    case ADD_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            [channel]: [\r\n              ...state.servers[server][channel], { from: from, msg: msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            [action.payload.channel]: [\r\n\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            [action.payload.channel]: [\r\n\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload, activeServer: Object.keys(action.payload)[0], activeChannel: Object.keys(action.payload[Object.keys(action.payload)[0]])[0] };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      console.log(action);\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}