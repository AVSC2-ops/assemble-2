{"version":3,"sources":["actions/types.js","components/Api/api.js","actions/index.js","history.js","components/SnackBar/SnackBarContent.jsx","components/Sidebar/PrivateMessageUserList.jsx","components/Sidebar/ChannelList.jsx","components/Sidebar/ServerList.jsx","components/ActionsModal/ActionsModal.jsx","components/Sidebar/Sidebar.jsx","components/SendMessage/SendMessage.jsx","components/Header/Header.jsx","components/UserInfo/UserInfo.jsx","components/Messages/Messages.jsx","components/Dashboard/Dashboard.jsx","components/Auth/Auth.jsx","components/App/App.js","middleware/socketMiddleware.js","reducers/chatReducer.jsx","reducers/userReducer.jsx","reducers/index.js","index.js"],"names":["RECEIVE_SOCKET_MESSAGE","RECEIVE_SOCKET_PRIVATE_MESSAGE","axios","create","baseURL","sendMessage","message","type","payload","sendPrivateMessage","addChannel","data","addServer","changeServer","server","changeChannel","changeView","view","changePMUser","user","loadUserData","userId","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","url","res","wrap","_context","prev","next","concat","get","sent","stop","_x","apply","this","arguments","signIn","signOut","createHashHistory","SnackBarContent","props","content","visible","setVisible","react_default","createElement","Snackbar","open","anchorOrigin","vertical","horizontal","onEntered","setTimeout","PrivateMessageUserList","privateMessages","useSelector","state","chat","userList","keys","useDispatch","className","List","ListItem","map","i","Slide","direction","in","timeout","key","button","onClick","Avatar","src","process","alt","height","Typography","variant","ListItemAvatar","Person","ListItemText","primary","userName","Button","localStorage","clear","ChannelList","chatStore","channels","servers","activeServer","setDrawerVisible","setModalVisible","setModalType","handleSnackMessage","_useState","useState","_useState2","slicedToArray","serverAnchorEl","setServerAnchorEl","_useState3","_useState4","channelAchorEl","setChannelAchorEl","_useState5","_useState6","isAdmin","setIsAdmin","useEffect","_getAdmin","serverId","response","split","getAdmin","handleModalShow","modalType","handleSettingsClick","event","currentTarget","handleClose","Fragment","Tooltip","title","placement","IconButton","e","MoreVert","channel","handleChannelChange","toLowerCase","Settings","Menu","id","anchorEl","Boolean","onClose","MenuItem","text","navigator","clipboard","writeText","callBack","length","ServerList","handleChangeView","undefined","Home","handleServerChange","GroupWork","AddCircleOutline","ActionsModal","_useSelector2","activeChannel","mainVisible","setMainVisible","mainDirection","setMainDirection","createVisible","setCreateVisible","_useState7","_useState8","createDirection","setCreateDirection","_useState9","_useState10","joinVisible","setJoinVisible","_useState11","_useState12","joinDirection","setJoinDirection","_useState13","_useState14","serverName","setServerName","_useState15","_useState16","setServerId","_useState17","_useState18","channelName","setChannelName","handleCreateServer","post","t0","_x2","handleJoinServer","_ref2","_callee2","_context2","_x3","_x4","handleRenameServer","_ref3","_callee3","_context3","_x5","_x6","handleDeleteServer","_ref4","_callee4","_context4","delete","_x7","_x8","handleCreateChannel","_ref5","_callee5","_context5","_x9","_x10","handleRenameChannel","_ref6","_callee6","channelId","_context6","_x11","_x12","handleDeleteChannel","_ref7","_callee7","_context7","_x13","_x14","handleKeyPress","callbackMethod","Paper","mountOnEnter","unmountOnExit","Grid","container","spacing","justify","alignItems","item","xs","color","align","sm","Card","CardActionArea","CardContent","gutterBottom","paragraph","CardMedia","AddToQueue","GroupAdd","TextField","label","value","onChange","target","onKeyPress","margin","autoComplete","style","backgroundColor","marginRight","marginLeft","Sidebar","activeView","modalVisible","snackContent","setSnackContent","snackVisible","setSnackVisible","pass","Modal","aria-labelledby","aria-describedby","SendMessage","_useSelector","activePMUser","chatMessage","setChatMessage","emojiMenuVisible","setEmojiMenuVisible","placeholderTitle","setPlaceholderTitle","handleSubmit","msg","trim","window","onclick","String","includes","TextareaAutosize","aria-label","placeholder","handleOnChange","shiftKey","from","to","SentimentVerySatisfied_default","dist_es","set","onSelect","native","handleEmojiClick","Header","drawerVisible","setTitle","AppBar","position","Toolbar","edge","Menu_default","SwipeableDrawer","anchor","onOpen","Link","href","SvgIcon","d","useStyle","makeStyles","theme","card","display","flexDirection","justifyContent","textAlign","width","background","cardHeader","image","marginTop","marginBottom","cardInput","padding","input","UserInfo","setUserInfoVisible","classes","messageText","setMessageText","handleSendPrivateMessage","InputProps","InputLabelProps","shrink","Messages","messageContainerBottomRef","messageContainerRef","userInfoVisible","messageIndex","setMessageIndex","loadMessages","setLoadMessages","setUserName","setAnchorEl","messages","messagesLength","scroll","scrollIntoView","block","behavior","formatCode","handleUserClick","onScroll","element","scrollTop","handleScrollTop","ref","CircularProgress","slice","Fade","startsWith","endsWith","isTextCodeBlock","secondary","react_code_prettify_default","codeString","Popover","Dashboard","isSignedIn","push","lib_default","Auth","loginVisible","setLoginVisible","loginDirection","setLoginDirection","userNameError","setUserNameError","userNameErrorMsg","setUserNameErrorMsg","_useState19","_useState20","userPass","setUserPass","_useState21","_useState22","userPassError","setUserPassError","_useState23","_useState24","userPassErrorMsg","setUserPassErrorMsg","_useState25","_useState26","rememberMe","setRememberMe","showMain","handleOnSubmit","error","handleCreateAccount","errorData","encodeURIComponent","setItem","JSON","stringify","handleLoginAccount","ArrowBack","values","helperText","Checkbox","checked","vale","App","ThemeProvider","react_router_dom","parse","getItem","checkLocalStorageAuth","react_router","path","exact","component","createMuiTheme","overrides","MuiTooltip","tooltip","fontSize","MuiSnackbarContent","root","MuiAppBar","colorPrimary","palette","main","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","setupSocketListener","socket","storeAPI","on","action","baseUrl","initialState","Default-FANfDprXmt","general-0m5vBsRnfd","gaming-p9DnvvrfWo","programming-aRoD4umYpb","cooking-v88UngJkiD","misc-uSje5DwUH0","/b/-Ry06VYrX3x","activeUsers","combineReducers","_action$payload","objectSpread","defineProperty","toConsumableArray","Math","floor","random","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","io","listener","emit","off","ReactDOM","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.9f2bf2fc.chunk.js","sourcesContent":["export const RECEIVE_SOCKET_MESSAGE = 'RECEIVE_SOCKET_MESSAGE';\r\nexport const RECEIVE_SOCKET_PRIVATE_MESSAGE = 'RECEIVE_SOCKET_PRIVATE_MESSAGE'\r\nexport const SEND_SOCKET_MESSAGE = 'SEND_SOCKET_MESSAGE';\r\nexport const SEND_SOCKET_PRIVATE_MESSAGE = 'SEND_SOCKET_PRIVATE_MESSAGE';\r\nexport const ADD_SERVER = 'ADD_SERVER';\r\nexport const ADD_PRIVATE_MESSAGE = 'ADD_PRIVATE_MESSAGE';\r\nexport const ADD_CHANNEL = 'ADD_CHANNEL';\r\nexport const CHANGE_SERVER = 'CHANGE_SERVER';\r\nexport const CHANGE_CHANNEL = 'CHANGE_CHANNEL';\r\nexport const CHANGE_VIEW = 'CHANGE_VIEW';\r\nexport const CHANGE_PM_USER = 'CHANGE_PM_USER';\r\nexport const SIGN_IN = 'SIGN_IN';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\nexport const GET_INITIAL_DATA = 'GET_INITIAL_DATA';","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com')\r\n});","import { SEND_SOCKET_MESSAGE, RECEIVE_SOCKET_MESSAGE, ADD_CHANNEL, ADD_SERVER, CHANGE_SERVER, CHANGE_CHANNEL, CHANGE_VIEW, SIGN_IN, SIGN_OUT, GET_INITIAL_DATA, CHANGE_PM_USER, SEND_SOCKET_PRIVATE_MESSAGE, RECEIVE_SOCKET_PRIVATE_MESSAGE } from './types';\r\nimport axios from '../components/Api/api'\r\n\r\n\r\n// Action to send a message (Handled by socket middleware)\r\nexport const sendMessage = (message) => ({\r\n  type: SEND_SOCKET_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to add message to a channel (Handled by socket middleware)\r\nexport const receiveMessage = (message) => ({\r\n  type: RECEIVE_SOCKET_MESSAGE,\r\n  payload: message\r\n});\r\n\r\n// Action to send new private message (Handled by socket middleware)\r\nexport const sendPrivateMessage = (message) => ({\r\n  type: SEND_SOCKET_PRIVATE_MESSAGE,\r\n  payload: message\r\n})\r\n\r\n// Action to send new private message (Handled by socket middleware)\r\nexport const receivePrivateMessage = (message) => ({\r\n  type: RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n  payload: message\r\n})\r\n\r\n// Action to add Channel to a Server\r\nexport const addChannel = (data) => ({\r\n  type: ADD_CHANNEL,\r\n  payload: data\r\n})\r\n\r\n// Action to add Server to server list\r\nexport const addServer = (data) => ({\r\n  type: ADD_SERVER,\r\n  payload: data\r\n})\r\n\r\n// Action to change the current Active Server\r\nexport const changeServer = (server) => ({\r\n  type: CHANGE_SERVER,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current Active Channel\r\nexport const changeChannel = (server) => ({\r\n  type: CHANGE_CHANNEL,\r\n  payload: server\r\n});\r\n\r\n// Action to change the current active view\r\nexport const changeView = (view) => ({\r\n  type: CHANGE_VIEW,\r\n  payload: view\r\n})\r\n\r\n// Action to change active user we have private message open with\r\nexport const changePMUser = (user) => ({\r\n  type: CHANGE_PM_USER,\r\n  payload: user\r\n})\r\n\r\n// Loads user Data. Gets all Servers + Channel History\r\nexport const loadUserData = (userId) => async dispatch => {\r\n  let url = `/user/data?userId=${userId}`;\r\n  const res = await axios.get(url);\r\n  dispatch({ type: GET_INITIAL_DATA, payload: res.data });\r\n};\r\n\r\n// On sign in\r\nexport const signIn = (user) => ({\r\n  type: SIGN_IN,\r\n  payload: user\r\n})\r\n\r\n// On sign out \r\nexport const signOut = (user) => ({\r\n  type: SIGN_OUT,\r\n  payload: user\r\n})","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import React from 'react'\r\nimport { Snackbar } from '@material-ui/core';\r\n\r\n// Snackbar that allows you to set the content, visibility \r\n// and change visibility from parent component\r\nexport default function SnackBarContent(props) {\r\n\r\n  const { content, visible, setVisible } = props;\r\n\r\n  // When opened, closes itself after 2.5sec\r\n  const handleSnackBarOpen = () => {\r\n    setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2500)\r\n  }\r\n\r\n  return (\r\n    <Snackbar\r\n      open={visible}\r\n      message={content}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'left'\r\n      }}\r\n      onEntered={() => handleSnackBarOpen()}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Slide, Button, Typography } from '@material-ui/core';\r\nimport { Person } from '@material-ui/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { signOut, changePMUser } from '../../actions';\r\n\r\nexport default function PrivateMessageUserList() {\r\n\r\n  // Get from Redux store\r\n  const { privateMessages } = useSelector(state => state.chat);\r\n  const user = useSelector(state => state.user);\r\n  const userList = Object.keys(privateMessages);\r\n  const dispatch = useDispatch();\r\n\r\n  // Signs the user out\r\n  const handleSignOut = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          Home\r\n        </ListItem>\r\n        {userList.map((user, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={i}>\r\n            <ListItem button className=\"user-item\" onClick={() => dispatch(changePMUser(user))}>\r\n              <Avatar> <img className=\"user\" src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" /> </Avatar>\r\n              <Typography variant=\"body1\" className=\"user-list-name\">{user}</Typography>\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignOut}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Person, MoreVert, Settings } from '@material-ui/icons';\r\nimport { List, ListItem, ListItemAvatar, Avatar, Tooltip, IconButton, Typography, ListItemText, Menu, MenuItem, Slide, Button } from '@material-ui/core';\r\nimport { changeChannel, signOut } from '../../actions';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from '../Api/api';\r\n\r\n\r\nexport default function ChannelList(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const channels = Object.keys(chatStore.servers[chatStore.activeServer][\"channels\"]);\r\n  const { activeServer } = chatStore;\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n\r\n  // Get props from parent\r\n  const { setDrawerVisible, setModalVisible, setModalType, handleSnackMessage } = props;\r\n\r\n  // Local state\r\n  const [serverAnchorEl, setServerAnchorEl] = useState(null);\r\n  const [channelAchorEl, setChannelAchorEl] = useState(null)\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  // When user or active server changes, check if we are admin\r\n  useEffect(() => {\r\n    // Gets the status if we are admin of current server (allows us to change server settings)\r\n    async function getAdmin() {\r\n      let serverId = activeServer.split('-')[1];\r\n      const response = await axios.get(`/server/admin?serverId=${serverId}&userId=${user.userId}`);\r\n      setIsAdmin(response.data);\r\n    }\r\n\r\n    getAdmin();\r\n  }, [activeServer, user])\r\n\r\n\r\n  // Handle channel change, and closes drawer if on mobile view\r\n  const handleChannelChange = (channel) => {\r\n    dispatch(changeChannel(channel));\r\n    if (typeof setDrawerVisible !== \"undefined\")\r\n      setDrawerVisible(false)\r\n  }\r\n\r\n  // Checks if only 1 channel, if so does not call callback to delete channel\r\n  const handleChannelDelete = (callBack) => {\r\n    if (channels.length === 1) {\r\n      handleSnackMessage(\"Please delete the server if only 1 channel\");\r\n    }\r\n    else {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = (modalType) => {\r\n    setModalType(modalType);\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles showing of Settings Menu\r\n  const handleSettingsClick = (event, type) => {\r\n    if (type === 'server')\r\n      setServerAnchorEl(event.currentTarget);\r\n    else if (type === 'channel')\r\n      setChannelAchorEl(event.currentTarget);\r\n  }\r\n\r\n  // Handles closing settings menu\r\n  const handleClose = () => {\r\n    setServerAnchorEl(null);\r\n    setChannelAchorEl(null)\r\n  }\r\n\r\n  // Signs the user out\r\n  const handleSignout = () => {\r\n    localStorage.clear(\"user\");\r\n    dispatch(signOut(user.userId));\r\n  }\r\n\r\n  // Handles saving serverId to clipboard\r\n  const handleSaveClipboard = (text) => {\r\n    navigator.clipboard.writeText(text);\r\n    handleSnackMessage(`Server ID ${text} saved to clipboard`, false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"channels-container\">\r\n      <List className=\"channel-list\">\r\n        <ListItem className=\"title-container\">\r\n          {activeServer.split('-')[0]}\r\n          {isAdmin ?\r\n            <React.Fragment>\r\n              <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                <IconButton onClick={(e) => handleSettingsClick(e, 'server')}> <MoreVert /> </IconButton>\r\n              </Tooltip>\r\n\r\n\r\n            </React.Fragment>\r\n            : null}\r\n        </ListItem>\r\n        {channels.map((channel, i) => (\r\n          <Slide direction=\"right\" in={true} timeout={200 * (i + 1)} key={channel + activeServer}>\r\n            <ListItem onClick={(e) => handleChannelChange(channel)} button className=\"channel-item\">\r\n              <Typography variant=\"body1\"><i className=\"channel-hashtag\">#</i>{channel.split('-')[0].toLowerCase()}</Typography>\r\n              {isAdmin ?\r\n                <Tooltip title=\"Server Settings\" key=\"server-settings\" placement=\"right\" className=\"tooltip\">\r\n                  <IconButton onClick={(e) => handleSettingsClick(e, 'channel')}> <Settings className=\"channel-settings\" /> </IconButton>\r\n                </Tooltip>\r\n                : null}\r\n            </ListItem>\r\n          </Slide>\r\n        ))}\r\n      </List>\r\n\r\n      <div className=\"user-options\">\r\n        <ListItem className=\"user-info\">\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <Person />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary={user.userName} />\r\n          <Button onClick={handleSignout}>Sign out</Button>\r\n        </ListItem>\r\n      </div>\r\n\r\n      <Menu id=\"server-settings-menu\" anchorEl={serverAnchorEl} open={Boolean(serverAnchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleSaveClipboard(activeServer.split('-')[1])}> Server Id - {activeServer.split('-')[1]} </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-rename')}> Change Server Name </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('server-delete')}> Delete Server </MenuItem>\r\n        <MenuItem onClick={() => handleModalShow('channel-create')}> Add Channel </MenuItem>\r\n      </Menu>\r\n\r\n      <Menu id=\"channel-settings-menu\" anchorEl={channelAchorEl} open={Boolean(channelAchorEl)} onClick={handleClose} onClose={handleClose}>\r\n        <MenuItem onClick={() => handleModalShow('channel-rename')}> Change Channel Name </MenuItem>\r\n        <MenuItem onClick={() => handleChannelDelete(() => handleModalShow('channel-delete'))}> Delete Channel </MenuItem>\r\n      </Menu>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { GroupWork, AddCircleOutline, Home } from '@material-ui/icons';\r\nimport { List, Tooltip, IconButton } from '@material-ui/core';\r\nimport { changeServer, changeView } from '../../actions';\r\n\r\n\r\nexport default function ServerList(props) {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const servers = Object.keys(chatStore.servers);\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent\r\n  const { setModalVisible, setModalType } = props;\r\n\r\n  // Handles server change, and closes drawer if on mobile view\r\n  const handleServerChange = (server) => {\r\n    dispatch(changeServer(server));\r\n  }\r\n\r\n  // Handles to show modal, and its type\r\n  const handleModalShow = () => {\r\n    setModalType('server-create-join');\r\n    setModalVisible(true);\r\n  }\r\n\r\n  // Handles changing the view and calls callback function\r\n  const handleChangeView = (view, callBack) => {\r\n    dispatch(changeView(view));\r\n    if (callBack !== undefined)\r\n      callBack();\r\n  }\r\n\r\n  return (\r\n    <div className=\"servers-container\">\r\n      <List>\r\n        <Tooltip title='Home' key='home' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"home-icon\" onClick={() => handleChangeView('home')}>\r\n            <Home />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <div className=\"menu-seperator\" />\r\n\r\n        {servers.map(server => (\r\n          <Tooltip title={server.split('-')[0]} key={server} placement=\"right\" className=\"tooltip\">\r\n            <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleServerChange(server))}>\r\n              <GroupWork />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ))}\r\n\r\n        <Tooltip title='Create Server' key='create-server' placement=\"right\" className=\"tooltip\">\r\n          <IconButton className=\"server-icon\" onClick={() => handleChangeView('servers', () => handleModalShow())}>\r\n            <AddCircleOutline />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </List>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid } from '@material-ui/core';\r\nimport { GroupAdd, AddToQueue } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport { addChannel, addServer } from '../../actions';\r\n\r\nexport default function ActionsModal(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { userId } = useSelector(state => state.user);\r\n  const { activeServer, activeChannel } = useSelector(state => state.chat);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // Get data from props\r\n  const { handleSnackMessage, modalType } = props;\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left');\r\n  const [joinVisible, setJoinVisible] = useState(false);\r\n  const [joinDirection, setJoinDirection] = useState('left');\r\n  const [serverName, setServerName] = useState('');\r\n  const [serverId, setServerId] = useState('');\r\n  const [channelName, setChannelName] = useState('');\r\n\r\n\r\n  // Handles showing the Join Server window\r\n  const showhandleJoinServer = () => {\r\n    setMainDirection('right');\r\n    setCreateDirection('left');\r\n    setJoinVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showhandleCreateServer = () => {\r\n    setMainDirection('right');\r\n    setJoinDirection('left');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Method to handle creation of servers\r\n  const handleCreateServer = async (serverName, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/create?serverName=${serverName}&userId=${userId}`);\r\n      dispatch(addServer(response.data));\r\n      const message = `Server ${response.data.server.split('-')[0]} with ID ${response.data.server.split('-')[1]} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle joining of servers\r\n  const handleJoinServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.post(`/server/join?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of servers\r\n  const handleRenameServer = async (serverName, serverId) => {\r\n    try {\r\n      const response = await axios.post(`/server/rename?serverName=${serverName}&serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting servers\r\n  const handleDeleteServer = async (serverId, userId) => {\r\n    try {\r\n      const response = await axios.delete(`/server/delete?serverId=${serverId}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle creation of channels\r\n  const handleCreateChannel = async (channelName, server) => {\r\n    try {\r\n      const response = await axios.post(`/channel/create?channelName=${channelName}&server=${server}&userId=${userId}`);\r\n      dispatch(addChannel(response.data));\r\n      const message = `Server ${response.data.channel.split('-')[0]} with ID ${response.data.channel.split('-'[1])} created`;\r\n      handleSnackMessage(message, false);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle renaming of channels\r\n  const handleRenameChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.post(`/channel/rename?channelName=${channelName}&channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Method to handle deleting of channels\r\n  const handleDeleteChannel = async (channelName, channelId) => {\r\n    try {\r\n      const response = await axios.delete(`/channel/delete?channelId=${channelId}&serverId=${activeServer.split('-')[1]}&userId=${userId}`);\r\n      handleSnackMessage(response.data, true);\r\n    }\r\n    catch (err) {\r\n      handleSnackMessage(err.response.data, false);\r\n    }\r\n  }\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  // Renders the Main Modal Window with options to Create / Join server\r\n  const renderMainServer = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={500} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Another server? Wow you're popular!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showhandleCreateServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a server and invite all your buddies.</Typography>\r\n                  <CardMedia>\r\n                    <AddToQueue className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showhandleJoinServer()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Join</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Join a friends server and pwn some noobs!</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\" className=\"modal-button\">Join a server</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Server Create Modal Window\r\n  const renderServerCreate = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Server Name to create a server and get access to unlimited chat channels! </Typography>\r\n            <TextField\r\n              id=\"create-server-field\"\r\n              label=\"Server Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleCreateServer(serverName, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleCreateServer(serverName, userId)}>Create Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal with an input\r\n  const renderServerRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Server Name for Server - {activeServer.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={serverName}\r\n              onChange={(e) => setServerName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleRenameServer(serverName, activeServer.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleRenameServer(serverName, activeServer.split('-')[1])}>Rename Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a server\r\n  const renderServerDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Server</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeServer.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => handleDeleteServer(activeServer.split('-')[1], userId)}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  // Renders the Server Join Modal Window\r\n  const renderServerJoin = () => {\r\n    return (\r\n      <Slide direction={joinDirection} in={joinVisible} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Join a Server!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a the Server Id provided by your friend and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"join-server-field\"\r\n              label=\"Server Id\"\r\n              value={serverId}\r\n              onChange={(e) => setServerId(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleJoinServer(serverId, userId))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleJoinServer(serverId, userId)}>Join Server</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the Channel Create Modal Window\r\n  const renderChannelCreate = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create a Channel!</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a Channel Name for your new channel and start chatting right now!  </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleCreateChannel(channelName, activeServer))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleCreateChannel(channelName, activeServer)}>Create Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to rename a channel\r\n  const renderChannelRename = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Rename Chanel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Enter a new Channel Name for Channel - {activeChannel.split('-')[0]} </Typography>\r\n            <TextField\r\n              id=\"create-channel-field\"\r\n              label=\"Channel Name\"\r\n              value={channelName}\r\n              onChange={(e) => setChannelName(e.target.value)}\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleRenameChannel(channelName, activeChannel.split('-')[1]))}\r\n              margin=\"dense\"\r\n              variant=\"outlined\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" onClick={() => handleRenameChannel(channelName, activeChannel.split('-')[1])}>Rename Channel</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders a modal to delete a channel\r\n  const renderChannelDelete = () => {\r\n    return (\r\n      <Slide direction='left' in={true} mountOnEnter unmountOnExit timeout={500}>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Delete Channel</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <Typography variant=\"body1\" paragraph> Are you sure you want to delete - {activeChannel.split('-')[0]} </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'green', marginRight: \"8px\" }} onClick={() => handleDeleteChannel(channelName, activeChannel.split('-')[1])}>Yes</Button>\r\n            <Button className=\"modal-button\" variant=\"contained\" color=\"primary\" style={{ backgroundColor: 'red', marginLeft: \"8px\" }} onClick={() => handleSnackMessage('Not deleting channel', false)}>No</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n\r\n  if (modalType === 'server-create-join')\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderMainServer()}\r\n        {renderServerCreate()}\r\n        {renderServerJoin()}\r\n      </Paper >\r\n    )\r\n  else if (modalType === 'channel-create') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelCreate()}\r\n      </Paper >\r\n    )\r\n  }\r\n  else if (modalType === 'server-rename') {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-rename\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelRename()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"channel-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderChannelDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n  else if (modalType === \"server-delete\") {\r\n    return (\r\n      <Paper className=\"container-prompt\">\r\n        {renderServerDelete()}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport SnackBarContent from '../SnackBar/SnackBarContent';\r\nimport PrivateMessageUserList from './PrivateMessageUserList';\r\nimport ChannelList from './ChannelList';\r\nimport ServerList from './ServerList';\r\nimport ActionsModal from '../ActionsModal/ActionsModal';\r\nimport { loadUserData } from '../../actions';\r\n\r\nexport default function Sidebar(props) {\r\n\r\n  // Get from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const { activeView } = useSelector(state => state.chat);\r\n\r\n  // Dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // Get props from parent (Used when Sidebar is rendered by header on mobile)\r\n  const { setDrawerVisible } = props;\r\n\r\n  // Local state\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalType, setModalType] = useState(null);\r\n  const [snackContent, setSnackContent] = useState('');\r\n  const [snackVisible, setSnackVisible] = useState(false);\r\n\r\n  // Handles Success of Modal Server Create / Join\r\n  // Closes Modal and show Snackbar with Create / Join Messsage\r\n  const handleSnackMessage = (response, pass) => {\r\n    if (response !== null) {\r\n      setModalVisible(false);\r\n      setSnackVisible(true);\r\n      setSnackContent(response);\r\n      if (pass)\r\n        dispatch(loadUserData(user.userId));\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"sidebar-container\">\r\n      <ServerList setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n      {activeView === \"servers\"\r\n        ? <ChannelList setDrawerVisible={setDrawerVisible} setModalVisible={setModalVisible} setModalType={setModalType} handleSnackMessage={handleSnackMessage} />\r\n        : <PrivateMessageUserList />\r\n      }\r\n      <Modal\r\n        open={modalVisible}\r\n        aria-labelledby=\"server create modal\"\r\n        aria-describedby=\"create a server\"\r\n        className=\"modal-wrapper\"\r\n        onClose={() => setModalVisible(false)}>\r\n        <ActionsModal handleSnackMessage={handleSnackMessage} modalType={modalType} />\r\n      </Modal>\r\n      <SnackBarContent visible={snackVisible} setVisible={setSnackVisible} content={snackContent} />\r\n    </div >\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage, sendPrivateMessage } from '../../actions';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart';\r\n\r\nimport SmileyFace from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\nexport default function SendMessage(props) {\r\n\r\n  // Get State from Redux Store\r\n  const { activeServer, activeChannel, activeView, activePMUser } = useSelector(state => state.chat);\r\n  const { userName } = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Local state\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  const [emojiMenuVisible, setEmojiMenuVisible] = useState(false);\r\n  const [placeholderTitle, setPlaceholderTitle] = useState(null)\r\n\r\n\r\n  // Check active view to determine where we send our messages\r\n  useEffect(() => {\r\n    if (activeView === \"servers\") {\r\n      setPlaceholderTitle(activeChannel.split('-')[0]);\r\n    }\r\n    else if (activeView === \"home\") {\r\n      setPlaceholderTitle(activePMUser);\r\n    }\r\n  }, [activeView, activeChannel, activePMUser])\r\n\r\n  // Handles submission of messages\r\n  // Dispatches event and sets TextField value to empty\r\n  function handleSubmit(message) {\r\n    if (message.msg.trim() !== \"\") {\r\n      // Send message to server, or user\r\n      if (activeView === \"servers\")\r\n        dispatch(sendMessage(message));\r\n      else if (activeView === \"home\") {\r\n        dispatch(sendPrivateMessage(message));\r\n      }\r\n      setChatMessage(\"\");\r\n    }\r\n  }\r\n\r\n  // Handles enter event to submit message\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      if (activeView === \"servers\")\r\n        handleSubmit({ server: activeServer, channel: activeChannel, from: userName, msg: chatMessage });\r\n      else if (activeView === \"home\")\r\n        handleSubmit({ from: userName, to: activePMUser, msg: chatMessage });\r\n    }\r\n  }\r\n\r\n  // Handles changes in message box (catches enter to not send new lines. (Must send SHIFT+ENTER))\r\n  function handleOnChange(e) {\r\n    if (e.target.value !== \"\\n\")\r\n      setChatMessage(e.target.value)\r\n  }\r\n\r\n\r\n  // When click emoji, close the menu\r\n  function handleEmojiClick(e) {\r\n    setChatMessage(chatMessage + e.native);\r\n    setEmojiMenuVisible(false);\r\n  }\r\n\r\n  // Closes emoji menu when clicked outside the div\r\n  window.onclick = ((e) => {\r\n    if (String(e.target.className).includes(\"send-message-emoji-menu\"))\r\n      setEmojiMenuVisible(false);\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"send-message-border\" />\r\n      <div className=\"send-message-container\">\r\n        <TextareaAutosize\r\n          aria-label=\"empty textarea\"\r\n          placeholder={`Message  #${placeholderTitle}`}\r\n          className=\"message-text-area\"\r\n          value={chatMessage}\r\n          onChange={(e) => handleOnChange(e)}\r\n          onKeyPress={(e) => handleKeyPress(e)}\r\n        />\r\n        <SmileyFace className=\"send-message-emoji-button\" onClick={() => setEmojiMenuVisible(!emojiMenuVisible)} />\r\n      </div>\r\n      <div className={(emojiMenuVisible ? \"send-message-emoji-menu show\" : \"send-message-emoji-menu hide\")}>\r\n        <div className=\"emoji-wrapper\"><Picker set=\"emojione\" onSelect={(e) => handleEmojiClick(e)} /></div>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { SwipeableDrawer, SvgIcon, Link, Tooltip } from '@material-ui/core';\r\n\r\nimport Sidebar from '../Sidebar/Sidebar';\r\n\r\nexport default function Header() {\r\n\r\n  // Get State from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeChannel, activePMUser, activeView } = chatStore;\r\n\r\n  // Local state\r\n  const [drawerVisible, setDrawerVisible] = useState(false);\r\n  const [title, setTitle] = useState(null);\r\n\r\n  // On active view change change title\r\n  useEffect(() => {\r\n    if (activeView === \"servers\") {\r\n      setTitle(activeChannel.split('-')[0].toLowerCase());\r\n    }\r\n    else if (activeView === \"home\") {\r\n      setTitle(activePMUser);\r\n    }\r\n  }, [activeView, activePMUser, activeChannel])\r\n\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className=\"navbar\">\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className=\"menu-burger-button\" onClick={() => setDrawerVisible(true)}>\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={drawerVisible}\r\n          onClose={() => setDrawerVisible(false)}\r\n          onOpen={() => setDrawerVisible(true)}>\r\n          <Sidebar setDrawerVisible={setDrawerVisible} />\r\n        </SwipeableDrawer>\r\n        <Typography variant=\"h6\">{title} </Typography>\r\n        <Link href=\"https://github.com/ericellb/React-Discord-Clone\" target=\"_blank\" style={{ color: 'white' }}>\r\n          <Tooltip title=\"Check me out on Github!\" className=\"tooltip\">\r\n            <IconButton>\r\n              <SvgIcon >\r\n                <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\r\n              </SvgIcon>\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Link>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card, Typography, makeStyles, TextField } from '@material-ui/core';\r\nimport { sendPrivateMessage, changeView, changePMUser } from '../../actions';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    textAlign: 'center',\r\n    width: 250,\r\n    background: '#2f3136'\r\n  },\r\n  cardHeader: {\r\n    background: '#202225',\r\n    width: '100%'\r\n  },\r\n  image: {\r\n    marginTop: '1em',\r\n    marginBottom: '8px'\r\n  },\r\n  cardInput: {\r\n    padding: '1em'\r\n  },\r\n  input: {\r\n    height: '38px'\r\n  }\r\n}));\r\n\r\nexport default function UserInfo(props) {\r\n\r\n  // Get state from redux store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  const { userName, setUserInfoVisible } = props;\r\n  const classes = useStyle();\r\n  const [messageText, setMessageText] = useState('');\r\n\r\n  // Handles keypress and calls the callback method\r\n  const handleKeyPress = (e, callbackMethod) => {\r\n    if (e.key === \"Enter\") {\r\n      callbackMethod();\r\n    }\r\n  }\r\n\r\n  // Calls API to send a Private message\r\n  const handleSendPrivateMessage = (messageText, userName) => {\r\n    const msg = { \"from\": user.userName, \"msg\": messageText, \"to\": userName };\r\n    dispatch(sendPrivateMessage(msg));\r\n    dispatch(changeView('home'));\r\n    dispatch(changePMUser(msg.to));\r\n    setUserInfoVisible(false);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <div className={classes.cardHeader}>\r\n        <img src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user-icon\" className={classes.image} />\r\n        <Typography variant='body1' gutterBottom>{userName}</Typography>\r\n      </div>\r\n      <div className={classes.cardInput}>\r\n        <TextField\r\n          id=\"user-private-message\"\r\n          label={`Private message`}\r\n          placeholder={`Message @ ${userName}`}\r\n          value={messageText}\r\n          onChange={(e) => setMessageText(e.target.value)}\r\n          onKeyPress={(e) => handleKeyPress(e, () => handleSendPrivateMessage(messageText, userName))}\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            className: classes.input\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true\r\n          }}\r\n        />\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { List, ListItem, ListItemAvatar, Avatar, ListItemText, Fade, Popover, CircularProgress } from '@material-ui/core';\r\nimport Code from 'react-code-prettify';\r\nimport UserInfo from '../UserInfo/UserInfo';\r\n\r\nexport default function Messages() {\r\n\r\n  // Get States from Redux Store\r\n  const chatStore = useSelector(state => state.chat);\r\n  const { activeServer, activeChannel, activeView, activePMUser } = chatStore;\r\n\r\n  // Local states\r\n  const [userInfoVisible, setUserInfoVisible] = useState(false);\r\n  const [messageIndex, setMessageIndex] = useState(12);\r\n  const [loadMessages, setLoadMessages] = useState(false);\r\n  const [userName, setUserName] = useState(null)\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  // ref to message container (for keeping scroll to bottom of chat)\r\n  let messageContainerBottomRef;\r\n  let messageContainerRef;\r\n\r\n  // Get message list from channel or from specific user\r\n  let messages = null;\r\n  let messagesLength = null;\r\n  if (activeView === \"servers\") {\r\n    messages = chatStore.servers[activeServer][\"channels\"][activeChannel];\r\n    messagesLength = messages.length;\r\n  }\r\n  else {\r\n    messages = chatStore.privateMessages[activePMUser];\r\n    // If no messages need to make empty array\r\n    if (messages === undefined) {\r\n      messages = [];\r\n    }\r\n    messagesLength = messages.length;\r\n  }\r\n\r\n  // Scroll to bottom of container if were not loading new messages\r\n  useEffect(() => {\r\n    if (!loadMessages)\r\n      messageContainerBottomRef.scrollIntoView({ block: 'end', behavior: 'smooth' })\r\n    else\r\n      messageContainerRef.scroll(0, 56);\r\n  }, [messageContainerBottomRef, messageContainerRef, loadMessages, messages]);\r\n\r\n  // Checks is message is a code block\r\n  const isTextCodeBlock = (message) => {\r\n    if (message.startsWith(\"```\") && message.endsWith(\"```\"))\r\n      return true;\r\n    else return false;\r\n  }\r\n\r\n  // Handles to load more messages when scroll at top\r\n  const handleScrollTop = (e) => {\r\n    const element = e.target;\r\n    if (element.scrollTop > 100) {\r\n      setLoadMessages(false);\r\n    }\r\n    if (element.scrollTop === 0) {\r\n      if (messagesLength > messageIndex) {\r\n        setTimeout(() => {\r\n          setLoadMessages(true);\r\n          if (messageIndex + 12 > messagesLength) {\r\n            setMessageIndex(messagesLength);\r\n          }\r\n          else {\r\n            setMessageIndex(messageIndex + 12);\r\n          }\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Formats the code block\r\n  const formatCode = (message) => {\r\n    return message.split('```')[1];\r\n  }\r\n\r\n  // Handles clicks for setting anchor to User Info (To private message)\r\n  const handleUserClick = (e, userName) => {\r\n    setUserName(userName);\r\n    setUserInfoVisible(true);\r\n    setAnchorEl(e.currentTarget);\r\n  }\r\n\r\n  // Closes popup of User Info\r\n  const handlePopoverClose = () => {\r\n    setUserInfoVisible(false);\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"messages-container\" onScroll={(e) => handleScrollTop(e)} ref={(element) => messageContainerRef = element}>\r\n      {messagesLength >= messageIndex ?\r\n        <div className=\"progress-container\">\r\n          <CircularProgress color=\"primary\" />\r\n        </div>\r\n        : null}\r\n      <List>\r\n        {messages !== null ? messages.slice(messagesLength - messageIndex, messagesLength).map((message, i) => {\r\n          // Filter for null messages (dummy message on backend should fix...)\r\n          return (\r\n            <Fade in={true} timeout={500}>\r\n              <ListItem className=\"message\" key={i}>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    <img className=\"user\" onClick={(e) => handleUserClick(e, message.from)} src={process.env.PUBLIC_URL + \"/user.png\"} alt=\"user icon\" height=\"48\" />\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                {isTextCodeBlock(message.msg)\r\n                  ? <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from.toLowerCase()}</div>} secondary={<Code codeString={formatCode(message.msg)} />} className=\"message-text\" />\r\n                  : <ListItemText primary={<div className=\"user\" onClick={(e) => handleUserClick(e, message.from)}>{message.from.toLowerCase()}</div>} secondary={message.msg} className=\"message-text\" />\r\n                }\r\n              </ListItem>\r\n            </Fade>\r\n          )\r\n        }) : null}\r\n      </List>\r\n      <div ref={(element) => messageContainerBottomRef = element}></div>\r\n      <Popover\r\n        id=\"user-info\"\r\n        open={userInfoVisible}\r\n        anchorEl={anchorEl}\r\n        onClose={handlePopoverClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right'\r\n        }}\r\n      >\r\n        <UserInfo userName={userName} setUserInfoVisible={setUserInfoVisible} />\r\n      </Popover>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { loadUserData } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport Div100vh from 'react-div-100vh';\r\n\r\nimport createHashHistory from '../../history';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport SendMessage from '../SendMessage/SendMessage';\r\nimport Header from '../Header/Header';\r\nimport Messages from '../Messages/Messages';\r\n\r\nexport default function Dashboard() {\r\n\r\n  // Get State from Redux Store\r\n  const user = useSelector(state => state.user);\r\n  const dispatch = useDispatch();\r\n\r\n  // Listens for changes on isSignedIn\r\n  // Gets initial user data upon change\r\n  useEffect(() => {\r\n    if (!user.isSignedIn) {\r\n      createHashHistory.push('/');\r\n    }\r\n    else\r\n      dispatch(loadUserData(user.userId));\r\n\r\n  }, [dispatch, user.isSignedIn, user.userId])\r\n\r\n\r\n  return (\r\n    <Div100vh>\r\n      <div className=\"grid-container\">\r\n\r\n        <div className=\"sidebar-grid\">\r\n          <Sidebar />\r\n        </div>\r\n\r\n        <div className=\"messages-grid\">\r\n          <Header />\r\n          <Messages />\r\n        </div>\r\n\r\n        <div className=\"send-messages-grid\">\r\n          <SendMessage />\r\n        </div>\r\n\r\n      </div >\r\n    </Div100vh>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Paper, Button, Card, CardContent, Typography, CardActionArea, CardMedia, Slide, TextField, Grid, IconButton, Checkbox } from '@material-ui/core';\r\nimport { GroupAdd, Person, ArrowBack } from '@material-ui/icons';\r\nimport axios from '../Api/api';\r\n\r\nimport createHashHistory from '../../history';\r\nimport { signIn } from '../../actions';\r\n\r\nexport default function Auth() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Local state to control Modal Windows + Data fields\r\n  const [mainVisible, setMainVisible] = useState(true);\r\n  const [mainDirection, setMainDirection] = useState('left');\r\n  const [createVisible, setCreateVisible] = useState(false);\r\n  const [createDirection, setCreateDirection] = useState('left')\r\n  const [loginVisible, setLoginVisible] = useState(false);\r\n  const [loginDirection, setLoginDirection] = useState('left')\r\n  const [userName, setUserName] = useState('');\r\n  const [userNameError, setUserNameError] = useState(false);\r\n  const [userNameErrorMsg, setUserNameErrorMsg] = useState(false);\r\n  const [userPass, setUserPass] = useState('');\r\n  const [userPassError, setUserPassError] = useState(false);\r\n  const [userPassErrorMsg, setUserPassErrorMsg] = useState(false)\r\n  const [rememberMe, setRememberMe] = useState(false);\r\n\r\n  // Shows the main modal (sets transition directions and views to visible / non visible)\r\n  const showMain = () => {\r\n    setMainDirection('left');\r\n    setMainVisible(true);\r\n    setCreateVisible(false);\r\n    setCreateDirection('right');\r\n    setLoginVisible(false);\r\n    setLoginDirection('right');\r\n  }\r\n\r\n  // Handles showing the Join Server window\r\n  const showCreateAccount = () => {\r\n    setCreateDirection('left');\r\n    setMainDirection('right');\r\n    setCreateVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles showing the Create Server window\r\n  const showLoginAccount = () => {\r\n    setLoginDirection('left');\r\n    setMainDirection('right');\r\n    setLoginVisible(true);\r\n    setMainVisible(false);\r\n  }\r\n\r\n  // Handles and checks keypress and calls the callback method\r\n  const handleKeyPress = (e, callBack) => {\r\n    if (e.key === \"Enter\") {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Validates input and calls callback function\r\n  const handleOnSubmit = (userName, userPass, callBack) => {\r\n    let error = false;\r\n    if (userName === '') {\r\n      setUserNameError(true);\r\n      setUserNameErrorMsg('Name cannot be empty');\r\n      error = true;\r\n    }\r\n    else setUserNameError(false);\r\n    if (userPass.length < 6) {\r\n      setUserPassError(true);\r\n      setUserPassErrorMsg('Passwords must be 6 characters');\r\n      error = true;\r\n    }\r\n    else setUserPassError(false);\r\n\r\n    if (!error) {\r\n      callBack();\r\n    }\r\n  }\r\n\r\n  // Handles creation of account and calls sign in action\r\n  const handleCreateAccount = async (userName, userPass) => {\r\n    try {\r\n      // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n      userName = encodeURIComponent(userName);\r\n      userPass = encodeURIComponent(userPass);\r\n\r\n      const response = await axios.post(`/user/create?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles login of account and calls sign in action\r\n  const handleLoginAccount = async (userName, userPass) => {\r\n    // encode username and userpass - it may have # $ & + ,  / : ; = ? @ [ ]\r\n    userName = encodeURIComponent(userName);\r\n    userPass = encodeURIComponent(userPass);\r\n\r\n    try {\r\n      const response = await axios.get(`/user/login?userName=${userName}&userPass=${userPass}`);\r\n      if (rememberMe) {\r\n        localStorage.setItem('user', JSON.stringify(response.data));\r\n      }\r\n      dispatch(signIn(response.data));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n    catch (err) {\r\n      const errorData = err.response.data;\r\n      if (errorData) {\r\n        setUserNameError(true);\r\n        setUserNameErrorMsg(errorData);\r\n        setUserPassError(true);\r\n        setUserPassErrorMsg(errorData)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Renders options to Create or Login to account\r\n  const renderMain = () => {\r\n    return (\r\n      <Slide direction={mainDirection} in={mainVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n          <Grid item sm={12} xs={12}>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create an account, or sign in!</Typography>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showCreateAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"primary\" gutterBottom>Create</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Create a new account.</Typography>\r\n                  <CardMedia>\r\n                    <GroupAdd className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"primary\">Create</Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <Card className=\"grid-card\">\r\n              <CardActionArea onClick={() => showLoginAccount()}>\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" color=\"secondary\" gutterBottom>Login</Typography>\r\n                  <Typography variant=\"body1\" paragraph>Sign in to an existing account.</Typography>\r\n                  <CardMedia>\r\n                    <Person className=\"modal-card-icon\" />\r\n                  </CardMedia>\r\n                  <Button variant=\"contained\" color=\"secondary\">Login </Button>\r\n                </CardContent>\r\n              </CardActionArea>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  // Renders the form to create an account\r\n  const renderCreateAccount = () => {\r\n    return (\r\n      <Slide direction={createDirection} in={createVisible} timeout={350} mountOnEnter unmountOnExit >\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Create Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox value={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => handleCreateAccount(userName, userPass))}>Create</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  // Renders the form to login to account\r\n  const renderLoginAccount = () => {\r\n    return (\r\n      <Slide direction={loginDirection} in={loginVisible} timeout={350} mountOnEnter unmountOnExit>\r\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item xs={12}>\r\n            <IconButton onClick={showMain}><ArrowBack /></IconButton>\r\n            <Typography variant=\"h5\" color=\"primary\" align=\"center\">Login Account</Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"username\"\r\n              label=\"Username\"\r\n              values={userName}\r\n              error={userNameError}\r\n              helperText={userNameErrorMsg}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-textfield\">\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              values={userPass}\r\n              error={userPassError}\r\n              helperText={userPassErrorMsg}\r\n              onChange={(e) => setUserPass(e.target.value)}\r\n              margin=\"dense\"\r\n              autoComplete=\"off\"\r\n              variant=\"outlined\"\r\n              onKeyPress={(e) => handleKeyPress(e, () => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass)))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className=\"grid-button\">\r\n            <div>\r\n              Remember Me <Checkbox vale={rememberMe} onChange={((e) => setRememberMe(e.target.checked))} />\r\n            </div>\r\n            <Button className=\"modal-login-button\" variant=\"contained\" color=\"primary\" onClick={() => handleOnSubmit(userName, userPass, () => handleLoginAccount(userName, userPass))}>Login</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Slide >\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-wrapper\">\r\n      <Paper className=\"container-prompt\">\r\n        {renderMain()}\r\n        {renderCreateAccount()}\r\n        {renderLoginAccount()}\r\n      </Paper >\r\n    </div >\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport './App.css';\r\nimport Dashboard from '../Dashboard/Dashboard';\r\nimport Auth from '../Auth/Auth';\r\nimport { signIn } from '../../actions';\r\nimport createHashHistory from '../../history';\r\n\r\nfunction App() {\r\n\r\n  // Dispatch \r\n  const dispatch = useDispatch();\r\n\r\n  // Check local storage if have login info\r\n  // Dispatch sign in action with our userId and redirect to dashboard\r\n  const checkLocalStorageAuth = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    if (user) {\r\n      dispatch(signIn(user));\r\n      createHashHistory.push('/dashboard');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <HashRouter>\r\n        {checkLocalStorageAuth()}\r\n        <Route path=\"/dashboard\" exact component={Dashboard} />\r\n        <Route path=\"/\" exact component={Auth} />\r\n      </HashRouter>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        fontSize: \"14px\",\r\n        backgroundColor: 'black'\r\n      }\r\n    },\r\n    MuiSnackbarContent: {\r\n      root: {\r\n        backgroundColor: '#202225',\r\n        color: 'white'\r\n      }\r\n    },\r\n    MuiAppBar: {\r\n      colorPrimary: {\r\n        backgroundColor: '#36393E',\r\n        position: 'absolute'\r\n      }\r\n    }\r\n  },\r\n  palette: {\r\n    type: 'dark',\r\n    primary: {\r\n      main: '#7289da'\r\n    },\r\n    secondary: {\r\n      main: '#3ca374'\r\n    }\r\n  },\r\n  typography: {\r\n    \"fontFamily\": \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\r\n    \"fontSize\": 14,\r\n    \"fontWeightLight\": 400,\r\n    \"fontWeightRegular\": 500,\r\n    \"fontWeightMedium\": 600\r\n  }\r\n\r\n});","import io from 'socket.io-client';\r\n\r\nimport { SEND_SOCKET_MESSAGE, RECEIVE_SOCKET_MESSAGE, SEND_SOCKET_PRIVATE_MESSAGE, SIGN_IN, RECEIVE_SOCKET_PRIVATE_MESSAGE } from '../actions/types';\r\n\r\nexport const socketMiddleware = (baseUrl) => {\r\n  return storeAPI => {\r\n    let socket = io(baseUrl);\r\n\r\n    // Setup default listener\r\n    let listener = setupSocketListener('default', socket, storeAPI);\r\n\r\n    // Check actions and emit from socket if needed\r\n    return next => action => {\r\n      if (action.type === SEND_SOCKET_MESSAGE) {\r\n        socket.emit('simple-chat-message', action.payload);\r\n        return;\r\n      }\r\n      else if (action.type === SIGN_IN) {\r\n        socket.emit('simple-chat-sign-in', action.payload.userId);\r\n        listener.off();\r\n        listener = setupSocketListener(action.payload.userId, socket, storeAPI);\r\n      }\r\n      else if (action.type === SEND_SOCKET_PRIVATE_MESSAGE) {\r\n        socket.emit('simple-chat-private-message', action.payload);\r\n        return;\r\n      }\r\n\r\n      return next(action);\r\n    }\r\n  }\r\n}\r\n\r\n// Listens on socket with our userId\r\n// Listens to socket server\r\n// Action types of (Message, Channel)\r\nfunction setupSocketListener(userId, socket, storeAPI) {\r\n  return socket.on(userId, (action) => {\r\n    // Check for action type\r\n    if (action.type === \"message\") {\r\n      storeAPI.dispatch({\r\n        type: RECEIVE_SOCKET_MESSAGE,\r\n        payload: action.payload\r\n      });\r\n    }\r\n    else if (action.type === \"private-message\") {\r\n      storeAPI.dispatch({\r\n        type: RECEIVE_SOCKET_PRIVATE_MESSAGE,\r\n        payload: action.payload\r\n      })\r\n    }\r\n  });\r\n}","import { RECEIVE_SOCKET_MESSAGE, RECEIVE_SOCKET_PRIVATE_MESSAGE, ADD_CHANNEL, CHANGE_SERVER, CHANGE_CHANNEL, GET_INITIAL_DATA, ADD_SERVER, CHANGE_VIEW, CHANGE_PM_USER } from '../actions/types';\r\n\r\nconst initialState = {\r\n  servers: {\r\n    \"Default-FANfDprXmt\": {\r\n      \"channels\": {\r\n        \"general-0m5vBsRnfd\": [\r\n        ],\r\n        \"gaming-p9DnvvrfWo\": [\r\n        ],\r\n        \"programming-aRoD4umYpb\": [\r\n        ],\r\n        \"cooking-v88UngJkiD\": [\r\n        ],\r\n        \"misc-uSje5DwUH0\": [\r\n        ],\r\n        \"/b/-Ry06VYrX3x\": [\r\n        ]\r\n      },\r\n      \"activeUsers\": [\r\n\r\n      ]\r\n    }\r\n  },\r\n  privateMessages: {\r\n  },\r\n  activeServer: 'Default-FANfDprXmt',\r\n  activeChannel: 'general-0m5vBsRnfd',\r\n  activeView: 'servers',\r\n  activePMUser: 'none'\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case RECEIVE_SOCKET_MESSAGE:\r\n      let { server, channel, from, msg } = action.payload;\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [server]: {\r\n            ...state.servers[server],\r\n            \"channels\": {\r\n              ...state.servers[server].channels,\r\n              [channel]: [\r\n                ...state.servers[server][\"channels\"][channel], { from: from, msg: msg }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case RECEIVE_SOCKET_PRIVATE_MESSAGE:\r\n      if (state.privateMessages[action.payload.user]) {\r\n        return {\r\n          ...state,\r\n          privateMessages: {\r\n            ...state.privateMessages,\r\n            [action.payload.user]: [\r\n              ...state.privateMessages[action.payload.user], { from: action.payload.from, to: action.payload.to, msg: action.payload.msg }\r\n            ]\r\n          }\r\n        }\r\n      }\r\n      else return {\r\n        ...state,\r\n        privateMessages: {\r\n          ...state.privateMessages,\r\n          [action.payload.user]: [\r\n            { from: action.payload.from, to: action.payload.to, msg: action.payload.msg }\r\n          ]\r\n        }\r\n      }\r\n    case ADD_CHANNEL:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            ...state.servers[action.payload.server],\r\n            \"channels\": {\r\n              ...state.servers[action.payload.server].channels,\r\n              [action.payload.channel]: [\r\n\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case ADD_SERVER:\r\n      return {\r\n        ...state,\r\n        servers: {\r\n          ...state.servers,\r\n          [action.payload.server]: {\r\n            \"channels\": {\r\n              [action.payload.channel]: [\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    case GET_INITIAL_DATA:\r\n      return { ...state, servers: action.payload.servers, privateMessages: action.payload.privateMessages, activeServer: \"Default-FANfDprXmt\", activeChannel: \"gaming-p9DnvvrfWo\" };\r\n    case CHANGE_SERVER:\r\n      return { ...state, activeServer: action.payload, activeChannel: Object.keys(state.servers[action.payload][\"channels\"])[0] }\r\n    case CHANGE_CHANNEL:\r\n      return { ...state, activeChannel: action.payload }\r\n    case CHANGE_VIEW:\r\n      return { ...state, activeView: action.payload, activePMUser: Object.keys(state.privateMessages)[0] }\r\n    case CHANGE_PM_USER:\r\n      return { ...state, activePMUser: action.payload }\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { SIGN_IN, SIGN_OUT } from '../actions/types';\r\n\r\nconst initialState = {\r\n  isSignedIn: false,\r\n  isAdmin: false,\r\n  userId: null,\r\n  userName: null\r\n}\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SIGN_IN:\r\n      return { ...state, isSignedIn: true, userId: action.payload.userId, userName: action.payload.userName }\r\n    case SIGN_OUT:\r\n      return { ...state, isSignedIn: false, userId: null, userName: 'anon' + Math.floor(Math.random(0) * 100) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { chatReducer } from './chatReducer';\r\nimport { userReducer } from './userReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  chat: chatReducer,\r\n  user: userReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { socketMiddleware } from './middleware/socketMiddleware';\n\nimport reducers from './reducers'\n\nconst baseUrl = (process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'https://simple-chat-apix.herokuapp.com');\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk, socketMiddleware(baseUrl))));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n"],"sourceRoot":""}